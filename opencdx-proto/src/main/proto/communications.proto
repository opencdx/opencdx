syntax = "proto3";
option java_multiple_files = true;
package cdx.open_communication.v2alpha;

import "audit.proto";
import "google/protobuf/timestamp.proto";

// Enum for template types
enum TemplateType {
  TEMPLATE_TYPE_UNSPECIFIED = 0; //Template is unspecified.
  TEMPLATE_TYPE_NOTIFICATION = 1; //Template is a Notification
  TEMPLATE_TYPE_WELCOME = 2; //Template is a welcome
  TEMPLATE_TYPE_NEWSLETTER = 3; //Template is a newsletter.
  TEMPLATE_TYPE_ALERT = 4; // Template is an alert.
  TEMPLATE_TYPE_REMINDER = 5; // Template is a reminder.
  TEMPLATE_TYPE_CONFIRMATION = 6; // Template is a confirmaiton.
}

// Indicates the status of the Notification
enum NotificationStatus {
  NOTIFICATION_STATUS_UNSPECIFIED = 0; // Unspecified Notification status.
  NOTIFICATION_STATUS_PENDING = 1; // Unspecified Notification status.
  NOTIFICATION_STATUS_SENT = 2; // Unspecified Notification status.
  NOTIFICATION_STATUS_FAILED = 3; // Unspecified Notification status.
}

// Indicates the priority of this Notification
enum NotificationPriority {
  NOTIFICATION_PRIORITY_UNSPECIFIED = 0; // Priority is not specified.
  NOTIFICATION_PRIORITY_LOW = 1; // Priority is low
  NOTIFICATION_PRIORITY_MEDIUM = 2; // Priority is Medium
  NOTIFICATION_PRIORITY_HIGH = 3; // Priority is High
  NOTIFICATION_PRIORITY_IMMEDIATE = 4; // Priority is Immediate
}
/**
Defines the structure for representing email templates.
*/
message EmailTemplate {
  optional string template_id = 1;            // Unique identifier for the email template.
  string subject = 2;                // Subject line of the email template.
  string content = 3;                // Content of the email template.
  repeated string variables = 4;     // Placeholder variables within the template.
  TemplateType template_type = 5; // Type of the email template.
}

/**

Defines the structure for representing SMS templates.
*/
message SMSTemplate {
  optional string template_id = 1;            // Unique identifier for the SMS template.
  string message = 2;                // Content of the SMS template.
  repeated string variables = 3;     // Placeholder variables within the SMS template.
  TemplateType template_type = 4; // Type of the SMS template.
}

/**

Defines the structure for notification events.
*/
message NotificationEvent {
  optional string event_id = 1;               // Unique identifier for the notification event.
  string event_name = 2;             // Human-readable name of the event.
  string event_description = 3;      // Brief description of the event.
  optional string email_template_id = 4;      // ID of the associated email template.
  optional string sms_template_id = 5;        // ID of the associated SMS template.
  repeated string event_parameters = 6; // Event-specific parameters.
  NotificationPriority priority = 7;  // Priority of this notification event.
  cdx.open_audit.v2alpha.SensitivityLevel sensitivity = 8; // Indicates the Sensitivity level of the notification when sent.
}

/**
Defines the structure for attachments.
 */
message Attachment {
  string filename = 1;             // Filename of the attachment.
  bytes data = 2;                 // Binary data of the attachment.
  string mime_type = 3;           // MIME type of the attachment.
}

/**
Representation of a notification that can be sent through the communication service.
*/
message Notification {
  optional string queue_id = 1;               // Unique identifier for the notification within the queue.
  string event_id = 2;               // Event or trigger associated with this notification.
  optional NotificationStatus sms_status = 3;  // Status of the SMS notification (e.g., pending, sent, failed).
  optional NotificationStatus email_status = 4;// Status of the EMAIL notification (e.g., pending, sent, failed).
  optional google.protobuf.Timestamp timestamp = 5;               // Timestamp when the notification was added to the queue.

  // Store additional custom data associated with the notification.
  map<string, string> custom_data = 6;

  // Email attributes
  repeated string to_email = 7;      // Recipients' email addresses.
  repeated string cc_email = 8;      // Carbon copy (Cc) recipients' email addresses.
  repeated string bcc_email = 9;     // Blind carbon copy (Bcc) recipients' email addresses.
  repeated Attachment email_attachments = 10; // Email attachments.

  // SMS attributes
  repeated string to_phone_number = 11; // Recipients' phone numbers.

  // Variables for replacement.
  map<string,string> variables = 12;   // Variables or placeholders.

  repeated string recipients_id = 13; // List of the UUID's for each email recipient and for recipients phone numbers.

}

/**
Defines the template identification for the operation
 */
message TemplateRequest{
  string template_id = 1;
}
/**
Indicates if the operation was successful.
 */
message SuccessResponse{
  bool success = 1;
}

/**
Request Message to list SMSTemplates
 */
message SMSTemplateListRequest{
  int32 page_size = 1; // Size of each page.
  int32 page_number = 2; // The page being requested.
  bool sort_ascending = 3; // indicating if the results should ascending.
}

/**
Request Message to list EmailTemplates
 */
message EmailTemplateListRequest{
  int32 page_size = 1; // Size of each page.
  int32 page_number = 2; // The page being requested.
  bool sort_ascending = 3; // indicating if the results should ascending.
}

/**
Request Message to list NotificationEvents
 */
message NotificationEventListRequest{
  int32 page_size = 1; // Size of each page.
  int32 page_number = 2; // The page being requested.
  bool sort_ascending = 3; // indicating if the results should ascending.
}

/**
Response containing the requested list of SMSTemplates
 */
message SMSTemplateListResponse {
  int32 page_size = 1; // Size of each page.
  int32 page_number = 2; // The page being requested.
  bool sort_ascending = 3; // indicating if the results should ascending.
  int32 page_count = 4; // Total number of available pages.
  repeated SMSTemplate templates = 5; // List of SMSTemplates
}

/**
Response containing the requested list of EmailTemplates
 */
message EmailTemplateListResponse {
  int32 page_size = 1; // Size of each page.
  int32 page_number = 2; // The page being requested.
  bool sort_ascending = 3; // indicating if the results should ascending.
  int32 page_count = 4; // Total number of available pages.
  repeated EmailTemplate templates = 5; // List of EmailTemplates
}

/**
Response containing the requested list of NotificationEvents
 */
message NotificationEventListResponse {
  int32 page_size = 1; // Size of each page.
  int32 page_number = 2; // The page being requested.
  bool sort_ascending = 3; // indicating if the results should ascending.
  int32 page_count = 4; // Total number of available pages.
  repeated NotificationEvent templates = 5; //List of NotificationEvents
}

/**
Audit record for communication messages se
 */
message CommunicationAuditRecord{
  Notification notification = 1; // The notification to trigger the communication
  string emailContent = 2; // Content of the email
  string smsContent = 3; // Content of the SMS Notification.
}

// Service API
service CommunicationService {
  // Email Template Management
  rpc CreateEmailTemplate(EmailTemplate) returns (EmailTemplate); // Create a new email template.
  rpc GetEmailTemplate(TemplateRequest) returns (EmailTemplate); // Retrieve an email template by ID.
  rpc UpdateEmailTemplate(EmailTemplate) returns (EmailTemplate); // Update an email template.
  rpc DeleteEmailTemplate(TemplateRequest) returns (SuccessResponse); // Delete an email template.

  // SMS Template Management
  rpc CreateSMSTemplate(SMSTemplate) returns (SMSTemplate); // Create a new SMS template.
  rpc GetSMSTemplate(TemplateRequest) returns (SMSTemplate); // Retrieve an SMS template by ID.
  rpc UpdateSMSTemplate(SMSTemplate) returns (SMSTemplate); // Update an SMS template.
  rpc DeleteSMSTemplate(TemplateRequest) returns (SuccessResponse); // Delete an SMS template.

  // Notification Event Management
  rpc CreateNotificationEvent(NotificationEvent) returns (NotificationEvent); // Create a new notification event.
  rpc GetNotificationEvent(TemplateRequest) returns (NotificationEvent); // Retrieve a notification event by ID.
  rpc UpdateNotificationEvent(NotificationEvent) returns (NotificationEvent); // Update a notification event.
  rpc DeleteNotificationEvent(TemplateRequest) returns (SuccessResponse); // Delete a notification event.

  // Notification Queue Operations
  rpc SendNotification(Notification) returns (SuccessResponse); // Send a notification.

  // Retrieve Lists
  rpc listSMSTemplates(SMSTemplateListRequest) returns (SMSTemplateListResponse); // Retrieve a list of SMS templates.
  rpc listEmailTemplates(EmailTemplateListRequest) returns (EmailTemplateListResponse); // Retrieve a list of email templates.
  rpc listNotificationEvents(NotificationEventListRequest) returns (NotificationEventListResponse); // Retrieve a list of notification events.
}
