/*
 * Proto file for maintaining the list of services implemented by OpenCDx Health.
 */
syntax = "proto3";
option java_multiple_files = true;
package cdx.opencdx.grpc.service.health;
import "opencdx_data.proto";

/**
 * The ConnectedLabService provides methods to manage connected labs.
 */
service ConnectedLabService {
  /**
   * Submit lab findings for a connected test submission.
   */
  rpc SubmitLabFindings(LabFindings) returns (LabFindingsResponse);

  /**
   * Create a connected lab.
   */
  rpc CreateConnectedLab(CreateConnectedLabRequest) returns (CreateConnectedLabResponse);
  /**
   * Get a connected lab.
   */
  rpc GetConnectedLab(GetConnectedLabRequest) returns (GetConnectedLabResponse);
  /**
   * Update a connected lab.
   */
  rpc UpdateConnectedLab(UpdateConnectedLabRequest) returns (UpdateConnectedLabResponse);
  /**
   * Delete a connected lab.
   */
  rpc DeleteConnectedLab(DeleteConnectedLabRequest) returns (DeleteConnectedLabResponse);
  /**
   * List connected labs.
   */
  rpc ListConnectedLabs(ListConnectedLabsRequest) returns (ListConnectedLabsResponse);
}


/*
 * The HealthcareService provides remote procedure call (RPC) methods to manipulate and fetch
 * Test related information from connected Tests.
 */
service HealthcareService {
  /*
   * The RPC method to submit a new test. It takes a ConnectedTest message as input and returns a TestSubmissionResponse message.
   */
  rpc SubmitTest(ConnectedTest) returns (TestSubmissionResponse);
  /*
   * The RPC method to get test details by ID. It takes a TestIdRequest message as input and returns a ConnectedTest message.
   */
  rpc GetTestDetailsById(TestIdRequest) returns (ConnectedTest);
  /*
   * Retrieves a list of connected tests by user ID. It takes a ConnectedTestListRequest as input and returns a ConnectedTestListResponse.
   */
  rpc ListConnectedTests(ConnectedTestListRequest) returns (ConnectedTestListResponse);
  /*
   * Retrieves a list of connected tests by national health ID. It takes a ConnectedTestListByNHIDRequest as input and returns a ConnectedTestListByNHIDResponse.
   */
  rpc ListConnectedTestsByNHID(ConnectedTestListByNHIDRequest) returns (ConnectedTestListByNHIDResponse);
}


/*
 * Service for tracking medication prescriptions and administration.
 */
service MedicationService {
  /*
   * Prescribes a new medication for a patient.
   */
  rpc Prescribing(Medication) returns (Medication);

  /*
   * Ends a medication for a patient.
   */
  rpc Ending(EndMedicationRequest) returns (Medication);

  /*
   * Lists all medications for a given patient ID.
   */
  rpc ListAllMedications(ListMedicationsRequest) returns (ListMedicationsResponse);

  /*
   * Lists current medications for a given patient ID.
   */
  rpc ListCurrentMedications(ListMedicationsRequest) returns (ListMedicationsResponse);

  /*
   * Search medications by brand name, responses will include generics.
   */
  rpc SearchMedications(SearchMedicationsRequest) returns (ListMedicationsResponse);
}


service MedicationAdministrationService {
  /*
   * Tracks when medication is given to a patient.
   */
  rpc TrackMedicationAdministration(MedicationAdministration) returns (MedicationAdministration);

  /*
   * Retrieve medication information by ID.
   */
  rpc GetMedicationById(GetMedicationByIdRequest) returns (Medication);

  /*
   * Retrieve medication information by patient ID within a date range.
   */
  rpc ListMedications(ListMedicationsRequest) returns (ListMedicationsResponse);
}

/*
 * UserProfileService is the service definition for User Profile operations
 */
service UserProfileService {
  /*
   * GetUserProfile is an RPC method that retrieves a user profile based on the provided user ID in the UserProfileRequest
   */
  rpc GetUserProfile(UserProfileRequest) returns (UserProfileResponse);

  /*
   * UpdateUserProfile is an RPC method that updates a user profile with the provided updated profile details in the UpdateUserProfileRequest
   */
  rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse);

  /*
  * CreateUserProfile is an RPC method that creates a user profile based on UserProfileRequest
  */
  rpc CreateUserProfile(CreateUserProfileRequest) returns (CreateUserProfileResponse);

  /*
   * DeleteUserProfile is an RPC method that deletes a user profile based on the provided user ID in the DeleteUserProfileRequest
   */
  rpc DeleteUserProfile(DeleteUserProfileRequest) returns (DeleteUserProfileResponse);
}


/*
 * gRPC services and operations for managing healthcare data.
 */
service RoutineSystemService {
  /*
   * RPC service for creating a new entity in the healthcare routine.
   */
  rpc CreateRoutine(RoutineRequest) returns (RoutineResponse);
  /*
   * RPC service for retrieving information about a specified entity in the healthcare routine.
   */
  rpc GetRoutine(RoutineRequest) returns (RoutineResponse);
  /*
   * RPC service for creating new clinical protocol execution entity.
   */
  rpc CreateClinicalProtocolExecution(ClinicalProtocolExecutionRequest) returns (ClinicalProtocolExecutionResponse);
  /*
   * RPC service for retrieving data about a specific clinical protocol execution entity.
   */
  rpc GetClinicalProtocolExecution(ClinicalProtocolExecutionRequest) returns (ClinicalProtocolExecutionResponse);
  /*
   * RPC service for creating a new lab order entity.
   */
  rpc CreateLabOrder(LabOrderRequest) returns (LabOrderResponse);
  /*
   * RPC service for retrieving information about a specific lab order entity.
   */
  rpc GetLabOrder(LabOrderRequest) returns (LabOrderResponse);
  /*
   * RPC service for creating a new diagnosis entity.
   */
  rpc CreateDiagnosis(DiagnosisRequest) returns (DiagnosisResponse);
  /*
   * RPC service for retrieving information about a specific diagnosis entity.
   */
  rpc GetDiagnosis(DiagnosisRequest) returns (DiagnosisResponse);
  /*
   * RPC service for creating a new suspected diagnosis entity.
   */
  rpc CreateSuspectedDiagnosis(SuspectedDiagnosisRequest) returns (SuspectedDiagnosisResponse);
  /*
   * RPC service for retrieving information about a suspected diagnosis entity.
   */
  rpc GetSuspectedDiagnosis(SuspectedDiagnosisRequest) returns (SuspectedDiagnosisResponse);
  /*
   * RPC service for creating a new lab result entity.
   */
  rpc CreateLabResult(LabResultRequest) returns (LabResultResponse);
  /*
   * RPC service for retrieving data about a specific lab result entity.
   */
  rpc GetLabResult(LabResultRequest) returns (LabResultResponse);
}


/*
 * Service for tracking vaccine and administration.
 */
service VaccineService {
  /*
    * Tracks when vaccine is given to a patient.
    */
  rpc TrackVaccineAdministration(Vaccine) returns (Vaccine);
  /*
   * Retrieve vaccine information by ID.
   */
  rpc GetVaccineById(GetVaccineByIdRequest) returns (Vaccine);

  /*
   * Retrieve vaccine information by patient ID within a date range.
   */
  rpc ListVaccines(ListVaccinesRequest) returns (ListVaccinesResponse);
}

/*
 * The HeightVitalsService provides remote procedure call (RPC) methods to manipulate and fetch
 * Height Measurements related information.
 */
service HeightMeasurementService {

  /**
   * Create a HeightMeasurement.
   */
  rpc CreateHeightMeasurement(CreateHeightMeasurementRequest) returns (CreateHeightMeasurementResponse);
  /**
   * Get a HeightMeasurement.
   */
  rpc GetHeightMeasurement(GetHeightMeasurementRequest) returns (GetHeightMeasurementResponse);
  /**
   * Update a HeightMeasurement.
   */
  rpc UpdateHeightMeasurement(UpdateHeightMeasurementRequest) returns (UpdateHeightMeasurementResponse);
  /**
   * Delete a HeightMeasurement.
   */
  rpc DeleteHeightMeasurement(DeleteHeightMeasurementRequest) returns (SuccessResponse);
  /**
   * List HeightMeasurement.
   */
  rpc ListHeightMeasurements(ListHeightMeasurementsRequest) returns (ListHeightMeasurementsResponse);
}


/*
 * The WeightMeasurementService provides remote procedure call (RPC) methods to manipulate and fetch
 * Weight Measurements related information.
 */
service WeightMeasurementService {

  /**
   * Create a WeightMeasurement.
   */
  rpc CreateWeightMeasurement(CreateWeightMeasurementRequest) returns (CreateWeightMeasurementResponse);
  /**
   * Get a WeightMeasurement.
   */
  rpc GetWeightMeasurement(GetWeightMeasurementRequest) returns (GetWeightMeasurementResponse);
  /**
   * Update a WeightMeasurement.
   */
  rpc UpdateWeightMeasurement(UpdateWeightMeasurementRequest) returns (UpdateWeightMeasurementResponse);
  /**
   * Delete a WeightMeasurement.
   */
  rpc DeleteWeightMeasurement(DeleteWeightMeasurementRequest) returns (SuccessResponse);
  /**
   * List WeightMeasurement.
   */
  rpc ListWeightMeasurements(ListWeightMeasurementsRequest) returns (ListWeightMeasurementsResponse);
}

/*
 * The HeartRPMService provides remote procedure call (RPC) methods to manipulate and fetch
 * HeartRPM related information.
 */
service HeartRPMService {

  /**
   * Create a HeartRPM.
   */
  rpc CreateHeartRPMMeasurement(CreateHeartRPMRequest) returns (CreateHeartRPMResponse);
  /**
   * Get a HeartRPM.
   */
  rpc GetHeartRPMMeasurement(GetHeartRPMRequest) returns (GetHeartRPMResponse);
  /**
   * Update a HeartRPM.
   */
  rpc UpdateHeartRPMMeasurement(UpdateHeartRPMRequest) returns (UpdateHeartRPMResponse);
  /**
   * Delete a HeartRPM.
   */
  rpc DeleteHeartRPMMeasurement(DeleteHeartRPMRequest) returns (SuccessResponse);
  /**
   * List HeartRPM.
   */
  rpc ListHeartRPMMeasurements(ListHeartRPMRequest) returns (ListHeartRPMResponse);
}


/*
 * The BPMService provides remote procedure call (RPC) methods to manipulate and fetch
 * BPM related information.
 */
service BPMService {

  /**
   * Create a BPM.
   */
  rpc CreateBPMMeasurement(CreateBPMRequest) returns (CreateBPMResponse);
  /**
   * Get a BPM.
   */
  rpc GetBPMMeasurement(GetBPMRequest) returns (GetBPMResponse);
  /**
   * Update a BPM.
   */
  rpc UpdateBPMMeasurement(UpdateBPMRequest) returns (UpdateBPMResponse);
  /**
   * Delete a BPM.
   */
  rpc DeleteBPMMeasurement(DeleteBPMRequest) returns (SuccessResponse);
  /**
   * List BPM.
   */
  rpc ListBPMMeasurements(ListBPMRequest) returns (ListBPMResponse);
}

/*
 * This is a Protobuf service definition for a Neural Predictor.
 * It includes a method for making a prediction based on input data.
 */
service NeuralPredictorService {
  /*
   * This method predicts a value based on input data it receives in a PredictorRequest message
   * and returns a PredictorResponse message that contains the output of the prediction model.
   */
  rpc Predict(PredictorRequest) returns (PredictorResponse);
}

/*
 * Service definitions in ProviderService to Get, Delete, List and Load healthcare providers.
 */
service ProviderService {
  /*
   * RPC to retrieve a provider by their number.
   */
  rpc GetProviderByNumber(GetProviderRequest) returns (GetProviderResponse);

  /*
  * RPC to remove a provider.
  */
  rpc DeleteProvider(DeleteProviderRequest) returns (DeleteProviderResponse);

  /*
  * RPC to retrieve a list of all providers.
  */
  rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse);

  /*
   * RPC to load a specific healthcare provider.
   */
  rpc LoadProvider(LoadProviderRequest) returns (LoadProviderResponse);
}