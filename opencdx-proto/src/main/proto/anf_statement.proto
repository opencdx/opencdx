syntax = "proto3";
package cdx.opencdx.grpc.anf;

import "google/protobuf/timestamp.proto";

// Enumerates health risk levels.
enum HealthRisk {
  HEALTH_RISK_UNSPECIFIED = 0;  // Default, not specified
  HEALTH_RISK_LOW = 1;  // Low risk
  HEALTH_RISK_NORMAL = 2;  // Average risk
  HEALTH_RISK_HIGH = 3;  // High risk
  HEALTH_RISK_CRITICAL = 4;  // Critical risk
}

// Enumeration representing the different potential statuses of a result.
enum ResultStateStatus {
  RESULT_STATE_STATUS_UNSPECIFIED = 0;  // The default, when the result status hasn't been specified
  RESULT_STATE_STATUS_ON_HOLD = 1;      // Indicates that the associated action is currently paused or on hold
  RESULT_STATE_STATUS_NEEDED = 2;       // Implies that the action is required but hasn't started yet
  RESULT_STATE_STATUS_REJECTED = 3;     // Denotes that the action was declined or rejected
  RESULT_STATE_STATUS_COMPLETED = 4;    // Represents that the action was successfully completed
}

// Enum 'NormalRange' indicates the range in which a result falls.
enum NormalRange {
  // The default value, indicating that the range has not been specified.
  NORMAL_RANGE_UNSPECIFIED = 0;
  // Indicates that the result is on the low end of the normal range.
  NORMAL_RANGE_LOW = 1;
  // The result falls within the normal range.
  NORMAL_RANGE_NORMAL = 2;
  // Indicates that the result is on the high end of the normal range.
  NORMAL_RANGE_HIGH = 3;
  // The result is critically high or low, falling outside the normal range.
  NORMAL_RANGE_CRITICAL = 4;
}

// Enum to encapsulate the possible Media statuses.
enum Status {
  STATUS_UNSPECIFIED = 0;  // Unspecified or unknown media status.
  STATUS_ACTIVE = 1;  // Media status is active.
  STATUS_DELETED = 2;  // Media status designates that the media is being deleted.
}

// Service interface for operations related to ANF Statement instances.
// It provides create, retrieve, update, and delete (CRUD) operations for instances of ANFStatement.
service ANFService {
  // Creates a new ANF Statement instance and returns its identifier.
  rpc CreateANFStatement (ANFStatement) returns (Identifier);
  // Retrieves an existing ANF Statement using its identifier.
  rpc GetANFStatement (Identifier) returns (ANFStatement);
  // Updates an existing ANF Statement instance and returns its identifier.
  rpc UpdateANFStatement (ANFStatement) returns (Identifier);
  // Deletes an ANF Statement instance using its identifier and returns the identifier of the deleted item.
  rpc DeleteANFStatement (Identifier) returns (Identifier);
}


// 'Identifier' Message definition for a unique ID associated with an ANFStatement.
message Identifier {
  string id = 1;  // The variable 'id' stands for the unique Identifier for an ANFStatement.
}

// The `Measure` message encapsulates a quantifiable attribute such as time duration or test results.
// It defines an upper and lower bound for the measure, clarification if these bounds are inclusive,
// the semantic interpretation of the measure, and optionally, the resolution or accuracy of the measure.
message Measure {
  // The `upper_bound` field signifies the maximum limit of the measure.
  float upper_bound = 1;
  // The `lower_bound` field signifies the minimum limit of the measure.
  float lower_bound = 2;
  // The `include_upper_bound` field reveals if the `upper_bound` value is inclusive in the measure.
  bool include_upper_bound = 3;
  // The `include_lower_bound` field reveals if the `lower_bound` value is inclusive in the measure.
  bool include_lower_bound = 4;

  // Following are some examples of measures for clarification:
  // "Presence" denotes a measure where a certain quantity is existent. The `upper_bound` is set to INF, `lower_bound` is greater than 0 with `include_lower_bound` set based on context.
  // "Absence" denotes a measure where a certain quantity is non-existent. Both `upper_bound` and `lower_bound` are set to 0 with `include_lower_bound` and `include_upper_bound` set to true.
  // "Indeterminate" indicates a measure that can range from 0 to some value greater than 0.
  // "Exact Value" signifies a measure where a certain quantity is a precise value. Both `upper_bound` and `lower_bound` are set to this exact value with `include_lower_bound` and `include_upper_bound` set to true.
  // "Ranges" represent a measure that falls within a particular range. The `upper_bound` and `lower_bound` are set to the extremities of this range with `include_lower_bound` and `include_upper_bound` set based on context.

  // `semantic` describes the semantical sense of the measure, e.g., "Countable quantity".
  LogicalExpression semantic = 5;
  // `resolution` denotes the accuracy or precision of the measure, it is an optional field.
  float resolution = 6;
}

// Message representing a logical expression using a string.
message LogicalExpression {
  string expression = 1; // Direct representation of the logical expression
}

// Message representing a participant, who is typically a patient.
message Participant {
  string id = 1;  // Unique identifier for the participant
}

// Message representing timing information.
message Timing {
  int64 time = 1;  // Time represented as a Unix timestamp
  string description = 2;  // Label of the timing, such as "past", "present", or "future"
}

// Message representing a practitioner or an entity that authors.
message Practitioner {
  string id = 1;  // Unique identifier for the practitioner
  string practitioner = 2;  // Reference to the participating practitioner
  LogicalExpression code = 3;  // Authorized roles of the practitioner
}

// Message representing associated statements like preconditions or interpretations.
message AssociatedStatement {
  string description = 1;  // Contents or description of the associated statement
}

// Message representing the details of repetition for a RequestCircumstance.
message Repetition {
  Measure period_start = 1;  // The starting point of the repetition
  Measure period_duration = 2;  // Duration for the repetition period
  Measure event_separation = 3;  // Interval between events
  Measure event_duration = 4;  // The expected duration of each event, optional
  Measure event_frequency = 5;  // The frequency at which the events occur
}

// Message representing the circumstances associated with a clinical statement
message Circumstance {
  Measure timing = 1;  // Information about the timing, which is either past or current
  repeated LogicalExpression purpose = 2;  // Information about the purposes
}

// Message representing a RequestCircumstance.
message RequestCircumstance {
  repeated AssociatedStatement conditional_trigger = 1;  // Conditions that initiate the request
  repeated Reference requested_participant = 2;  // Participants included in the request
  LogicalExpression priority = 3;  // The level of priority for the request
  Measure requested_result = 4;  // Expected result from the request
  Repetition repetition = 5;  // Information about the repetition, optional
  Circumstance circumstance = 6; // The associated circumstances for a clinical statement
}

// Message representing a PerformanceCircumstance.
message PerformanceCircumstance {
  LogicalExpression status = 1;  // The current state of the performance
  Measure result = 2;  // The result from the performance
  LogicalExpression health_risk = 3;  // Level of health risk, optional
  Measure normal_range = 4;  // The typical range for the result, optional
  repeated Participant participant = 5;  // Participants involved in the performance
  Circumstance circumstance = 6; // The associated circumstances for a clinical statement
}

// Message representing a NarrativeCircumstance.
message NarrativeCircumstance {
  string text = 1;  // Narrative or textual description
  Circumstance circumstance = 2; // The associated circumstances for a clinical statement
}

// Message representing a reference to other entities like patient records or health practitioners.
message Reference {
  string id = 1;  // Unique identifier for the reference
  string type = 2;  // The type of the reference, for example, "Patient", "Practitioner"
}

// The ANFStatement message is the main representation of an ANFStatement. It defines the necessary fields required to represent it.
message ANFStatement {
  Identifier id = 1;  // Uniquely identifies the ANFStatement.

  // Denotes the timestamp of the statement, adhering to the rule: Timing - past, present, or future.
  // For the "Performance of Action", Timing could denote a past or current timestamp.
  // For the "Request of Action", Timing would always denote a future timestamp.
  Measure time = 2;

  Participant subject_of_record = 3;  // Identifies the subject of the record, which is typically the patient.
  repeated Practitioner author = 4;  // Identifies all authors behind this statement.
  LogicalExpression subject_of_information = 5;  // Refers to the subject or topic of the incorporated information.
  repeated AssociatedStatement associated_statement = 6;  // Refers to any related statements or conditions.

  // Denotes the topic of the statement, and includes rules for different types of observations, procedures and test:
  // - Simple observation statements use the "Observation" procedure to symbolize the topic.
  // - Medication administration statements use the "Administration of substance" concept.
  // - Laboratory test statements use the "Laboratory Procedure" concept.
  // - Imaging Procedure statements use the "Imaging Procedure" concept.
  LogicalExpression topic = 7;

  LogicalExpression type = 8;  // Specifies the type category of the statement such as "Request", "Performance", etc.

  // Circumstance choice: RequestCircumstance, PerformanceCircumstance, or NarrativeCircumstance, any one of which must be present.
  oneof circumstance_choice {
    RequestCircumstance request_circumstance = 9;
    PerformanceCircumstance performance_circumstance = 10;
    NarrativeCircumstance narrative_circumstance = 11;
  }
  // Timestamp when this ANFStatement was created.
  optional google.protobuf.Timestamp created = 12;
  // Timestamp when modifications were done to this ANFStatement.
  optional google.protobuf.Timestamp modified = 13;
  // Specifies the unique identifier of the creator of this ANFStatement.
  optional string creator = 14;
  // Specifies the unique identifier of the modifier of this ANFStatement.
  optional string modifier = 15;
  // Specifies the current status of the ANFStatement.
  Status status = 16;
}
