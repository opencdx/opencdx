syntax = "proto3";
option java_multiple_files = true;
package cdx.open_audit.v2alpha;

import "google/protobuf/timestamp.proto";

/**
 * Indicates the type of Audit event that is being recorded.
 */
enum AuditEventType {
  AUDIT_EVENT_TYPE_UNSPECIFIED = 0; // Unspecified audit event type
  AUDIT_EVENT_TYPE_USER_LOGIN_SUCCEEDED = 1; // User successfully logged in.
  AUDIT_EVENT_TYPE_USER_LOG_OUT = 2; // User logged out from system.
  AUDIT_EVENT_TYPE_USER_LOGIN_FAIL = 3; // User failed to login
  AUDIT_EVENT_TYPE_USER_ACCESS_CHANGE = 4; // User access changed
  AUDIT_EVENT_TYPE_USER_PASSWORD_CHANGE = 5; // User Password Change
  AUDIT_EVENT_TYPE_SYSTEM_LOGIN_SUCCEEDED = 6; // System successfully logged in.
  AUDIT_EVENT_TYPE_SYSTEM_LOG_OUT = 7; // System logged out.
  AUDIT_EVENT_TYPE_SYSTEM_LOGIN_FAIL = 8; // System failed to login.
  AUDIT_EVENT_TYPE_USER_PII_ACCESSED = 9; // Personal Identifiable Information accessed.
  AUDIT_EVENT_TYPE_USER_PII_UPDATED = 10; // Personal Identifiable Information updated.
  AUDIT_EVENT_TYPE_USER_PII_CREATED = 11; // Personal Identifiable Information created.
  AUDIT_EVENT_TYPE_USER_PII_DELETED = 12; // Personal Identifiable Information deleted.
  AUDIT_EVENT_TYPE_USER_PHI_ACCESSED = 13; // Personal Health Information accessed.
  AUDIT_EVENT_TYPE_USER_PHI_UPDATED = 14; // Personal Health Information updated.
  AUDIT_EVENT_TYPE_USER_PHI_CREATED = 15; // Personal Health Information created.
  AUDIT_EVENT_TYPE_USER_PHI_DELETED = 16; // Personal Health Information deleted.
  AUDIT_EVENT_TYPE_USER_COMMUNICATION = 17; // Configuration information changed.
  AUDIT_EVENT_TYPE_CONFIG_CHANGE = 18; // Configuration information changed.
}

/**
 * Indicates the sensitivity level of the data contained
 * in this audit message.
 */
enum SensitivityLevel {
  SENSITIVITY_LEVEL_UNSPECIFIED = 0; // Unspecified sensitivity level
  SENSITIVITY_LEVEL_LOW = 1; // Information is not sensitive.
  SENSITIVITY_LEVEL_MEDIUM = 2; // Information could be used to identify an individual.
  SENSITIVITY_LEVEL_HIGH = 3; // Personal information is contained.
}

/**
 * Indicates if the actor is a Human, System or another entity.
 */
enum AgentType {
  AGENT_TYPE_UNSPECIFIED = 0; // Unspecified agent type
  AGENT_TYPE_HUMAN_USER = 1; // The actor is a human.
  AGENT_TYPE_SYSTEM = 2; // The actor is a system.
  AGENT_TYPE_OTHER_ENTITY = 3; // The actor is a separate entity.
}

/**
 * Identifies the identity that initiated this audit.
 */
message Actor {
  string identity = 1; // UUID identifying the identity.
  string role = 2; // The role the actor had when initiated.
  string network_address = 3; // Network address from actor when initiated.
  AgentType agent_type = 4; // Indicates if the actor is a Human, System or another entity.
}

/**
 * Contains the relevant data for this audit.
 */
message DataObject {
  string resource = 1; //
  string data = 2; // Data block recorded for Audit System
  SensitivityLevel sensitivity = 3; // Indicates the sensitivity level of this data.
}

/**
 * Source of the Audit event.
 */
message AuditSource {
  string system_info = 1; // System Name
  string configuration = 2; // Relevant configuration information.
}

/**
 * Identifies whose information is being acted on.
 */
message AuditEntity {
  string patient_identifier = 1; // National Health Identifier
  string user_identifier = 2; // UUID for the patient's user ID
}

/**
 * Audit Event information to record.
 */
message AuditEvent {
  google.protobuf.Timestamp created = 1; // Timestamp when this event occurred.
  AuditEventType event_type = 2; // Identifies the type of event.
  Actor actor = 3; // Identifies who is causing the action
  DataObject data_object = 4; // Data that is being acted on.
  string purpose_of_use = 5; // Description of use of this data.
  AuditSource audit_source = 6; // Where did the event originate
  AuditEntity audit_entity = 7; // Identifies whose data is being acted on.
}

/**
 * Indicates the status of an operation
 */
message AuditStatus {
  bool success = 1;
}

/**
 * Service calls to the Audit Service
 */
service AuditService {
  rpc Event(AuditEvent) returns (AuditStatus); //Register an AuditEvent.
}

