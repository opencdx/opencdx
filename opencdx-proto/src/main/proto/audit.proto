syntax = "proto3";
option java_multiple_files = true;
package cdx.opencdx.grpc.audit;
import "google/protobuf/timestamp.proto";
/**
 * Describes the specific type of Audit event being recorded.
 */
enum AuditEventType {
  AUDIT_EVENT_TYPE_UNSPECIFIED = 0; /* Represents an unspecified audit event type. */
  AUDIT_EVENT_TYPE_USER_LOGIN_SUCCEEDED = 1; /* Represents a successful user login event. */
  AUDIT_EVENT_TYPE_USER_LOG_OUT = 2; /* Designates an event where a user logged out from the system. */
  AUDIT_EVENT_TYPE_USER_LOGIN_FAIL = 3; /* Depicts a failed user login attempt. */
  AUDIT_EVENT_TYPE_USER_ACCESS_CHANGE = 4; /* Signifies that there was a change in user access. */
  AUDIT_EVENT_TYPE_USER_PASSWORD_CHANGE = 5; /* Reflects an event where a user password was changed. */
  AUDIT_EVENT_TYPE_SYSTEM_LOGIN_SUCCEEDED = 6; /* Corresponds to a successful system login event. */
  AUDIT_EVENT_TYPE_SYSTEM_LOG_OUT = 7; /* Symbolizes a system logout event. */
  AUDIT_EVENT_TYPE_SYSTEM_LOGIN_FAIL = 8; /* Indicates a failed system login attempt. */
  AUDIT_EVENT_TYPE_USER_PII_ACCESSED = 9; /* Stands for an event where Personal Identifiable Information was accessed. */
  AUDIT_EVENT_TYPE_USER_PII_UPDATED = 10; /* Immplies an event where Personal Identifiable Information was updated. */
  AUDIT_EVENT_TYPE_USER_PII_CREATED = 11; /* Entails an event where Personal Identifiable Information was created. */
  AUDIT_EVENT_TYPE_USER_PII_DELETED = 12; /* Notes an event where Personal Identifiable Information was deleted. */
  AUDIT_EVENT_TYPE_USER_PHI_ACCESSED = 13; /* Represents an event where Personal Health Information was accessed. */
  AUDIT_EVENT_TYPE_USER_PHI_UPDATED = 14; /* Exemplifies an event where Personal Health Information was updated. */
  AUDIT_EVENT_TYPE_USER_PHI_CREATED = 15; /* Constitutes an event where Personal Health Information was created. */
  AUDIT_EVENT_TYPE_USER_PHI_DELETED = 16; /* Portrays an event where Personal Health Information was deleted. */
  AUDIT_EVENT_TYPE_USER_COMMUNICATION = 17; /* Shows a user communication event. */
  AUDIT_EVENT_TYPE_CONFIG_CHANGE = 18; /* Denotes a configuration change event. */
}
/**
 * Describes the level of sensitivity of the data contained within this audit message.
 */
enum SensitivityLevel {
  SENSITIVITY_LEVEL_UNSPECIFIED = 0; /* Represents an unspecified sensitivity level. */
  SENSITIVITY_LEVEL_LOW = 1; /* Implies that the information contained is not sensitive. */
  SENSITIVITY_LEVEL_MEDIUM = 2; /* Stipulates that the info could be used to identify an individual. */
  SENSITIVITY_LEVEL_HIGH = 3; /* Indicates that the message contains Personal information. */
}
/**
 * Defines the category of an actor: Human, System, or another entity.
 */
enum AgentType {
  AGENT_TYPE_UNSPECIFIED = 0; /* Symbolizes an unspecified agent type. */
  AGENT_TYPE_HUMAN_USER = 1; /* Demonstrates that the actor is a human. */
  AGENT_TYPE_SYSTEM = 2; /* The actor is a system. */
  AGENT_TYPE_OTHER_ENTITY = 3; /* The actor is a separate entity. */
}
/**
 * Identifies the identity that initiated this audit.
 */
message Actor {
  string identity = 1; /* UUID identifying the identity. */
  string role = 2; /* The role the actor had when initiated. */
  string network_address = 3; /* Network address from actor when initiated. */
  AgentType agent_type = 4; /* Indicates if the actor is a Human, System or another entity. */
}
/**
 * Contains the relevant data for this audit.
 */
message DataObject {
  string resource = 1; /*  */
  string data = 2; /* Data block recorded for Audit System */
  SensitivityLevel sensitivity = 3; /* Indicates the sensitivity level of this data. */
}
/**
 * Source of the Audit event.
 */
message AuditSource {
  string system_info = 1; /* System Name */
  string configuration = 2; /* Relevant configuration information. */
}
/**
 * Identifies whose information is being acted on.
 */
message AuditEntity {
  string patient_identifier = 1; /* National Health Identifier */
  string user_identifier = 2; /* UUID for the patient's user ID */
}
/**
 * Audit Event information to record.
 */
message AuditEvent {
  optional google.protobuf.Timestamp created = 1; /* Timestamp when this event occurred. */
  AuditEventType event_type = 2; /* Identifies the type of event. */
  Actor actor = 3; /* Identifies who is causing the action */
  DataObject data_object = 4; /* Data that is being acted on. */
  string purpose_of_use = 5; /* Description of use of this data. */
  AuditSource audit_source = 6; /* Where did the event originate */
  AuditEntity audit_entity = 7; /* Identifies whose data is being acted on. */
  optional google.protobuf.Timestamp modified = 8; /* Timestamp when this event was modified. */
  optional string creator = 9; /* ID of the creator of this event. */
  optional string modifier = 10; /* ID of the modifier of this event. */
}
/**
 * Indicates the status of an operation
 */
message AuditStatus {
  bool success = 1; /* Indicates whether the operation was successful or not. */
}
/**
 * This service engages in communication with the Audit Service
 * to record AuditEvent entities that are essential for retaining certain information.
 */
service AuditService {
  /* This operation enables the registration of an AuditEvent. */
  rpc Event(AuditEvent) returns (AuditStatus);
}

