syntax = "proto3";
option java_multiple_files = true;
package cdx.opencdx.grpc.questionnaire;

import "google/protobuf/any.proto";
import "anf_connector.proto";

/**
 * Represents a FHIR questionnaire collection.
 */
message Questionnaires {
  repeated Questionnaire questionnaires = 1;  // Questionnaire Resouce List 
}


/**
 * Represents a FHIR questionnaire.
 */
message Questionnaire {
  optional string id = 1;  // Resouce Id 
  optional string resource_type = 2; // Resource type identifier.
  optional string title = 3; // Title of the questionnaire.
  optional string status = 4; // Status of the questionnaire (e.g., draft).
  optional string description = 5; // Description of the questionnaire.
  repeated QuestionnaireItem item = 6; // List of questionnaire items.

  // Field for storing user submission information
  optional string submission_date = 7; // Date the questionnaire was submitted on  
  optional string submisison_user_id=8; // Data submitted by
  optional string rule_id=9; // Id of the rule that was executed for the submission
}

/**
 * Represents a question or group of questions within a questionnaire.
 */
message QuestionnaireItem {
  optional string type = 1; // Type of the questionnaire item (e.g., integer, boolean, choice).
  optional string link_id = 2; // Unique identifier for the item.
  optional string text = 3; // Text content of the item.
  optional bool required = 4; // Indicates if the item is required.
  optional bool repeats = 5; // Indicates if the item can be repeated.
  optional bool read_only = 6; // Indicates if the item is read-only.
  repeated QuestionnaireItem item = 7; // Nested questionnaire items.
  repeated QuestionnaireItemExtension extension = 8; // Extensions for the item.
  repeated QuestionnaireItemAnswerOption answer_option = 9; // Answer options for choice-type items.
  repeated QuestionnaireItemInitial initial = 10; // Initial values for the item.

  // Field for storing user responses
  optional google.protobuf.Any submission_user_response = 11; // User-provided response to the item

  repeated cdx.opencdx.grpc.anf.AnfStatementConnector anf_statement_connector = 12; // ANF statement connector
}

/**
 * Represents an extension for a questionnaire item.
 */
message QuestionnaireItemExtension {
  optional string url = 1; // URL for the extension.
  ValueCodeableConcept value_codeable_concept = 2; // Value for codeable concept extensions.
}

/**
 * Represents a codeable concept value.
 */
message ValueCodeableConcept {
  optional string text = 1; // Text content for codeable concept values.
  repeated Coding coding = 2; // Coded values for codeable concepts.
}

/**
 * Represents a coding value.
 */
message Coding {
  optional string system = 1; // Code system for the coded value.
  optional string code = 2; // Code for the coded value.
  optional string display = 3; // Display text for the coded value.
}

/**
 * Represents an answer option for a questionnaire item.
 */
message QuestionnaireItemAnswerOption {
  ValueCoding value_coding = 1; // Coding value for answer options.
  optional bool initial_selected = 2; // Indicates if the option is initially selected.
}

/**
 * Represents a coding value.
 */
message ValueCoding {
  optional string display = 1; // Display text for the coding value.
}

/**
 * Represents initial values for a questionnaire item.
 */
message QuestionnaireItemInitial {
  ValueBoolean value_boolean = 1; // Initial boolean value for the item.
}

/**
 * Represents a boolean value.
 */
message ValueBoolean {
  optional bool value_boolean = 1; // Boolean value.
}

/*
 * Represents the message with specified fields.
 */
message QuestionnaireData {
  optional string id = 1; // Unique identifier for the message.
  optional string name = 2; // Questionnaire name.
  optional string status = 3; // Current status of the message.
  optional string state = 4; // State of the questionnaire (active or inactive).
  optional string question_json_id = 5; // JSON to be displayed to the end user.
  optional string question_anf_json = 6; // JSON field for ANF statements.
  optional string rules_engine_config = 7; // Associated Rules engine configuration.
}

/* 
 * Represents the message with specified fields at system level
 */
message SystemQuestionnaireData {
  repeated QuestionnaireData questionnaire_data = 1; // Questionnaire data.
}

/* 
 * Represents the message with specified fields, with associated Organization and Workspace
 */
message ClientQuestionnaireData {
  repeated QuestionnaireData questionnaire_data = 1; // Questionnaire data.
  optional string orgnization_id = 2; // Organization Id associated with the Questionnaire data.
  optional string workspace_id = 3; // Workspace Id associated with the Questionnaire data.
  optional string rule_id=4; // Id of the rule to be executed on Rules Engine upon submission
}

/* 
 * Represents the message with specified fields, with associated Organization, Workspace, and User
 */
message UserQuestionnaireData {
  repeated QuestionnaireData questionnaire_data = 1; // Questionnaire data.
  optional string user_id = 2; // User identifier.
}

/**
 * Represents a ruleset for the rule engine.
 */
 message RuleSet {
  optional string rule_id = 1;  // Unique identifier for the rule.
  optional string type = 2;     // Type of the rule (e.g., business rule).
  optional string category = 3; // Category of the rule.
  optional string description = 4;  // Description of the rule.
}

/**
 * Represents the request to retrieve rules at the client level.
 */
message ClientRulesRequest {
  optional string orgnization_id = 1; // Organization Id associated with the Questionnaire data.
  optional string workspace_id = 2; // Workspace Id associated with the Questionnaire data.
}

/**
 * Represents the response for the GetRuleSets operation.
 */
 message RuleSetsResponse {
  repeated RuleSet rule_sets = 1;  // List of rulesets available.
}

/**
 * Service for handling FHIR questionnaires.
 */
service QuestionnaireService {
  rpc GetRuleSets(ClientRulesRequest) returns (RuleSetsResponse);    // Operation to get rulesets for specific client
  
  rpc SubmitQuestionnaire(QuestionnaireRequest) returns (SubmissionResponse); // Submits a questionnaire and returns the submission status.
  rpc GetSubmittedQuestionnaire(GetQuestionnaireRequest) returns (Questionnaire); // Get submitted questionnaire data by id.
  rpc GetSubmittedQuestionnaireList(GetQuestionnaireRequest) returns (Questionnaires); // Get all submitted questionnaire data.
  rpc DeleteSubmittedQuestionnaire(DeleteQuestionnaireRequest) returns (SubmissionResponse); // Delete submitted questionnaire data by id.

  rpc CreateQuestionnaireData(QuestionnaireDataRequest) returns (SubmissionResponse); // Creates the questionnaire entity to be displayed at system level.
  rpc UpdateQuestionnaireData(QuestionnaireDataRequest) returns (SubmissionResponse); // Updates the questionnaire entity displayed at system level.
  rpc GetQuestionnaireData(GetQuestionnaireRequest) returns (SystemQuestionnaireData); // Get system questionnaire data by Id.
  rpc GetQuestionnaireDataList(GetQuestionnaireRequest) returns (SystemQuestionnaireData); // Get all system questionnaire data.
  rpc DeleteQuestionnaireData(DeleteQuestionnaireRequest) returns (SubmissionResponse); // Delete submitted questionnaire data by id.

  rpc CreateClientQuestionnaireData(ClientQuestionnaireDataRequest) returns (SubmissionResponse); // Creates the questionnaire entity to be displayed at client level.
  rpc UpdateClientQuestionnaireData(ClientQuestionnaireDataRequest) returns (SubmissionResponse); // Updates the questionnaire entity displayed at client level.
  rpc GetClientQuestionnaireData(GetQuestionnaireRequest) returns (ClientQuestionnaireData); // Get client questionnaire data by Id.
  rpc GetClientQuestionnaireDataList(GetQuestionnaireRequest) returns (ClientQuestionnaireData); // Get all client questionnaire data.
  rpc DeleteClientQuestionnaireData(DeleteQuestionnaireRequest) returns (SubmissionResponse); // Get client questionnaire data by Id.

  rpc CreateUserQuestionnaireData(UserQuestionnaireDataRequest) returns (SubmissionResponse); // Creates the questionnaire entity to be displayed at User level.
  rpc UpdateUserQuestionnaireData(UserQuestionnaireDataRequest) returns (SubmissionResponse); // Updates the questionnaire entity displayed at User level.
  rpc GetUserQuestionnaireData(GetQuestionnaireRequest) returns (UserQuestionnaireData); // Get user questionnaire by Id.
  rpc GetUserQuestionnaireDataList(GetQuestionnaireRequest) returns (UserQuestionnaireData); // Get all user questionnaire.
  rpc DeleteUserQuestionnaireData(DeleteQuestionnaireRequest) returns (SubmissionResponse); // Delete user questionnaire data by id.
}

/*
 * Represents the request to retrieve data 
 */
 message DeleteQuestionnaireRequest {
  optional string id=1; // Questionnaire resource Id
  optional string orgnization_id=2; // Organization associated with the questionnaire
  optional string workspace_id=3; // Workspace associated with the questionnaire
  optional string user_id=4; // User associated with the questionnaire
} 

/*
 * Represents the request to retrieve data 
 */
message GetQuestionnaireRequest {
  optional string id=1; // Questionnaire resource Id
  optional string orgnization_id=2; // Organization associated with the questionnaire
  optional string workspace_id=3; // Workspace associated with the questionnaire
  optional string user_id=4; // User associated with the questionnaire
} 


/*
 * Represents the status of a questionnaire operation.
 */
message SubmissionResponse {
  bool success = 1; // Indicates whether the operation was successful or not.
  string message = 2; // Additional message providing details about the operation status.
}

/* 
 * Represents a request to submit a FHIR questionnaire.
 */
message QuestionnaireRequest {
  Questionnaire questionnaire = 1; // The questionnaire to be submitted.
}

message QuestionnaireDataRequest {
  QuestionnaireData questionnaire_data = 1; // Questionnaire data.
}

message ClientQuestionnaireDataRequest {
  ClientQuestionnaireData client_questionnaire_data = 1; // Client-level FHIR questionnaire data.
}

message UserQuestionnaireDataRequest {
  UserQuestionnaireData user_questionnaire_data = 1; // User-level FHIR questionnaire data.
}
