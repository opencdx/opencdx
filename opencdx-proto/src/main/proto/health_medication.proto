/*
 * This Protocol Buffers (protobuf) definition is primarily focused on the management of medication.
 */
syntax = "proto3";
option java_multiple_files = true;
package cdx.opencdx.grpc.health.medication;
import "common.proto";
import "google/protobuf/timestamp.proto";

/*
 * Indicates how a medication is to be administered to a patient.
 */
enum MedicationAdministrationRoute {
  /*
   * Unspecified medication type.
   */
  UNSPECIFIED_MEDICATION_TYPE = 0;
  /*
   * Medication administered orally, usually in the form of pills or liquid.
   */
  ORAL = 1;
  /*
   * Medication administered directly into a vein.
   */
  INTRAVENOUS = 2;
  /*
   * Medication administered into a muscle.
   */
  INTRAMUSCULAR = 3;
  /*
   * Medication administered into the fatty tissue beneath the skin.
   */
  SUBCUTANEOUS = 4;
  /*
   * Medication applied onto the skin surface.
   */
  TOPICAL = 5;
  /*
   * Medication administered via the rectum.
   */
  RECTAL = 6;
  /*
   * Medication inhaled into the lungs.
   */
  INHALATION = 7;
  /*
   * Medication administered through the skin.
   */
  TRANSDERMAL = 8;
  /*
   * Medication administered through the nose.
   */
  NASAL = 9;
  /*
   * Medication administered into the eye.
   */
  OPHTHALMIC = 10;
  /*
   * Medication administered into the ear.
   */
  OTIC = 11;
  /*
   * Medication administered between the cheek and gum.
   */
  BUCCAL = 12;
  /*
   * Medication administered under the tongue.
   */
  SUBLINGUAL = 13;
  /*
   * Medication administered into the skin.
   */
  INTRADERMAL = 14;
  /*
   * Medication administered into a joint.
   */
  INTRAARTICULAR = 15;
  /*
   * Medication administered directly into a lesion or injury.
   */
  INTRALESIONAL = 16;
  /*
   * Medication administered directly into the heart.
   */
  INTRACARDIAC = 17;
  /*
   * Medication administered into the eye.
   */
  INTRAOCULAR = 18;
  /*
   * Medication administered into the spinal canal.
   */
  INTRATHECAL = 19;
  /*
   * Medication administered into the bladder.
   */
  INTRAVESICAL = 20;
  /*
   * Medication administered using iontophoresis technique.
   */
  IONTOPHORESIS = 21;
  /*
   * Medication administered into the eye.
   */
  INTRAVITREAL = 22;
  /*
   * Other routes of medication administration not listed here.
   */
  OTHER_ROUTE = 23;
}


/*
  * Indicates how often a medication is to be taken.
 */
enum MedicationFrequency {
  /*
   * Unspecified frequency.
   */
  UNSPECIFIED_FREQUENCY = 0;
  /*
   * Once a day.
   */
  ONCE_DAILY = 1;
  /*
   * Twice a day.
   */
  TWICE_DAILY = 2;
  /*
   * Three times a day.
   */
  THREE_TIMES_DAILY = 3;
  /*
   * Four times a day.
   */
  FOUR_TIMES_DAILY = 4;
  /*
   * Every 6 hours.
   */
  EVERY_SIX_HOURS = 5;
  /*
   * Every 8 hours.
   */
  EVERY_EIGHT_HOURS = 6;
  /*
   * Every 12 hours.
   */
  EVERY_TWELVE_HOURS = 7;
  /*
   * Every other day.
   */
  EVERY_OTHER_DAY = 8;
  /*
   * Once a week.
   */
  ONCE_WEEKLY = 9;
  /*
   * Every two weeks.
   */
  EVERY_TWO_WEEKS = 10;
  /*
   * As needed.
   */
  AS_NEEDED = 11;
  /*
   * PRN (pro re nata) - as needed.
   */
  PRN = 12;
  /*
   * Continuous infusion.
   */
  CONTINUOUS_INFUSION = 13;
  /*
   * Once a month.
   */
  ONCE_MONTHLY = 14;
  /*
   * Once every 3 months.
   */
  ONCE_EVERY_THREE_MONTHS = 15;
  /*
   * Once every 6 months.
   */
  ONCE_EVERY_SIX_MONTHS = 16;
  /*
   * Once a year.
   */
  ONCE_YEARLY = 17;
  /*
   * Other frequency not listed here.
   */
  OTHER_FREQUENCY = 18;
}

/*
 * Enumerates different dosage forms of medication.
 */
enum DosageForm {
  /*
   * Unspecified dosage form.
   */
  DOSAGE_FORM_UNSPECIFIED = 0;
  /*
   * Tablet dosage form.
   */
  TABLET = 1;
  /*
   * Capsule dosage form.
   */
  CAPSULE = 2;
  /*
   * Liquid dosage form.
   */
  LIQUID = 3;
  /*
   * Injection dosage form.
   */
  INJECTION = 4;
  /*
   * Cream dosage form.
   */
  CREAM = 5;
  /*
   * Ointment dosage form.
   */
  OINTMENT = 6;
  /*
   * Inhaler dosage form.
   */
  INHALER = 7;
  /*
   * Patch dosage form.
   */
  PATCH = 8;
  /*
   * Drops dosage form.
   */
  DROPS = 9;
  /*
   * Spray dosage form.
   */
  SPRAY = 10;
  /*
   * Suppository dosage form.
   */
  SUPPOSITORY = 11;
  /*
   * Powder dosage form.
   */
  POWDER = 12;
  /*
   * Solution dosage form.
   */
  SOLUTION = 13;
  /*
   * Gel dosage form.
   */
  GEL = 14;
  /*
   * Lozenge dosage form.
   */
  LOZENGE = 15;
  /*
   * Suspension dosage form.
   */
  SUSPENSION = 16;
  /*
   * Chewable tablet dosage form.
   */
  CHEWABLE_TABLET = 17;
  /*
   * Sublingual tablet dosage form.
   */
  SUBLINGUAL_TABLET = 18;
  /*
   * Effervescent tablet dosage form.
   */
  EFFERVESCENT_TABLET = 19;
  /*
   * Other dosage forms not listed here.
   */
  OTHER_DOSAGE_FORM = 20;
}


/*
 * Represents information about a medication including its name,
 * dosage, instructions, route of administration, frequency, start and end dates,
 * prescribing doctor, pharmacy, and a boolean flag for prescription.
 */
message Medication {
  /*
   * The unique identifier for the medication
   */
  optional string id = 1;

  /*
   * The unique identifier for the patient
   */
  string patient_id = 2;

  /*
   * The unique identifier for the patient's national health id
   */
  string national_health_id = 3;
  /*
   * The name of the medication
   */
  string medication_name = 4;
  /*
   * Details about the medication dosage strength
   */
  string dosage_strength = 5;
  /*
   * The unit of measurement for the medication dosage
   */
  string dosage_unit = 6;

  /*
   * The dosage form of the medication
   */
  DosageForm dosage_form = 7;

  /*
 * The quantity of medication prescribed or administered.
 */
  double quantity = 8;

  /*
   * Instructions for how to take the medication
   */
  string instructions = 9;
  /*
   * The way the medication is to be administered (e.g., orally, intravenously, etc.)
   */
  MedicationAdministrationRoute route_of_administration = 10;

  /*
   * A string to represent other route of administration not listed in the MedicationAdministrationRoute enum
   */
  optional string other_route_of_administration = 11;
  /*
   * How often the medication is to be taken
   */
  MedicationFrequency frequency = 12;
  /*
   * A string to represent other frequency not listed in the MedicationFrequency enum
   */
  string other_frequency = 13;
  /*
   * The date when the medication was first taken
   */
  google.protobuf.Timestamp start_date = 14;
  /*
   * The date when the medication stopped being taken
   */
  optional google.protobuf.Timestamp end_date = 15;
  /*
   * The provider id of the doctor who prescribed the medication
   */
  string provider_number = 16;
  /*
   * The pharmacy id where the medication was obtained
   */
  optional string pharmacy_id = 17;
  /*
   * A flag indicating whether the medication requires a prescription
   */
  bool is_prescription = 18;

  /*
   * A flag indicating whether the medication is generic
   */
  bool is_generic = 19;

  /*
 * The timestamp indicating when the user's profile was created.
 */
  optional google.protobuf.Timestamp created = 20;

  /*
   * The timestamp indicating the last modification of the user's profile.
   */
  optional google.protobuf.Timestamp modified = 21;

  /*
   * The identifier of the entity that created the user's profile.
   */
  optional string creator = 22;

  /*
   * The identifier of the entity that last modified the user's profile.
   */
  optional string modifier = 23;
  /*
   * A string to represent other dosage form not listed in the DosageForm enum
   */
  optional string other_dosage_form = 24;

  /*
   * The National Drug Code (NDC) for the medication
   */
  optional string product_ndc= 25;
}

/*
 * Service for tracking medication prescriptions and administration.
 */
service MedicationService {
  /*
   * Prescribes a new medication for a patient.
   */
  rpc Prescribing(Medication) returns (Medication);

  /*
   * Ends a medication for a patient.
   */
  rpc Ending(EndMedicationRequest) returns (Medication);

  /*
   * Lists all medications for a given patient ID.
   */
  rpc ListAllMedications(ListMedicationsRequest) returns (ListMedicationsResponse);

  /*
   * Lists current medications for a given patient ID.
   */
  rpc ListCurrentMedications(ListMedicationsRequest) returns (ListMedicationsResponse);

  /*
   * Search medications by brand name, responses will include generics.
   */
  rpc SearchMedications(SearchMedicationsRequest) returns (ListMedicationsResponse);
}

message SearchMedicationsRequest {
  /*
   * The brand name of the medication to search for.
   */
  string brand_name = 1;
  /*
   * Pagination information.
   */
  cdx.opencdx.grpc.common.Pagination pagination = 2;
}

/*
 * Request message for ending a medication.
 */
message EndMedicationRequest {
  /*
   * The unique identifier for the medication to be ended.
   */
  string medication_id = 1;

  /*
   * The date when the medication stopped being taken
   */
  google.protobuf.Timestamp end_date = 2;
}

/*
 * Request message for listing medications by patient ID.
 */
message ListMedicationsRequest {

  oneof search {
    /*
   * The unique identifier for the patient.
   */
    string patient_id = 1;
    /*
   * The unique identifier for the patient's national health ID.
   */
    string national_health_id = 2;
  }
  /*
 * Pagination information.
 */
  cdx.opencdx.grpc.common.Pagination pagination = 3;
}

/*
 * Response message for listing medications.
 */
message ListMedicationsResponse {
  /*
   * List of medications.
   */
  repeated Medication medications = 1;

  /*
   * Pagination information.
   */
  cdx.opencdx.grpc.common.Pagination pagination = 2;
}

service MedicationAdministrationService {
  /*
   * Tracks when medication is given to a patient.
   */
  rpc TrackMedicationAdministration(MedicationAdministration) returns (MedicationAdministration);

  /*
   * Retrieve medication information by ID.
   */
  rpc GetMedicationById(GetMedicationByIdRequest) returns (Medication);

  /*
   * Retrieve medication information by patient ID within a date range.
   */
  rpc GetMedicationsByPatientId(GetMedicationsByPatientIdRequest) returns (ListMedicationsResponse);

  /*
   * Retrieve medication information by national health ID within a date range.
   */
  rpc GetMedicationsByNationalHealthId(GetMedicationsByNationalHealthIdRequest) returns (ListMedicationsResponse);
}

/*
 * Request message for tracking medication administration to a patient.
 */
message MedicationAdministration {
  /*
   * The unique identifier for the medication administration.
   */
  optional string id = 1;
  /*
   * The unique identifier for the medication being administered.
   */
  string medication_id = 2;
  /*
   * The unique identifier for the patient.
   */
  string patient_id = 3;
  /*
   * The unique identifier for the patient's national health ID.
   */
  string national_health_id = 4;
  /*
   * The date and time when the medication was administered.
   */
  google.protobuf.Timestamp administration_time = 5;

  /*
   * The unique identifier for the user who administered the medication.
   */
  string administrated_by = 6;
  /*
   * Additional notes or details about the medication administration.
   */
  string administration_notes = 7;
  /*
 * The timestamp indicating when the user's profile was created.
 */
  optional google.protobuf.Timestamp created = 8;

  /*
   * The timestamp indicating the last modification of the user's profile.
   */
  optional google.protobuf.Timestamp modified = 9;

  /*
   * The identifier of the entity that created the user's profile.
   */
  optional string creator = 10;

  /*
   * The identifier of the entity that last modified the user's profile.
   */
  optional string modifier = 11;
}

/*
 * Request message for retrieving medication information by ID.
 */
message GetMedicationByIdRequest {
  /*
   * The unique identifier for the medication to retrieve.
   */
  string medication_id = 1;
  /*
 * Pagination information.
 */
  cdx.opencdx.grpc.common.Pagination pagination = 2;
}

/*
 * Request message for retrieving medication information by patient ID within a date range.
 */
message GetMedicationsByPatientIdRequest {
  /*
   * The unique identifier for the patient.
   */
  string patient_id = 1;
  /*
   * Start date of the date range.
   */
  google.protobuf.Timestamp start_date = 2;
  /*
   * End date of the date range.
   */
  google.protobuf.Timestamp end_date = 3;
  /*
 * Pagination information.
 */
  cdx.opencdx.grpc.common.Pagination pagination = 4;
}

/*
 * Request message for retrieving medication information by national health ID within a date range.
 */
message GetMedicationsByNationalHealthIdRequest {
  /*
   * The unique identifier for the patient's national health ID.
   */
  string national_health_id = 1;
  /*
   * Start date of the date range.
   */
  google.protobuf.Timestamp start_date = 2;
  /*
   * End date of the date range.
   */
  google.protobuf.Timestamp end_date = 3;
  /*
 * Pagination information.
 */
  cdx.opencdx.grpc.common.Pagination pagination = 4;
}
