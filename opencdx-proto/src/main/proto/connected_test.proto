syntax = "proto3";
option java_multiple_files = true;
package cdx.open_connected_test.v2alpha;

import "google/protobuf/timestamp.proto";


// Define lab test types
enum LabTestType {
  LAB_TEST_TYPE_UNSPECIFIED = 0; // Unspecified Lab Test Type
  LAB_TEST_TYPE_BLOOD_TEST = 1; // Blood Lab Test
  LAB_TEST_TYPE_URINE_TEST = 2; // Urine Lab Test
}

// Define specimen types
enum SpecimenType {
  SPECIMEN_TYPE_UNSPECIFIED = 0; // Unspecified Lab Test Type
  SPECIMEN_TYPE_BLOOD = 1; // Specimen is a blood sample.
  SPECIMEN_TYPE_URINE = 2; // Specimen is a urine sample.
  SPECIMEN_TYPE_SALIVA = 3; // Specimen is a saliva sample.
}

// Basic Information about the Test
message BasicInfo {
  optional string id = 1;                  // Unique identifier for the test
  google.protobuf.Timestamp created = 2;              // Creation timestamp of the test record
  string creator = 3;              // User or entity that created the test
  google.protobuf.Timestamp modified = 4;             // Timestamp when the test was last modified
  string modifier = 5;             // User or entity that last modified the test
  string vendorLabTestId = 6;      // ID referencing the test within the vendor's system
  string type = 7;               // Class or type of the test
  string userId = 8;               // ID of the user associated with the test
  int32 nationalHealthId = 9;     // National health ID of the user
  string healthServiceId = 10;     // ID of the health service provider
  string tenantId = 11;            // ID of the tenant (in multi-tenant systems)
  string source = 12;              // Source or origin of the test data
}

// Information related to ordering
message OrderInfo {
  string orderId = 1;               // Unique identifier for the test order
  string status = 2;                // Current status of the test order
  string statusMessage = 3;         // Descriptive message about the order status
  repeated StatusMessageAction statusMessageActions = 4;  // Actions associated with the status
  string encounterId = 5;           // ID of the clinical encounter associated with the test
  bool isSyncedWithEHR = 6;         // Indicator if the test has been synced with an EHR system
  string result = 7;                // Test result data
  string questionnaireId = 8;       // ID of the associated questionnaire, if any
}

// Notes regarding the test
message TestNotes {
  string notes = 1;                 // General notes about the test
  string medicationNotes = 2;       // Notes about medication related to the test
  string referralNotes = 3;         // Notes about referrals related to the test
  string diagnosticNotes = 4;       // Diagnostic notes or observations
}

// Payment details
message PaymentDetails {
  string paymentMode = 1;           // Mode of payment used
  string insuranceInfoId = 2;       // Reference ID for insurance information
  string paymentTransactionId = 3;  // ID of the payment transaction
  string paymentDetails = 4;        // Additional details about the payment
}

// Information about providers
message ProviderInfo {
  string orderingProviderId = 1;    // ID of the provider who ordered the test
  int32 assignedProviderID = 2;     // ID of the provider assigned to oversee the test
  int32 orderingProviderNPI = 3;    // National Provider Identifier of the ordering provider
}

// Details about the test itself and results
message TestDetails {
  Metadata metadata = 1;            // Metadata associated with the test
  string requisitionBase64 = 2;     // Base64 encoded requisition data
  string internalTestId = 3;        // Internal reference ID for the test
  string medications = 4;           // Information on medications related to the test
  string referrals = 5;             // Referral details
  string diagnostics = 6;           // Diagnostic details
  repeated string orderableTestIds = 7;  // List of IDs for orderable tests
  repeated OrderableTest orderableTests = 8; // Orderable test details
  repeated OrderableTestResult orderableTestResults = 9;  // Results for orderable tests
  string testClassification = 10;       // Classification or type of the test
  bool isOnsiteTest = 11;               // Indicator if the test is conducted on-site
  string specimenId = 12;               // ID of the specimen collected
  string labVendorConfirmationId = 13;  // Confirmation ID from the lab vendor
  int32 deviceIdentifier = 14;          // Identifier of the device used for the test
  string deviceSerialNumber = 15;       // Serial number of the device
  bool isAutoGenerated = 16;            // Indicator if the test record was auto-generated
  string reportingFlag = 17;            // Flag indicating reporting status
  string notificationFlag = 18;         // Flag indicating notification status
  string orderStatusFlag = 19;          // Flag indicating order status
  string orderReceiptPath = 20;         // Path to the order receipt
  string labTestType = 21;       // Type of the lab test
  string specimanType = 22;      // Type of specimen used for the test
  string medicalCode = 23;       // Medical code associated with the test
}

// Metadata related to a specific test.
message Metadata {
  string qrData = 1;                          // QR Code data associated with the test kit.
  string kitUploadID = 2;                     // ID associated with the kit's data upload event.
  string responseMessage = 3;                 // Detailed message related to the response or result.
  string responseTitle = 4;                   // Title or header of the response.
  int32 responseCode = 5;                     // Numeric code representing the response type.
  string imageType = 6;                       // Type or format of any associated image (e.g., "jpg", "png").
  string type = 7;                            // Type or category of the test.
  string manufacturer = 8;                    // Manufacturer or producer of the test kit.
  string casseteLotNumber = 9;                // Lot number associated with the cassette of the test kit.
  bool outcomeIgM = 10;                       // Boolean outcome for IgM antibody.
  bool outcomeIgG = 11;                       // Boolean outcome for IgG antibody.
  string outcome = 12;                        // Overall outcome or result of the test.
  bool selfAssessmentOutcomeIgM = 13;         // Self-assessed outcome for IgM antibody.
  bool selfAssessmentOutcomeIgG = 14;         // Self-assessed outcome for IgG antibody.
  string selfAssessmentOutcome = 15;          // Overall self-assessed outcome or result.
  string casseteExpirationDate = 16;          // Expiration date of the test cassette.
  string labTestOrderableId = 17;             // ID associated with the orderable lab test.
  string skuId = 18;                          // Stock Keeping Unit (SKU) ID for the test kit.
  string cassetteVerification = 19;           // Verification status or details of the cassette.
}

// Describes actions or recommendations based on a status.
message StatusMessageAction {
  string id = 1;                              // Unique identifier for the action.
  string Value = 2;                           // Actual value or action to be taken.
  string Description = 3;                     // Detailed description of the action or recommendation.
}

// Represents a specific test that can be ordered.
message OrderableTest {
  string orderableTestId = 1;                 // Unique identifier for the orderable test.
  //TestFormat testFormat = 2;                  // The format or method of the test.
}

// Detailed result information for an orderable test.
message OrderableTestResult {
  string orderableTestId = 1;                 // Refers to the specific test being described.
  string collectionDate = 2;                  // Date when the sample or specimen was collected.
  string testResult = 3;                      // Actual result or value from the test.
  string outcome = 4;                         // Interpretation or high-level outcome of the test.
  string responseMessage = 5;                 // Detailed message related to the test's response or result.
  string responseTitle = 6;                   // Title or header of the response.
  int32 responseCode = 7;                     // Numeric code representing the response type.
}

// Metadata related to the physical test kit used.
message TestKitMetadata {
  string orderableTestId = 1;                 // ID associated with the orderable test.
  int32 deviceIdentifier = 2;                 // Device identifier or code for the test kit.
  string batchLotNumber = 3;                  // Lot or batch number of the test kit.
  string serialNumber = 4;                    // Serial number of the test kit.
  string manufacturingDate = 5;               // Date when the test kit was manufactured.
  string expirationDate = 6;                  // Expiration date for the test kit.
  string barcodeDataFormat = 7;               // Data format of the kit's barcode.
  string scanDate = 8;                        // Timestamp when the kit's barcode was scanned.
}

// Request for a Connected Test
message TestIdRequest {
  string test_id = 1; // ID of a connected Test.
}

// Response for submitting a ConnectedTest
message TestSubmissionResponse {
  string submission_id = 1; // ID of the Connected Test
}

message ConnectedTest {
  BasicInfo basicInfo = 1;       // Basic information block
  OrderInfo orderInfo = 2;       // Ordering related block
  TestNotes testNotes = 3;       // Notes related block
  PaymentDetails paymentDetails = 4; // Payment details block
  ProviderInfo providerInfo = 5;     // Provider details block
  TestDetails testDetails = 6;       // Test and result details block
}

/**
Request Message to list NotificationConnectedTests
 */
message ConnectedTestListRequest{
  int32 page_size = 1; // Size of each page.
  int32 page_number = 2; // The page being requested.
  bool sort_ascending = 3; // indicating if the results should ascending.
  string  userId = 4; // UUID of user
}
/**
Response containing the requested list of connected tests for a specific user
 */
message ConnectedTestListResponse {
  int32 page_size = 1; // Size of each page.
  int32 page_number = 2; // The page being requested.
  bool sort_ascending = 3; // indicating if the results should ascending.
  int32 page_count = 4; // Total number of available pages.
  repeated ConnectedTest connected_tests = 5;
}

service HealthcareService {
  // RPC method to submit a new test
  rpc SubmitTest(ConnectedTest) returns (TestSubmissionResponse);

  // RPC method to get test details by ID
  rpc GetTestDetailsById(TestIdRequest) returns (ConnectedTest);

  // Retrieve a list of connected tests by userid
  rpc ListConnectedTests(ConnectedTestListRequest) returns (ConnectedTestListResponse);
}
