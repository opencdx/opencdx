syntax = "proto3";
option java_multiple_files = true;
package cdx.opencdx.grpc.provider;
/* Importing the timestamp proto package */
import "google/protobuf/timestamp.proto";
import "common.proto";

/* Enum `ProviderStatus` is used to represent the current status of a healthcare provider account.
It contains two states, VALIDATED and DELETED. */
enum ProviderStatus {
  VALIDATED = 0;  /* The status when the provider's credentials and details have been reviewed and approved. */
  DELETED = 1;    /* The status when the provider's account has been deleted, possibly due to violation of terms or at the request of the provider. */
}
/* `BasicInfo` message holds essential details about a healthcare provider. */
message BasicInfo {
  string first_name = 1;          /* The first name of the provider. */
  string last_name = 2;           /* The last name of the provider. */
  string credential = 3;          /* The credentials of the provider, for example, "M.D.". */
  string sole_proprietor = 4;     /* Designation indicating whether the provider is operating as a sole proprietor. Typical values are "YES" / "NO". */
  string gender = 5;              /* Provider's gender. */
  string enumeration_date = 6;    /* The date the provider was added/enumerated in the system. */
  ProviderStatus status = 7;      /* The current status of the provider. */
  string name_prefix = 8;         /* Any prefix for the provider's name, typically designations like "Dr.". */
  string name_suffix = 9;         /* Any suffix for the provider's name, if applicable. */
}
/* The `Taxonomy` message represents the categorization of the healthcare provider based on their specialty/s. */
message Taxonomy {
  string code = 1;                /* Taxonomy code representing a specific medical specialty. */
  string taxonomy_group = 2;      /* Group or category to which the taxonomy belongs. */
  string desc = 3;                /* Description of the taxonomy. */
  string state = 4;               /* State where the provider holds this taxonomy designation. */
  string license = 5;             /* License number associated with this taxonomy code for the provider. */
  bool primary = 6;               /* Indicator to denote whether this taxonomy code is the provider's primary specialty. */
}
/* `Identifier` message represents the unique identifiers associated with a healthcare provider. */
message Identifier {
  string code = 1;                /* Unique identifier code. */
  string desc = 2;                /* Description of the identifier, for example, could denote the type of identifier like "MEDICAID". */
  string issuer = 3;              /* Information on the entity that issued the identifier. */
  string identifier = 4;          /* The identifier value itself. */
  string state = 5;               /* State associated with this identifier. */
}
/* `ListProvidersResponse` message is used to represent the response when retrieving a list of providers. */
message ListProvidersResponse {
  int32 result_count = 1;         /* The total number of providers information returned in the response. */
  repeated Provider results = 2;  /* The list of provider's details. */
}
/* "Provider" message captures all relevant details of a healthcare provider including "id", "user_id" among other fields.
Several fields (e.g., addresses, taxonomies, identifiers) can comprise multiple values hence "repeated" is used. */
message Provider {
  string id = 1;                               /* Unique identifier for the provider. */
  string user_id = 2;                          /* Associated User ID of the healthcare provider. */
  string created_epoch = 3;                    /* Timestamp (in epoch time) of the provider's creation. */
  string enumeration_type = 4;                 /* Enumeration type to categorize providers. */
  string last_updated_epoch = 5;               /* Latest timestamp (in epoch time) when the provider was updated. */
  string number = 6;                           /* Official registration number of the provider. */
  repeated cdx.opencdx.grpc.common.Address addresses = 7;    /* Collection of the healthcare provider's addresses. */
  repeated string practiceLocations = 8;       /* Correction of various practice locations associated with the provider. */
  BasicInfo basic = 9;                         /* General information about the provider (name, speciality, etc.). */
  repeated Taxonomy taxonomies = 10;           /* Different taxonomy codes associated with the healthcare provider. */
  repeated Identifier identifiers = 11;        /* Collection of unique identifiers linked to the provider. */
  repeated string endpoints = 12;              /* Various touchpoints (email, phone number) related to the provider. */
  repeated string other_names = 13;            /* Any aliases or other names registered under the healthcare provider. */
  google.protobuf.Timestamp created = 14;      /* Protobuf timestamp representing the initial creation of this record. */
  google.protobuf.Timestamp modified = 15;     /* Protobuf timestamp when the provider record was last updated. */
  string creator = 16;                         /* Creator's ID who created provider event. */
  string modifier = 17;                        /* Modifier's ID who last updated provider event. */
}

/*
GetProviderRequest and GetProviderResponse message pair is used for fetching a provider's information.
*/
message GetProviderRequest {
  string user_id = 1;                /* User ID (or Provider Number) as the unique lookup key. */
}

/*
GetProviderResponse returns the information fetched for a healthcare provider.
*/
message GetProviderResponse {
  Provider provider = 1;            /* Object containing all information of the healthcare provider requested for. */
}

/*
EditProviderRequest and EditProviderResponse message pair is used for modifying a provider's details.
*/
message EditProviderRequest {
  Provider provider = 1;            /* Current state of the provider object that needs to be updated. */
}

/*
EditProviderResponse is empty as it is only used to acknowledge successful receipt of editing request.
*/
message EditProviderResponse {}

/*
DeleteProviderRequest enables deletion of a provider using the provider_id as the unique key.
*/
message DeleteProviderRequest {
  string provider_id = 1;           /* Uniquely identifies the healthcare provider to be deleted. */
}

/*
LoadProviderRequest and LoadProviderResponse pair is used to load a specific provider's information based on user_id and provider_number.
*/
message LoadProviderRequest{
  string user_id = 1;               /* User ID of the healthcare provider. */
  string provider_number = 2;       /* Provider number used to fetch the details of a healthcare provider. */
}

/*
LoadProviderResponse returns the details of a healthcare provider based on the LoadProviderRequest message.
*/
message LoadProviderResponse{
  Provider provider = 1;            /* Object containing all details of the loaded healthcare provider. */
}

/*
DeleteProviderResponse is empty and is used to acknowledge the successful deletion of a provider.
*/
message DeleteProviderResponse {}

/*
ListProvidersRequest is used to fetch a list of all healthcare providers.
*/
message ListProvidersRequest {}

/*
Service definitions in ProviderService to Get, Delete, List and Load healthcare providers.
*/
service ProviderService {
  rpc GetProviderByNumber(GetProviderRequest) returns (GetProviderResponse);     /* RPC to retrieve a provider by their number. */
  rpc DeleteProvider(DeleteProviderRequest) returns (DeleteProviderResponse);    /* RPC to remove a provider. */
  rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse);       /* RPC to retrieve a list of all providers. */
  rpc LoadProvider(LoadProviderRequest) returns (LoadProviderResponse);          /* RPC to load a specific healthcare provider. */
}
