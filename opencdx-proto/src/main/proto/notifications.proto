/**
 * Outlines the communications for short notification messages stored in the database and marked as read/unread.
 */

syntax = "proto3";
option java_multiple_files = true;
package cdx.opencdx.grpc.communication.notifications;
import "google/protobuf/timestamp.proto";
import "common.proto";


/**
 * The type of notification.
 */
enum NotificationType {
    UNSPECIFIED_NOTIFICATION_TYPE = 0;
    /**
     * Informational notification.
     */
    INFO = 1;
    /**
     * Warning notification.
     */
    WARNING = 2;
    /**
     * Error notification.
     */
    ERROR = 3;
}

/**
 * The status of the notification.
 */
enum NotificationStatus {
    /**
     * The status of the notification is unspecified.
     */
    UNSPECIFIED_NOTIFICATION_STATUS = 0;
    /**
     * The notification has been read.
     */
    READ = 1;
    /**
     * The notification has not been read.
     */
    UNREAD = 2;
}

/**
 * A notification message.
 */
message Notification {
    /**
     * The unique identifier for the notification.
     */
    optional string id = 1;
    /**
     * The unique identifier for the patient.
     */
    string patient_id = 2;
    /**
     * The title of the notification.
     */
    string title = 3;
    /**
     * The message of the notification.
     */
    string message = 4;
    /**
     * The type of the notification.
     */
    NotificationType type = 5;
    /**
     * The status of the notification.
     */
    NotificationStatus status = 6;
    /**
     * The time the notification was created.
     */
    optional google.protobuf.Timestamp created = 7;
    /**
     * The time the notification was last modified.
     */
    optional google.protobuf.Timestamp modified = 8;
    /**
     * The user who created the notification.
     */
    optional string creator = 9;
    /**
     * The user who last modified the notification.
     */
    optional string modifier = 10;
}

/**
 * The request to get notifications.
 */
message GetNotificationsRequest {
    /**
     * The unique identifier for the patient.
     */
    string patient_id = 1;
    /**
     * The pagination information.
     */
    cdx.opencdx.grpc.common.Pagination pagination = 2;
}
/**
 * The response to get notifications.
 */
message GetNotificationsResponse {
    /**
     * The notifications.
     */
    repeated Notification notifications = 1;
    /**
     * The pagination information.
     */
    cdx.opencdx.grpc.common.Pagination pagination = 2;
}
/**
 * The request to mark a notification as read.
 */
message MarkNotificationAsReadRequest {
    /**
     * The unique identifier for the notification.
     */
    repeated string id = 1;
}
/**
 * The response to mark a notification as read.
 */
message MarkNotificationAsReadResponse {
    /**
     * The notification.
     */
    repeated Notification notification = 1;
}

/**
 * The request to mark a notification as unread.
 */
message MarkNotificationAsUnreadRequest {
    /**
     * The unique identifier for the notification.
     */
    repeated string id = 1;
}
/**
 * The response to mark a notification as unread.
 */
message MarkNotificationAsUnreadResponse {
    /**
     * The notification.
     */
    repeated Notification notification = 1;
}
/**
 * The request to create a notification.
 */
message CreateNotificationRequest {
    /**
     * The unique identifier for the patient.
     */
    string patient_id = 1;
    /**
     * The title of the notification.
     */
    string title = 2;
    /**
     * The message of the notification.
     */
    string message = 3;
    /**
     * The type of the notification.
     */
    NotificationType type = 4;
}
/**
 * The response to create a notification.
 */
message CreateNotificationResponse {
    /**
     * The notification.
     */
    Notification notification = 1;
}
/**
 * The request to delete a notification.
 */
message DeleteNotificationRequest {
    /**
     * The unique identifier for the notification.
     */
    string id = 1;
}
/**
 * The response to delete a notification.
 */
message DeleteNotificationResponse {
    /**
     * The notification.
     */
    Notification notification = 1;
}
/**
 * The notification service.
 */
service NotificationService {
    /**
     * Get notifications.
     */
    rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse);
    /**
     * Mark a notification as read.
     */
    rpc MarkNotificationAsRead(MarkNotificationAsReadRequest) returns (MarkNotificationAsReadResponse);
    /**
     * Mark a notification as unread.
     */
    rpc MarkNotificationAsUnread(MarkNotificationAsUnreadRequest) returns (MarkNotificationAsUnreadResponse);
    /**
     * Create a notification.
     */
    rpc CreateNotification(CreateNotificationRequest) returns (CreateNotificationResponse);
    /**
     * Delete a notification.
     */
    rpc DeleteNotification(DeleteNotificationRequest) returns (DeleteNotificationResponse);
}

