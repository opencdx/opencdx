/*
 * This proto file contains the data structures used throughout the OpenCDx Project.
 */
syntax = "proto3";
option java_multiple_files = true;
package cdx.opencdx.grpc.data;
import "opencdx_enum.proto";
import "google/protobuf/timestamp.proto";




/*
 * ENUMS for OpenCDx
 */

/*
 * Enum representing the various states a Questionnaire can be in.
 */
enum QuestionnaireStatus {
  /*
   * The questionnaire is still being drafted.
   */
  draft = 0;

  /*
   * The questionnaire is currently in use.
   */
  active = 1;

  /*
   * The questionnaire is retired and no longer in use.
   */
  retired = 2;

  /*
   * The status of the questionnaire is not known.
   */
  unknown = 3;
}


/*
 * MediaPreprocessorCommands is an enumeration that represents the list of commands used by the MediaPreprocessorService.
 */
enum MediaPreprocessorCommands {
  /*
   * MEDIA_PREPROCESSOR_COMMANDS_UNSPECIFIED is used when the specific command is not specified or is unknown.
   */
  MEDIA_PREPROCESSOR_COMMANDS_UNSPECIFIED = 0;
  /*
   * MEDIA_PREPROCESSOR_COMMANDS_PREPROCESS is used when the command to preprocess media is triggered.
   */
  MEDIA_PREPROCESSOR_COMMANDS_PREPROCESS = 1;
}

/*
 * MediaPreprocessorStatus is an enumeration defining the statuses of media preprocessor.
 */
enum MediaPreprocessorStatus {
  /*
   * MEDIA_PREPROCESSOR_STATUS_UNSPECIFIED is used when the status of the media preprocessor is not specified or unknown.
   */
  MEDIA_PREPROCESSOR_STATUS_UNSPECIFIED = 0;
  /*
   * MEDIA_PREPROCESSOR_STATUS_PREPROCESSING is used when media is in the process of being preprocessed.
   */
  MEDIA_PREPROCESSOR_STATUS_PREPROCESSING = 1;
  /*
   * MEDIA_PREPROCESSOR_STATUS_ACTIVE indicates that the preprocessor is actively working.
   */
  MEDIA_PREPROCESSOR_STATUS_ACTIVE = 2;
  /*
   * MEDIA_PREPROCESSOR_STATUS_ERROR is used when an error has occurred in the preprocessing task.
   */
  MEDIA_PREPROCESSOR_STATUS_ERROR = 3;
}

/*
 * MediaPreprocessorEvents is an enumeration representing the possible events during media preprocessing.
 */
enum MediaPreprocessorEvents {
  /*
   * MEDIA_PREPROCESSOR_EVENTS_UNSPECIFIED is used when the specific event is not specified or unknown.
   */
  MEDIA_PREPROCESSOR_EVENTS_UNSPECIFIED = 0;
  /*
   * MEDIA_PREPROCESSOR_EVENTS_PREPROCESSED is used when the media has been successfully preprocessed.
   */
  MEDIA_PREPROCESSOR_EVENTS_PREPROCESSED = 1;
}


/*
* Defines the types of media.
* This type may be used in different media services' methods.
*/
enum MediaType {
  MEDIA_TYPE_UNSPECIFIED = 0; /*
                               * Unspecified or not yet determined media type.
                               */

  MEDIA_TYPE_IMAGE = 1; /*
                         * Indicates that the media is an image type.
                         */

  MEDIA_TYPE_VIDEO = 2; /*
                         * Indicates that the media is a video type.
                         */

  MEDIA_TYPE_ARCHIVE = 3; /*
                           * Indicates that the media is archived.
                           */

  MEDIA_TYPE_INTEGRATION = 4; /*
                               * Indicates that the media is a type of integration.
                               */

  MEDIA_TYPE_BYTE_ARRAY = 5; /*
                              * Indicates that the media a byte array or data stream.
                              */
}

/*
 * Defines possible states that media can have.
 */
enum MediaStatus {
  MEDIA_STATUS_UNSPECIFIED = 0; /*
                                 * Media status is unspecified or not yet determined.
                                 */

  MEDIA_STATUS_UPLOADING = 1; /*
                               * Media is in the process of uploading.
                               */

  MEDIA_STATUS_ACTIVE = 2; /*
                           * Media is currently active and available.
                           */

  MEDIA_STATUS_DELETED = 3; /*
                             * Media has been deleted from the records.
                             */

  MEDIA_STATUS_ERROR = 4; /*
                           * An error occurred with the media.
                           */
}


/*
 * Enum defining possible user types in IAM.
 */
enum IamUserType {
  /*
   * Default or unspecified IAM user type.
   */
  IAM_USER_TYPE_UNSPECIFIED = 0;
  /*
   * Regular IAM user type.
   */
  IAM_USER_TYPE_REGULAR = 1;
  /*
   * System IAM user type.
   */
  IAM_USER_TYPE_SYSTEM = 2;
  /*
   * Trial IAM user type.
   */
  IAM_USER_TYPE_TRIAL = 3;
}

/*
 * Enum defining possible statuses of IAM users.
 */
enum IamUserStatus {
  /*
   * Default or unspecified IAM user status.
   */
  IAM_USER_STATUS_UNSPECIFIED = 0;
  /*
   * Active IAM user status.
   */
  IAM_USER_STATUS_ACTIVE = 1;
  /*
   * Inactive IAM user status.
   */
  IAM_USER_STATUS_INACTIVE = 2;
  /*
   * Deleted IAM user status.
   */
  IAM_USER_STATUS_DELETED = 3;
}


/*
 * BPM units
 */
enum BPMUnits {
  MILLIMETERS_OF_MERCURY = 0;
  KILOPASCALS = 1;
  CENTIMETERS_OF_MERCURY = 2;
  ATMOSPHERES = 3;
  POUNDS_PER_SQUARE_INCH = 4;
  BARS = 5;
}

// Enum for cuff size options
enum CuffSize {
  CUFF_SIZE_UNSPECIFIED = 0;
  SMALL = 1;
  MEDIUM = 2;
  LARGE = 3;
}

// Enum for arm used options
enum ArmUsed {
  ARM_USED_UNSPECIFIED = 0;
  LEFT_ARM = 1;
  RIGHT_ARM = 2;
}

/*
 * Defines the units of measure.
 */
enum HeightUnits {
  /*
   * Unspecified Units for Height
   */
  HEIGHT_UNITS_UNSPECIFIED = 0;
  /*
   * Height in centimeters
   */
  CM = 1;
  /*
   * Height in inches
   */
  INCHES = 2;
}

/*
 * Defines the units of measure.
 */
enum WeightUnits {
  /*
   * Unspecified Weight Units
   */
  WEIGHT_UNITS_UNSPECIFIED = 0;
  /*
   * Weight in kilograms.
   */
  KGS = 1;
  /*
   * Weight in pounds.
   */
  LBS = 2;
}


/*
 * Indicates how a medication is to be administered to a patient.
 */
enum MedicationAdministrationRoute {
  /*
   * Unspecified medication type.
   */
  UNSPECIFIED_MEDICATION_TYPE = 0;
  /*
   * Medication administered orally, usually in the form of pills or liquid.
   */
  ORAL = 1;
  /*
   * Medication administered directly into a vein.
   */
  INTRAVENOUS = 2;
  /*
   * Medication administered into a muscle.
   */
  INTRAMUSCULAR = 3;
  /*
   * Medication administered into the fatty tissue beneath the skin.
   */
  SUBCUTANEOUS = 4;
  /*
   * Medication applied onto the skin surface.
   */
  TOPICAL = 5;
  /*
   * Medication administered via the rectum.
   */
  RECTAL = 6;
  /*
   * Medication inhaled into the lungs.
   */
  INHALATION = 7;
  /*
   * Medication administered through the skin.
   */
  TRANSDERMAL = 8;
  /*
   * Medication administered through the nose.
   */
  NASAL = 9;
  /*
   * Medication administered into the eye.
   */
  OPHTHALMIC = 10;
  /*
   * Medication administered into the ear.
   */
  OTIC = 11;
  /*
   * Medication administered between the cheek and gum.
   */
  BUCCAL = 12;
  /*
   * Medication administered under the tongue.
   */
  SUBLINGUAL = 13;
  /*
   * Medication administered into the skin.
   */
  INTRADERMAL = 14;
  /*
   * Medication administered into a joint.
   */
  INTRAARTICULAR = 15;
  /*
   * Medication administered directly into a lesion or injury.
   */
  INTRALESIONAL = 16;
  /*
   * Medication administered directly into the heart.
   */
  INTRACARDIAC = 17;
  /*
   * Medication administered into the eye.
   */
  INTRAOCULAR = 18;
  /*
   * Medication administered into the spinal canal.
   */
  INTRATHECAL = 19;
  /*
   * Medication administered into the bladder.
   */
  INTRAVESICAL = 20;
  /*
   * Medication administered using iontophoresis technique.
   */
  IONTOPHORESIS = 21;
  /*
   * Medication administered into the eye.
   */
  INTRAVITREAL = 22;
  /*
   * Other routes of medication administration not listed here.
   */
  OTHER_ROUTE = 23;
}


/*
  * Indicates how often a medication is to be taken.
 */
enum MedicationFrequency {
  /*
   * Unspecified frequency.
   */
  UNSPECIFIED_FREQUENCY = 0;
  /*
   * Once a day.
   */
  ONCE_DAILY = 1;
  /*
   * Twice a day.
   */
  TWICE_DAILY = 2;
  /*
   * Three times a day.
   */
  THREE_TIMES_DAILY = 3;
  /*
   * Four times a day.
   */
  FOUR_TIMES_DAILY = 4;
  /*
   * Every 6 hours.
   */
  EVERY_SIX_HOURS = 5;
  /*
   * Every 8 hours.
   */
  EVERY_EIGHT_HOURS = 6;
  /*
   * Every 12 hours.
   */
  EVERY_TWELVE_HOURS = 7;
  /*
   * Every other day.
   */
  EVERY_OTHER_DAY = 8;
  /*
   * Once a week.
   */
  ONCE_WEEKLY = 9;
  /*
   * Every two weeks.
   */
  EVERY_TWO_WEEKS = 10;
  /*
   * As needed.
   */
  AS_NEEDED = 11;
  /*
   * PRN (pro re nata) - as needed.
   */
  PRN = 12;
  /*
   * Continuous infusion.
   */
  CONTINUOUS_INFUSION = 13;
  /*
   * Once a month.
   */
  ONCE_MONTHLY = 14;
  /*
   * Once every 3 months.
   */
  ONCE_EVERY_THREE_MONTHS = 15;
  /*
   * Once every 6 months.
   */
  ONCE_EVERY_SIX_MONTHS = 16;
  /*
   * Once a year.
   */
  ONCE_YEARLY = 17;
  /*
   * Other frequency not listed here.
   */
  OTHER_FREQUENCY = 18;
}

/*
 * Enumerates different dosage forms of medication.
 */
enum DosageForm {
  /*
   * Unspecified dosage form.
   */
  DOSAGE_FORM_UNSPECIFIED = 0;
  /*
   * Tablet dosage form.
   */
  TABLET = 1;
  /*
   * Capsule dosage form.
   */
  CAPSULE = 2;
  /*
   * Liquid dosage form.
   */
  LIQUID = 3;
  /*
   * Injection dosage form.
   */
  INJECTION = 4;
  /*
   * Cream dosage form.
   */
  CREAM = 5;
  /*
   * Ointment dosage form.
   */
  OINTMENT = 6;
  /*
   * Inhaler dosage form.
   */
  INHALER = 7;
  /*
   * Patch dosage form.
   */
  PATCH = 8;
  /*
   * Drops dosage form.
   */
  DROPS = 9;
  /*
   * Spray dosage form.
   */
  SPRAY = 10;
  /*
   * Suppository dosage form.
   */
  SUPPOSITORY = 11;
  /*
   * Powder dosage form.
   */
  POWDER = 12;
  /*
   * Solution dosage form.
   */
  SOLUTION = 13;
  /*
   * Gel dosage form.
   */
  GEL = 14;
  /*
   * Lozenge dosage form.
   */
  LOZENGE = 15;
  /*
   * Suspension dosage form.
   */
  SUSPENSION = 16;
  /*
   * Chewable tablet dosage form.
   */
  CHEWABLE_TABLET = 17;
  /*
   * Sublingual tablet dosage form.
   */
  SUBLINGUAL_TABLET = 18;
  /*
   * Effervescent tablet dosage form.
   */
  EFFERVESCENT_TABLET = 19;
  /*
   * Other dosage forms not listed here.
   */
  OTHER_DOSAGE_FORM = 20;
}


/*
 * Enum for defining the format types of various tests.
 */
enum TestFormat {
  /*
   * Represents an unspecified test format.
   */
  TEST_FORMAT_UNSPECIFIED = 0;
  /*
   * Represents a blood test format.
   */
  TEST_FORMAT_BLOOD = 1;
  /*
   * Represents a urine test format.
   */
  TEST_FORMAT_URINE = 2;
  /*
   * Represents a saliva test format.
   */
  TEST_FORMAT_SALIVA = 3;
  /*
   * Represents a COVID-19 test format.
   */
  TEST_FORMAT_COVID_19 = 4;
}

/*
 * Enum for categorising types of tests.
 */
enum TestClassification {
  /*
   * Represents unspecified test classification.
   */
  TEST_CLASSIFICATION_UNSPECIFIED = 0;
  /*
   * Represents a general test.
   */
  TEST_CLASSIFICATION_GENERAL = 1;
  /*
   * Represents a diagnostic test.
   */
  TEST_CLASSIFICATION_DIAGNOSTIC = 2;
  /*
   * Represents a screening test.
   */
  TEST_CLASSIFICATION_SCREENING = 3;
  /*
   * Represents a monitoring test.
   */
  TEST_CLASSIFICATION_MONITORING = 4;
  /*
   * Represents a COVID-19 related test.
   */
  TEST_CLASSIFICATION_COVID_19 = 5;
}

/*
 * Enum for specifying the types of lab tests.
 */
enum LabTestType {
  /*
   * Represents an unspecified Lab Test Type.
   */
  LAB_TEST_TYPE_UNSPECIFIED = 0;
  /*
   * Represents a Blood Lab Test.
   */
  LAB_TEST_TYPE_BLOOD_TEST = 1;
  /*
   * Represents a Urine Lab Test.
   */
  LAB_TEST_TYPE_URINE_TEST = 2;
}

/*
 * Enum for specifying the types of specimens collected for tests.
 */
enum SpecimenType {
  /*
   * Represents an unspecified Lab Test Type.
   */
  SPECIMEN_TYPE_UNSPECIFIED = 0;
  /*
   * Represents a blood specimen type.
   */
  SPECIMEN_TYPE_BLOOD = 1;
  /*
   * Represents a urine specimen type.
   */
  SPECIMEN_TYPE_URINE = 2;
  /*
   * Represents a saliva specimen type.
   */
  SPECIMEN_TYPE_SALIVA = 3;
}

/**
 * The status of a LabFinding.
 */
enum LabFindingStatus {
  /**
   * The status of the LabFinding is unspecified.
   */
  LAB_FINDINGS_STATUS_UNSPECIFIED = 0;
  /**
   * The LabFinding has been received by the lab.
   */
  LAB_FINDINGS_STATUS_RECEIVED = 1;
}
/*
 * TemplateType is an enumeration that lists all the possible types a template can be set as.
 * Values in the enum range from notification, welcome messages, newsletters, alerts, reminders, to confirmations.
 * When the type of a template is not set, the default is TEMPLATE_TYPE_UNSPECIFIED.
 */
enum TemplateType {
  /*
   * No specific type is assigned to the template.
   */
  TEMPLATE_TYPE_UNSPECIFIED = 0;
  /*
   * The template is designated for notifications.
   */
  TEMPLATE_TYPE_NOTIFICATION = 1;
  /*
   * The template is designated for welcome messages.
   */
  TEMPLATE_TYPE_WELCOME = 2;
  /*
   * The template is designated for newsletters.
   */
  TEMPLATE_TYPE_NEWSLETTER = 3;
  /*
   * The template is designated for alerts.
   */
  TEMPLATE_TYPE_ALERT = 4;
  /*
   * The template is designated for reminders.
   */
  TEMPLATE_TYPE_REMINDER = 5;
  /*
   * The template is designated for confirmations.
   */
  TEMPLATE_TYPE_CONFIRMATION = 6;
}
/*
 * NotificationStatus is an enumeration that defines the different statuses a notification can be in.
 * Values in the enum range from being pending, sent, to failed.
 * When the status of a notification is not set, the default is NOTIFICATION_STATUS_UNSPECIFIED.
 */
enum NotificationStatus {
  /*
   * The status of the notification is not defined.
   */
  NOTIFICATION_STATUS_UNSPECIFIED = 0;
  /*
   * The notification is yet to be sent.
   */
  NOTIFICATION_STATUS_PENDING = 1;
  /*
   * The notification has been sent.
   */
  NOTIFICATION_STATUS_SENT = 2;
  /*
   * The notification failed to send.
   */
  NOTIFICATION_STATUS_FAILED = 3;
}
/*
 * NotificationPriority defines the levels of priority for notifications.
 * Values in the enum range from low, medium, high, to immediate priority.
 * When the priority of a notification is not set, the default is NOTIFICATION_PRIORITY_UNSPECIFIED.
 */
enum NotificationPriority {
  /*
   * The priority level for the notification is undefined.
   */
  NOTIFICATION_PRIORITY_UNSPECIFIED = 0;
  /*
   * The priority level for the notification is low.
   */
  NOTIFICATION_PRIORITY_LOW = 1;
  /*
   * The priority level for the notification is medium.
   */
  NOTIFICATION_PRIORITY_MEDIUM = 2;
  /*
   * The priority level for the notification is high.
   */
  NOTIFICATION_PRIORITY_HIGH = 3;
  /*
   * The notification requires immediate attention.
   */
  NOTIFICATION_PRIORITY_IMMEDIATE = 4;
}

/**
 * The type of Message.
 */
enum MessageType {
  UNSPECIFIED_MESSAGE_TYPE = 0;
  /**
   * Informational Message.
   */
  INFO = 1;
  /**
   * Warning Message.
   */
  WARNING = 2;
  /**
   * Error Message.
   */
  ERROR = 3;
}

/**
 * The status of the Message.
 */
enum MessageStatus {
  /**
   * The status of the Message is unspecified.
   */
  UNSPECIFIED_MESSAGE_STATUS = 0;
  /**
   * The Message has been read.
   */
  READ = 1;
  /**
   * The Message has not been read.
   */
  UNREAD = 2;
}

/*
 * `AnfStatementType` represents the various ways that an ANF Statement can be connected to a question item.
 */
enum AnfStatementType {
  /*
   * `ANF_STATEMENT_TYPE_UNSPECIFIED` indicates that the ANF statement type is not specified.
   */
  ANF_STATEMENT_TYPE_UNSPECIFIED = 0;

  /*
   * `ANF_STATEMENT_TYPE_MAIN` signifies that it is a primary ANF statement.
   */
  ANF_STATEMENT_TYPE_MAIN = 1;

  /*
   * `ANF_STATEMENT_TYPE_ASSOCIATED` denotes that the ANF statement is associated with
   * but not primary to the item in question.
   */
  ANF_STATEMENT_TYPE_ASSOCIATED = 2;

  /*
   * `ANF_STATEMENT_USER_QUESTION` implies that the ANF statement is the main
   * statement pertaining to the question.
   */
  ANF_STATEMENT_USER_QUESTION = 3;

  /*
   * `ANF_STATEMENT_TYPE_NOT_APPLICABLE` implies that the ANF statement does not apply.
   */
  ANF_STATEMENT_TYPE_NOT_APPLICABLE = 4;
}

/*
 * Enumeration for ANF statement operator types.
 */
enum AnfOperatorType {
  /*
   * No specific operator is defined
   */
  ANF_OPERATOR_TYPE_UNSPECIFIED = 0;

  /*
   * Represents an equal (=) operator
   */
  ANF_OPERATOR_TYPE_EQUAL = 1;

  /*
   * Symbolizes a not equal (!=) operator
   */
  ANF_OPERATOR_TYPE_NOT_EQUAL = 2;

  /*
   * Denotes a greater-than (>) operator
   */
  ANF_OPERATOR_TYPE_GREATER_THAN = 3;

  /*
   * Indicates a greater-than or equals (>=) operator
   */
  ANF_OPERATOR_TYPE_GREATER_THAN_OR_EQUAL = 4;

  /*
   * Represents a less-than (<) operator
   */
  ANF_OPERATOR_TYPE_LESS_THAN = 5;

  /*
   * Symbolizes a less-than or equals (<=) operator
   */
  ANF_OPERATOR_TYPE_LESS_THAN_OR_EQUAL = 6;

  /*
   * Denotes a contains operator
   */
  ANF_OPERATOR_TYPE_CONTAINS = 7;

  /*
   * Indicates a "does not contain" operator
   */
  ANF_OPERATOR_TYPE_NOT_CONTAINS = 8;

  /*
   * Stands for an "in" operator
   */
  ANF_OPERATOR_TYPE_IN = 9;

  /*
   * Represents a "not in" operator
   */
  ANF_OPERATOR_TYPE_NOT_IN = 10;
}


/*
 * AddressPurpose identifies the intended use of an address.
 */
enum AddressPurpose {
  /*
   * Represents an address used for geographical location.
   */
  LOCATION = 0;

  /*
   * Represents an address used for mail correspondence.
   */
  MAILING = 1;

  /*
   * Represents the main or primary address.
   */
  PRIMARY = 2;

  /*
   * Represents an additional or secondary address.
   */
  SECONDARY = 3;

  /*
   * Represents an address used for invoice or billing correspondence.
   */
  BILLING = 4;

  /*
   * Represents an address used for shipping or delivery.
   */
  SHIPPING = 5;

  /*
   * Represents an address used for work or business location.
   */
  WORK = 6;
}

/*
 * PhoneType defines the classification of phone numbers.
 */
enum PhoneType {
  /*
   * Unclassified or undefined phone number type.
   */
  PHONE_TYPE_NOT_SPECIFIED = 0;

  /*
   * Mobile cell phone.
   */
  PHONE_TYPE_MOBILE = 1;

  /*
   * Residential home phone.
   */
  PHONE_TYPE_HOME = 2;

  /*
   * Work or business phone.
   */
  PHONE_TYPE_WORK = 3;

  /*
   * Fax machine.
   */
  PHONE_TYPE_FAX = 4;

  /*
   * Other or miscellaneous phone type.
   */
  PHONE_TYPE_OTHER = 5;
}

/*
 * EmailType distinguishes the category of email addresses.
 */
enum EmailType {
  /*
   * Unspecified email type.
   */
  EMAIL_TYPE_NOT_SPECIFIED = 0;

  /*
   * Personal and private email type.
   */
  EMAIL_TYPE_PERSONAL = 1;

  /*
   * Work or professional email type.
   */
  EMAIL_TYPE_WORK = 2;

  /*
   * Other or miscellaneous email type.
   */
  EMAIL_TYPE_OTHER = 3;
}

/*
 * Gender defines a range of identities that do not necessarily align
 * with established ideas of male and female.
 */
enum Gender {
  /*
   * Unidentified or undefined gender.
   */
  GENDER_NOT_SPECIFIED = 0;

  /*
   * Male gender.
   */
  GENDER_MALE = 1;

  /*
   * Female gender.
   */
  GENDER_FEMALE = 2;

  /*
   * Non-binary, neither male nor female.
   */
  GENDER_NON_BINARY = 3;

  /*
   * Other, undefined genders
   */
  GENDER_OTHER = 4;
}
/*
 * DurationType defines the units for periods of time.
 */
enum DurationType {
  /*
   * Unspecified unit of time.
   */
  DURATION_TYPE_NOT_SPECIFIED = 0;

  /*
   * Represents time in milliseconds.
   */
  DURATION_TYPE_MILLISECONDS = 1;

  /*
   * Represents time in seconds.
   */
  DURATION_TYPE_SECONDS = 2;

  /*
   * Represents time in minutes.
   */
  DURATION_TYPE_MINUTES = 3;

  /*
   * Represents time in hours.
   */
  DURATION_TYPE_HOURS = 4;

  /*
   * Represents time in days.
   */
  DURATION_TYPE_DAYS = 5;

  /*
   * Represents time in weeks.
   */
  DURATION_TYPE_WEEKS = 6;

  /*
   * Represents time in months.
   */
  DURATION_TYPE_MONTHS = 7;

  /*
   * Represents time in years.
   */
  DURATION_TYPE_YEARS = 8;
}


enum ShippingStatus {
  /*
   * The delivery is currently being transported from the source to the destination.
   */
  IN_TRANSIT = 0;

  /*
   * The delivery has been successfully made at the destination.
   */
  DELIVERED = 1;

  /*
   * The planned delivery was called off.
   */
  CANCELED = 2;

  /*
   * The delivery is yet to be picked up from the source.
   */
  PENDING_PICKUP = 3;

  /*
   * The delivery is in its final phase of reaching the destination.
   */
  OUT_FOR_DELIVERY = 4;

  /*
   * The delivery couldn't reach the destination due to some reason.
   */
  FAILED_DELIVERY = 5;

  /*
   * The delivery was made but it was returned back from the destination.
   */
  RETURNED = 6;

  /*
   * The delivery is running behind the scheduled time.
   */
  DELAYED = 7;

  /*
   * The delivery is currently kept on a temporary pause.
   */
  ON_HOLD = 8;

  /*
   * There is some exceptional case or issue associated with the delivery.
   */
  EXCEPTION = 9;

  /*
   * The delivery couldn't be traced or located.
   */
  LOST = 10;

  /**
   * The delivery is in the process of being shipped.
   */
  PENDING = 11;
}

/*
 * Enum to encapsulate the possible Media statuses.
 */
enum Status {
  /*
   * Unspecified or unknown media status.
   */
  STATUS_UNSPECIFIED = 0;

  /*
   * Media status is active.
   */
  STATUS_ACTIVE = 1;

  /*
   * Media status designates that the media is being deleted.
   */
  STATUS_DELETED = 2;
}

enum CircumstanceType {

  PERFORMANCE_CIRCUMSTANCE = 0;

  REQUEST_CIRCUMSTANCE = 1;

  NARRATIVE_CIRCUMSTANCE = 2;
}

/*
 * Describes the specific type of Audit event being recorded.
 */
enum AuditEventType {
  /*
   * Represents an unspecified audit event type.
   */
  AUDIT_EVENT_TYPE_UNSPECIFIED = 0;
  /*
   * Represents a successful user login event.
   */
  AUDIT_EVENT_TYPE_USER_LOGIN_SUCCEEDED = 1;
  /*
   * Designates an event where a user logged out from the system.
   */
  AUDIT_EVENT_TYPE_USER_LOG_OUT = 2;
  /*
   * Depicts a failed user login attempt.
   */
  AUDIT_EVENT_TYPE_USER_LOGIN_FAIL = 3;
  /*
   * Signifies that there was a change in user access.
   */
  AUDIT_EVENT_TYPE_USER_ACCESS_CHANGE = 4;
  /*
   * Reflects an event where a user password was changed.
   */
  AUDIT_EVENT_TYPE_USER_PASSWORD_CHANGE = 5;
  /*
   * Corresponds to a successful system login event.
   */
  AUDIT_EVENT_TYPE_SYSTEM_LOGIN_SUCCEEDED = 6;
  /*
   * Symbolizes a system logout event.
   */
  AUDIT_EVENT_TYPE_SYSTEM_LOG_OUT = 7;
  /*
   * Indicates a failed system login attempt.
   */
  AUDIT_EVENT_TYPE_SYSTEM_LOGIN_FAIL = 8;
  /*
   * Stands for an event where Personal Identifiable Information was accessed.
   */
  AUDIT_EVENT_TYPE_USER_PII_ACCESSED = 9;
  /*
   * Immplies an event where Personal Identifiable Information was updated.
   */
  AUDIT_EVENT_TYPE_USER_PII_UPDATED = 10;
  /*
   * Entails an event where Personal Identifiable Information was created.
   */
  AUDIT_EVENT_TYPE_USER_PII_CREATED = 11;
  /*
   * Notes an event where Personal Identifiable Information was deleted.
   */
  AUDIT_EVENT_TYPE_USER_PII_DELETED = 12;
  /*
   * Represents an event where Personal Health Information was accessed.
   */
  AUDIT_EVENT_TYPE_USER_PHI_ACCESSED = 13;
  /*
   * Exemplifies an event where Personal Health Information was updated.
   */
  AUDIT_EVENT_TYPE_USER_PHI_UPDATED = 14;
  /*
   * Constitutes an event where Personal Health Information was created.
   */
  AUDIT_EVENT_TYPE_USER_PHI_CREATED = 15;
  /*
   * Portrays an event where Personal Health Information was deleted.
   */
  AUDIT_EVENT_TYPE_USER_PHI_DELETED = 16;
  /*
   * Shows a user communication event.
   */
  AUDIT_EVENT_TYPE_USER_COMMUNICATION = 17;
  /*
   * Denotes a configuration change event.
   */
  AUDIT_EVENT_TYPE_CONFIG_CHANGE = 18;
}
/*
 * Describes the level of sensitivity of the data contained within this audit message.
 */
enum SensitivityLevel {
  /*
   * Represents an unspecified sensitivity level.
   */
  SENSITIVITY_LEVEL_UNSPECIFIED = 0;
  /*
   * Implies that the information contained is not sensitive.
   */
  SENSITIVITY_LEVEL_LOW = 1;
  /*
   * Stipulates that the info could be used to identify an individual.
   */
  SENSITIVITY_LEVEL_MEDIUM = 2;
  /*
   * Indicates that the message contains Personal information.
   */
  SENSITIVITY_LEVEL_HIGH = 3;
}
/*
 * Defines the category of an actor: Human, System, or another entity.
 */
enum AgentType {
  /*
   * Symbolizes an unspecified agent type.
   */
  AGENT_TYPE_UNSPECIFIED = 0;
  /*
   * Demonstrates that the actor is a human.
   */
  AGENT_TYPE_HUMAN_USER = 1;
  /*
   * The actor is a system.
   */
  AGENT_TYPE_SYSTEM = 2;
  /*
   * The actor is a separate entity.
   */
  AGENT_TYPE_OTHER_ENTITY = 3;
}

/*
 * Enum to denote the severity level.
 */
enum SeverityLevel {
  /**
   * Unspecified severity.
   */
  UNSPECIFIED_SEVERITY_LEVEL = 0;
  /*
   * Low severity.
   */
  SEVERITY_LEVEL_LOW = 1;
  /*
   * Moderate severity.
   */
  SEVERITY_LEVEL_MEDIUM = 2;
  /*
   * High severity.
   */
  SEVERITY_LEVEL_HIGH = 3;
}

/*
 * Enum for classification type
 */
enum ClassificationType {
  /**
   * Unspecified classification
   */
  UNSPECIFIED_CLASSIFICATION_TYPE = 0;
  /*
   * Bacterial classification
   */
  BACTERIAL = 1;
  /*
   * Viral classification
   */
  VIRAL = 2;
  /*
   * Injury classification
   */
  INJURY = 3;
}

/*
   * Defines the enumeration for various statuses that a routine operation may exist in.
   * E.g., Scheduled, In progress, Completed, etc.
   */
enum RoutineStatus {
  /*
   * Indicates that the routine has been planned and is now scheduled
   */
  ROUTINE_SCHEDULED = 0;

  /*
   * Indicates that the execution of the routine is currently underway
   */
  ROUTINE_IN_PROGRESS = 1;

  /*
   * Indicates that the routine has been successfully completed
   */
  ROUTINE_COMPLETED = 2;

  /*
   * Indicates that the routine was planned and scheduled but eventually got canceled
   */
  ROUTINE_CANCELED = 3;

  /*
   * Indicates that the execution of the routine is behind the previously defined schedule
   */
  ROUTINE_DELAYED = 4;

  /*
   * Indicates that the routine execution has been completed and is now awaiting approval
   */
  ROUTINE_PENDING_APPROVAL = 5;

  /*
   * Indicates that the execution of the routine was not successful
   */
  ROUTINE_FAILED = 6;

  /*
   * Indicates that the routine is temporarily on hold for now
   */
  ROUTINE_ON_HOLD = 7;

  /*
   * Indicates that the routine is planned but its execution has not started yet
   */
  ROUTINE_NOT_STARTED = 8;

  /*
   * Indicates that the routine or its results are currently under review
   */
  ROUTINE_UNDER_REVIEW = 9;

  /*
   * Commonly used in healthcare settings, indicating that the routine has been marked as completed
   */
  ROUTINE_DISCHARGED = 10;

  /*
   * Indicates that the routine has been recalled or needs to be re-run
   */
  ROUTINE_RECALLED = 11;
}

/*
 * The possible statuses for a clinical protocol execution.
 */
enum ClinicalProtocolStatus {
  /*
   * The protocol execution is yet to start.
   */
  CLINICAL_PROTOCOL_NOT_STARTED = 0;
  /*
   * The protocol execution is currently ongoing.
   */
  CLINICAL_PROTOCOL_IN_PROGRESS = 1;
  /*
   * The protocol execution has finished successfully.
   */
  CLINICAL_PROTOCOL_COMPLETED = 2;
  /*
   * The protocol execution was unsuccessful.
   */
  CLINICAL_PROTOCOL_FAILED = 3;
  /*
   * The protocol execution was planned but subsequently cancelled.
   */
  CLINICAL_PROTOCOL_CANCELED = 4;
  /*
   * The protocol execution is overdue and is running late.
   */
  CLINICAL_PROTOCOL_DELAYED = 5;
  /*
   * The protocol execution results are being analysed/reviewed.
   */
  CLINICAL_PROTOCOL_UNDER_REVIEW = 6;
}


/*
 * Enum `ProviderStatus` is used to represent the current status of a healthcare provider account.
 * It contains two states, VALIDATED and DELETED.
 */
enum ProviderStatus {
  /*
   * The status when the provider's credentials and details have been reviewed and approved.
   */
  VALIDATED = 0;
  /*
   * The status when the provider's account has been deleted, possibly due to violation of terms or at the request of the provider.
   */
  DELETED = 1;
}

/*
 * Connects an ANF (Attribute-Name-Function) Statement to a query component.
 */
message AnfStatementConnector {
  /*
   * The Reference to the ANF Statement
   */
  ANFStatement anf_statement = 1;

  /*
   * The Type of the ANF Statement
   */
  AnfStatementType anf_statement_type = 2;

  /*
   * The Type of the ANF Operator used in the Statement
   */
  AnfOperatorType anf_operator_type = 3;

  /*
   * The Value of the ANF Operator used in the Statement
   */
  string operator_value = 4;
}


/*
 * Message for Country includes country-identifier and metadata fields.
 */
message Country {
  /*
   * Unique ID representing a Country.
   */
  optional string id = 1;

  /*
   * Name of the country.
   */
  string name = 2;

  /*
   * Creation timestamp of the country data.
   */
  optional google.protobuf.Timestamp created = 3;

  /*
   * Modification timestamp of the country data.
   */
  optional google.protobuf.Timestamp modified = 4;

  /*
   * Identifier of the creator of this record.
   */
  optional string creator = 5;

  /*
   * Identifier of the last modifier of this record.
   */
  optional string modifier = 6;
}

/*
 * Address, a composition of country, city, state, postal code and purpose of the address.
 */
message Address {
  /*
   * Country Identifier.
   */
  string country_id = 1;

  /*
   * Purpose of the address.
   */
  AddressPurpose address_purpose = 2;

  /*
   * First line of the address.
   */
  string address_1 = 3;

  /*
   * Optional: Second line of the address.
   */
  optional string address_2 = 4;

  /*
   * Optional: Third line of the address.
   */
  optional string address_3 = 5;

  /*
   * Name of the City.
   */
  string city = 6;

  /*
   * Name of the State.
   */
  string state = 7;

  /*
   * Zip or Postal code.
   */
  string postal_code = 8;
}

/*
 * PhoneNumber encapsulates the number along with its type.
 */
message PhoneNumber {
  /*
   * Telephone number.
   */
  string number = 1;

  /*
   * Classification of the phone number.
   */
  PhoneType type = 2;
}

/*
 * FullName includes the names of the user including first, middle, last along with title and suffix.
 */
message FullName {
  /*
   * Title of the user (ex: Mr., Mrs., Dr.).
   */
  string title = 1;

  /*
   * First name of the user.
   */
  string first_name = 2;

  /*
   * Middle name of the user(optional).
   */
  string middle_name = 3;

  /*
   * Last name of the user.
   */
  string last_name = 4;

  /*
   * Suffix for the name (ex: Jr., Sr., III).
   */
  string suffix = 5;
}

/*
 * ContactInfo stores the contact related information of a user.
 */
message ContactInfo {
  /*
   * Full name of the user.
   */
  FullName name = 1;

  /*
   * Identity of the patient.
   */
  optional string patient_id = 2;

  /*
   * Collection of addresses linked with the user.
   */
  repeated Address addresses = 3;

  /*
   * Collection of phone numbers linked with the user.
   */
  repeated PhoneNumber phone_numbers = 4;

  /*
   * Collection of email addresses linked with the user.
   */
  repeated EmailAddress emails = 5;
}

/*
 * EmailAddress, structure for storing email address and its type.
 */
message EmailAddress {
  /*
   * The email address.
   */
  string email = 1;

  /*
   * The type of the email address.
   */
  EmailType type = 2;
}

/*
 * Pagination is used in response message to provide info about pagination.
 */
message Pagination {
  /*
   * The current page number.
   */
  int32 page_number = 1;

  /*
   * The page size or count of items in the current page.
   */
  int32 page_size = 2;

  /*
   * Boolean value to sort in ascending order.
   */
  bool sort_ascending = 3;

  /*
   * Column or field based on which the sorting should be applied.
   */
  optional string sort = 4;

  /*
   * Total number of pages.
   */
  optional int64 total_pages = 5;

  /*
   * The total count of records available across pages.
   */
  optional int64 total_records = 6;
}

/*
 * Duration carries the period of time along with unit of time.
 */
message Duration {
  /*
   * Period of time.
   */
  int64 duration = 1;

  /*
   * Unit of time.
   */
  DurationType type = 2;
}

message PaymentDetails {
  /*
   * Mode of payment used for the test.
   */
  string payment_mode = 1;
  /*
   * ID referring to insurance information used for the test.
   */
  string insurance_info_id = 2;
  /*
   * ID of the payment transaction for the test.
   */
  string payment_transaction_id = 3;
  /*
   * More details about the payment.
   */
  string payment_details = 4;
}

/*
 * 'Identifier' Message definition for a unique ID associated with an ANFStatement
 */
message ANFIdentifier {
  /*
   * The variable 'id' stands for the unique Identifier for an ANFStatement.
   */
  string id = 1;
}


/*
 * The `Measure` message encapsulates a quantifiable attribute such as time duration or test results.
 * It defines an upper and lower bound for the measure, clarification if these bounds are inclusive,
 * the semantic interpretation of the measure, and optionally, the resolution or accuracy of the measure.
 *
 * Following are some examples of measures for clarification:
 * "Presence" denotes a measure where a certain quantity is existent. The `upper_bound` is set to INF, `lower_bound` is greater than 0 with `include_lower_bound` set based on context.
 * "Absence" denotes a measure where a certain quantity is non-existent. Both `upper_bound` and `lower_bound` are set to 0 with `include_lower_bound` and `include_upper_bound` set to true.
 * "Indeterminate" indicates a measure that can range from 0 to some value greater than 0.
 * "Exact Value" signifies a measure where a certain quantity is a precise value. Both `upper_bound` and `lower_bound` are set to this exact value with `include_lower_bound` and `include_upper_bound` set to true.
 * "Ranges" represent a measure that falls within a particular range. The `upper_bound` and `lower_bound` are set to the extremities of this range with `include_lower_bound` and `include_upper_bound` set based on context.
 * `semantic` describes the semantical sense of the measure, e.g., "Countable quantity".
 */
message Measure {
  /*
   * The `upper_bound` field signifies the maximum limit of the measure.
   */
  string upper_bound = 1;

  /*
   * The `lower_bound` field signifies the minimum limit of the measure.
   */
  string lower_bound = 2;

  /*
   * The `include_upper_bound` field reveals if the `upper_bound` value is inclusive in the measure.
   */
  bool include_upper_bound = 3;

  /*
   * The `include_lower_bound` field reveals if the `lower_bound` value is inclusive in the measure.
   */
  bool include_lower_bound = 4;

  string semantic = 5;

  /*
   * `resolution` denotes the accuracy or precision of the measure, it is an optional field.
   */
  string resolution = 6;
}

/*
 * Message representing a participant, who is typically a patient.
 */
message Participant {
  /*
   * Unique identifier for the participant
   */
  string id = 1;

  string practitioner_value = 2;

  string code = 3;
}

/*
 * Message representing a practitioner or an entity that authors.
 */
message Practitioner {
  /*
   * Unique identifier for the practitioner
   */
  optional string id = 1;

  /*
   * Reference to the participating practitioner
   */
  string practitioner_value = 2;

  /*
   * Authorized roles of the practitioner
   */
  string code = 3;
}

/*
 * Message representing associated statements like preconditions or interpretations.
 */
message AssociatedStatement {
  string id = 1;
  /*
   * Contents or description of the associated statement
   */
  string semantic = 2;
}

/*
 * Message representing a reference to other entities like patient records or health practitioners.
 */
message Reference {
  /*
   * Unique identifier for the reference
   */
  string id = 1;
  /*
   * The type of the reference, for example, "Patient", "Practitioner"
   */
  string type = 2;
}

message CircumstanceChoice {

  CircumstanceType circumstance_type = 1;

  string status = 2;

  Measure result = 3;

  string health_risk = 4;

  Measure normal_range = 5;

  Participant circumstance = 6;

  Measure timing = 7;

  Participant participant = 8;

}

/*
 * The ANFStatement message is the main representation of an ANFStatement. It defines the necessary fields required to represent it.
 */
message ANFStatement {
  /*
   * Uniquely identifies the ANFStatement.
   */
  ANFIdentifier id = 1;
  /*
   * Denotes the timestamp of the statement, adhering to the rule: Timing - past, present, or future.
   * For the "Performance of Action", Timing could denote a past or current timestamp.
   * For the "Request of Action", Timing would always denote a future timestamp.
   */
  Measure time = 2;
  /*
   * Identifies the subject of the record, which is typically the patient.
   */
  Participant subject_of_record = 3;
  /*
   * Identifies all authors behind this statement.
   */
  repeated Practitioner authors = 4;
  /*
   * Refers to the subject or topic of the incorporated information.
   */
  string subject_of_information = 5;
  /*
   * Refers to any related statements or conditions.
   */
  repeated AssociatedStatement associated_statement = 6;
  /*
   * Denotes the topic of the statement, and includes rules for different types of observations, procedures and test:
   * - Simple observation statements use the "Observation" procedure to symbolize the topic.
   * - Medication administration statements use the "Administration of substance" concept.
   * - Laboratory test statements use the "Laboratory Procedure" concept.
   * - Imaging Procedure statements use the "Imaging Procedure" concept.
   */
  string topic = 7;
  /*
   * Specifies the type category of the statement such as "Request", "Performance", etc.
   */
  string type = 8;
  /*
   * Circumstance choice
   */
  CircumstanceChoice circumstance_choice = 9;
  /*
   * Timestamp when this ANFStatement was created.
   */
  optional google.protobuf.Timestamp created = 10;
  /*
   * Timestamp when modifications were done to this ANFStatement.
   */
  optional google.protobuf.Timestamp modified = 12;
  /*
   * Specifies the unique identifier of the creator of this ANFStatement.
   */
  optional string creator = 13;
  /*
   * Specifies the unique identifier of the modifier of this ANFStatement.
   */
  optional string modifier = 14;
  /*
   * Specifies the current status of the ANFStatement.
   */
  Status status = 15;
}

/*
 * Identifies the identity that initiated this audit.
 */
message Actor {
  /*
   * UUID identifying the identity.
   */
  string identity = 1;
  /*
   * The role the actor had when initiated.
   */
  string role = 2;
  /*
   * Network address from actor when initiated.
   */
  string network_address = 3;
  /*
   * Indicates if the actor is a Human, System or another entity.
   */
  AgentType agent_type = 4;
}
/*
 * Contains the relevant data for this audit.
 */
message DataObject {
  string resource = 1;
  /*
   * Data block recorded for Audit System
   */
  string data = 2;
  /*
   * Indicates the sensitivity level of this data.
   */
  SensitivityLevel sensitivity = 3;
}
/*
 * Source of the Audit event.
 */
message AuditSource {
  /*
   * System Name
   */
  string system_info = 1;
  /*
   * Relevant configuration information.
   */
  string configuration = 2;
}
/*
 * Identifies whose information is being acted on.
 */
message AuditEntity {
  /*
   * Patient ID
   */
  string patient_id = 1;
  /*
   * National Health Identifier
   */
  string nationalHealthId = 2;
}
/*
 * Audit Event information to record.
 */
message AuditEvent {
  /*
   * Timestamp when this event occurred.
   */
  optional google.protobuf.Timestamp created = 1;
  /*
   * Identifies the type of event.
   */
  AuditEventType event_type = 2;
  /*
   * Identifies who is causing the action
   */
  Actor actor = 3;
  /*
   * Data that is being acted on.
   */
  DataObject data_object = 4;
  /*
   * Description of use of this data.
   */
  string purpose_of_use = 5;
  /*
   * Where did the event originate
   */
  AuditSource audit_source = 6;
  /*
   * Identifies whose data is being acted on.
   */
  AuditEntity audit_entity = 7;
  /*
   * Timestamp when this event was modified.
   */
  optional google.protobuf.Timestamp modified = 8;
  /*
   * ID of the creator of this event.
   */
  optional string creator = 9;
  /*
   * ID of the modifier of this event.
   */
  optional string modifier = 10;
}
/*
 * Indicates the status of an operation
 */
message AuditStatus {
  /*
   * Indicates whether the operation was successful or not.
   */
  bool success = 1;
}


/*
 * `RuleSet` message represents a certain ruleset for the rule engine.
 * This message is used for defining and documenting rules that are applied to questionnaire responses.
 */
message RuleSet {
  /*
   * UUID identifier for the rule.
   */
  string rule_id = 1;
  /*
   * Indicates the type of the rule (e.g., business rule, validation rule etc.).
   */
  string type = 2;
  /*
   * Indicates the category of the rule.
   */
  string category = 3;
  /*
   * Description or any remarks regarding the rule.
   */
  string description = 4;
  /**name of the rule
   */
  string name = 5;
}

/*
 * Message denoting a geographical location via coordinates.
 */
message Location {
  /*
   * The latitude of the location.
   */
  double latitude = 1;
  /*
   * The longitude of the location.
   */
  double longitude = 2;
}

/*
 * Message providing guidelines for positive and negative interpretations.
 */
message Interpretation {
  /*
   * Guide for interpreting positive results.
   */
  map<string, string> positive = 1;
  /*
   * Guide for interpreting negative results.
   */
  map<string, string> negative = 2;
}

/*
 * Message outlining the details of a test kit.
 */
message TestKit {
  /*
   * Name of the test kit.
   */
  string name = 1;
  /*
   * The disease that the test kit targets.
   */
  string target_disease = 2;
  /*
   * Required type of specimen for the test.
   */
  SpecimenType specimen_type = 3;
  /*
   * Procedure for conducting the test.
   */
  string procedure = 4;
  /*
   * Guide for test results interpretation.
   */
  Interpretation interpretation_guide = 5;
  /*
   * The brand that manufactured the test kit.
   */
  string brand = 6;
  /*
   * The approval status of the test kit.
   */
  string approval_status = 7;
  /*
   * The accuracy percentage of the test kit.
   */
  float accuracy = 8;
  /*
   * The duration of the test in minutes.
   */
  int32 test_duration = 9;

  /**
   * The cost of the test kit.
   */
  string test_case_id = 10;
}

/*
 * Message to store symptom information.
 */
message Symptom {
  /*
   * Name of the symptom.
   */
  string name = 1;
  /*
   * Severity level of the symptom.
   */
  SeverityLevel severity = 2;
  /*
   * Date when the symptom first appeared.
   */
  google.protobuf.Timestamp onset_date = 3;
  /*
   * Duration of the symptom.
   */
  Duration duration = 4;
  /*
   * Additional details about the symptom.
   */
  string additional_details = 5;
}
/*
 * Represents the request to retrieve client-level rules.
 */
message RuleSetsRequest {
  /*
   * The ID of the specified organization linked to the Questionnaire data.
   */
  optional string organization_id = 1;
  /*
   * The ID of the specified workspace linked to the Questionnaire data.
   */
  optional string workspace_id = 2;
}

/*
 * Represents the response retrieved from the GetRuleSets operation.
 */
message RuleSetsResponse {
  /*
   * The collection of rule sets that are available.
   */
  repeated RuleSet rule_sets = 1;
}

/*
 * Message to record user-provided test kit classification information.
 */
message UserAnswer {
  /*
   * ID of the user.
   */
  string patient_id = 1;

  /*
   * Id of the connected test..
   */
  optional string connected_test_id = 2;

  /*
   * Id of the user questionnaire.
   */
  optional string user_questionnaire_id = 3;
  /*
   * Symptoms reported by the user.
   */
  repeated Symptom symptoms = 4;
  oneof result {
    /*
     * ID to a media image for the test result.
     */
    string media_id = 5;
    /*
     * Text description of the test result.
     */
    string text_result = 6;
  }
  /*
   * Age of the user.
   */
  int32 age = 7;
  /*
   * Gender of the user.
   */
  Gender gender = 8;
  /*
   * Medical conditions of the user.
   */
  string medical_conditions = 9;
  /*
   * Pregnancy status of the user.
   */
  bool pregnancy_status = 10;
  /*
   * Language preference of the user.
   */
  string language_preference = 11;
  /*
   * Location of the user.
   */
  Location user_location = 12;

  /*
 * ID of the submitting user.
 */
  string submitting_user_id = 13;
}

/*
 * The response message to user classification request.
 */
message ClassificationResponse {
  /*
   * Name of the recommended test kit.
   */
  TestKit test_kit = 1;
  /*
   * Confidence score of the classification.
   */
  float confidence = 2;
  /*
   * Probability of a positive result.
   */
  float positive_probability = 3;
  /*
   * Classification related message.
   */
  string message = 4;
  /*
   * Availability of the recommended test kit.
   */
  string availability = 5;
  /*
   * Cost of the recommended test kit.
   */
  float cost = 6;
  /*
   * Additional recommendations based on classification.
   */
  string further_actions = 7;
  /*
   * Alternative test kits.
   */
  repeated TestKit alternative_options = 8;
  /*
   * Feedback URL for user classification result.
   */
  string feedback_url = 9;
  /*
   * Timestamp of the classification result.
   */
  google.protobuf.Timestamp timestamp = 10;
  /*
   * Identifier for the patient.
   */
  string patient_id = 11;

  /*
   * Whether to notify the CDC.
   */
  bool notify_cdc = 12;

  /*
   * Classification type
   */
  ClassificationType type = 13;
}

/*
 * The request message detailing user-provided information for classification.
 */
message ClassificationRequest {
  /*
   * Information provided by user for classification.
   */
  UserAnswer user_answer = 1;
}


/*
 * Coding message: models a specific coding instance from a given terminology system.
 */
message Coding {
  /*
   * Unique identifier used for inter-element referencing
   */
  string id = 1;

  /*
   * Identifier of the terminology system being used
   */
  string system = 2;

  /*
   * Specific version of the terminology system, if applicable
   */
  string version = 3;

  /*
   * The symbol, as defined by the terminology system
   */
  string code = 4;

  /*
   * The display textual representation as defined by the terminology system
   */
  string display = 5;
}

/*
 * CodeableConcept message: models a codeable concept that includes one or more codings from
 * terminology systems, along with a plain text representation.
 */
message CodeableConcept {
  /*
   * Unique identifier used for inter-element referencing
   */
  string id = 1;

  /*
   * Set of codes defined by various terminology systems
   */
  repeated Coding coding = 2;

  /*
   * Plain text representation of the codeable concept
   */
  string text = 3;
}


/**
 * A Message message.
 */
message Message {
  /**
   * The unique identifier for the Message.
   */
  optional string id = 1;
  /**
   * The unique identifier for the patient.
   */
  string patient_id = 2;
  /**
   * The title of the Message.
   */
  string title = 3;
  /**
   * The message of the Message.
   */
  string message = 4;
  /**
   * The type of the Message.
   */
  MessageType type = 5;
  /**
   * The status of the Message.
   */
  MessageStatus status = 6;
  /**
   * The time the Message was created.
   */
  optional google.protobuf.Timestamp created = 7;
  /**
   * The time the Message was last modified.
   */
  optional google.protobuf.Timestamp modified = 8;
  /**
   * The user who created the Message.
   */
  optional string creator = 9;
  /**
   * The user who last modified the Message.
   */
  optional string modifier = 10;
}
/*
 * EmailTemplate represents the structure of an email template.
 * It's a set of properties necessary to maintain an email template's record.
 */
message EmailTemplate {
  /*
   * The unique identifier for the email template.
   */
  optional string template_id = 1;
  /*
   * The subject line of the email template.
   */
  string subject = 2;
  /*
   * The content/body text of the email template.
   */
  string content = 3;
  /*
   * The variables that might be replaced with actual values in the email template.
   */
  repeated string variables = 4;
  /*
   * Enumeration defining the type/category of the email template.
   */
  TemplateType template_type = 5;
  /*
   * The UTC timestamp when the email template was created.
   */
  optional google.protobuf.Timestamp created = 6;
  /*
   * The UTC timestamp when the email template was last modified.
   */
  optional google.protobuf.Timestamp modified = 7;
  /*
   * The user ID of the creator of the email template.
   */
  optional string creator = 8;
  /*
   * The user ID of the person who last modified the email template.
   */
  optional string modifier = 9;
}

/*
 * SMSTemplate represents the structure of a sms template.
 * It's a set of properties necessary to maintain an sms template's record.
 */
message SMSTemplate {
  /*
   * The unique identifier for the SMS template.
   */
  optional string template_id = 1;

  /*
   * The content/body text of the SMS template.
   */
  string message = 2;

  /*
   * The variables that might be replaced with actual values in the SMS template.
   */
  repeated string variables = 3;

  /*
   * Enumeration defining the type/category of the SMS template.
   */
  TemplateType template_type = 4;

  /*
   * The UTC timestamp when the SMS template was created.
   */
  optional google.protobuf.Timestamp created = 5;

  /*
   * The UTC timestamp when the SMS template was last modified.
   */
  optional google.protobuf.Timestamp modified = 6;

  /*
   * The user ID of the creator of the SMS template.
   */
  optional string creator = 7;

  /*
   * The user ID of the person who last modified the SMS template.
   */
  optional string modifier = 8;
}
/**
 * A MessageTemplate for messages.
 */
message MessageTemplate {
  /**
   * The unique identifier for the Message.
   */
  optional string template_id = 1;
  /*
 * The variables that might be replaced with actual values in the SMS template.
 */
  repeated string variables = 2;
  /**
   * The title of the Message.
   */
  string title = 3;
  /**
   * The message of the Message.
   */
  string content = 4;
  /**
   * The type of the Message.
   */
  MessageType type = 5;
  /**
   * The time the Message was created.
   */
  optional google.protobuf.Timestamp created = 6;
  /**
   * The time the Message was last modified.
   */
  optional google.protobuf.Timestamp modified = 7;
  /**
   * The user who created the Message.
   */
  optional string creator = 8;
  /**
   * The user who last modified the Message.
   */
  optional string modifier = 9;
}

/*
 * NotificationEvent captures the details of a notification event.
 * It contains the properties necessary to generate a named event with email and sms template associations and more.
 */
message NotificationEvent {
  /*
   * The unique identifier for the notification event.
   */
  optional string event_id = 1;

  /*
   * The human-readable name of the event.
   */
  string event_name = 2;

  /*
   * A brief description about what the event signifies.
   */
  string event_description = 3;

  /*
   * The unique identifier for the associated email template.
   */
  optional string email_template_id = 4;

  /*
   * The unique identifier for the associated sms template.
   */
  optional string sms_template_id = 5;

  /**
   * The unique identifier for the associated message template.
   */
  optional string message_template_id = 6;
  /*
   * Any parameters related to the event which are necessary during event processing.
   */
  repeated string event_parameters = 7;

  /*
   * Enumeration defining the priority of this notification event.
   */
  NotificationPriority priority = 8;

  /*
   * Enumeration indicating the sensitivity level of the notification when sent.
   */
  SensitivityLevel sensitivity = 9;

  /*
   * Represents the number of attempts to retry sending email. It defaults to 0, meaning infinite retries.
   */
  int32 email_retry = 10;

  /*
   * Represents the number of attempts to retry sending SMS. It defaults to 0, meaning infinite retries.
   */
  int32 sms_retry = 11;

  /*
   * The UTC timestamp when the notification event was created.
   */
  optional google.protobuf.Timestamp created = 12;

  /*
   * The UTC timestamp when the notification event was last modified.
   */
  optional google.protobuf.Timestamp modified = 13;

  /*
   * The user ID of the creator of the notification event.
   */
  optional string creator = 14;

  /*
   * The user ID of the person who last modified the notification event.
   */
  optional string modifier = 15;
}

/*
 * Defines the structure for a file attachment.
 */
message Attachment {
  /*
   * The name of the file to be attached.
   */
  string filename = 1;

  /*
   * The binary content of the file to be attached.
   */
  bytes data = 2;

  /*
   * The MIME type, or 'Content-Type', of the file to be attached.
   */
  string mime_type = 3;
}

/*
 * Defines the data structure for a notification. A notification could be an SMS or EMAIL mode of communication.
 */
message Notification {
  /*
   * The unique identifier for the notification within the processing queue.
   */
  optional string queue_id = 1;

  /*
   * The unique identifier for the event that triggers this notification.
   */
  string event_id = 2;

  /*
   * The unique identifier for the patient that this notification is intended for.
   */
  string patient_id = 3;

  /*
   * The status of the SMS notification which could be 'pending', 'sent', or 'failed'.
   */
  optional NotificationStatus sms_status = 4;

  /*
   * The status of the EMAIL notification which could also be 'pending', 'sent', or 'failed'.
   */
  optional NotificationStatus email_status = 5;

  /*
   * The timestamp when the notification was added to the queue.
   */
  optional google.protobuf.Timestamp timestamp = 6;

  /*
   * Custom data associated with the notification. The purpose of this data varies based on the specific use case.
   */
  map<string, string> custom_data = 7;

  /*
   * Email-specific attributes.
   */
  /*
   * The email addresses of the primary recipients.
   */
  repeated string to_email = 8;

  /*
   * The email addresses to which the notification should be carbon copied(Cc).
   */
  repeated string cc_email = 9;

  /*
   * The email addresses to which the notification should be blind carbon copied(Bcc).
   */
  repeated string bcc_email = 10;

  /*
   * Any files that need to be attached to the email notification.
   */
  repeated Attachment email_attachments = 11;

  /*
   * SMS-specific attributes.
   */
  /*
   * The phone numbers to which the SMS notification should be sent.
   */
  repeated string to_phone_number = 12;

  /*
   * Variables or placeholders that can be replaced in the notification's content.
   */
  map<string, string> variables = 13;

  /*
   * The list of unique identifiers(UUIDs) for each recipient. This includes both email and phone number recipients.
   */
  repeated string recipients_id = 14;

  /*
   * The timestamp at which this event was created.
   */
  optional google.protobuf.Timestamp created = 15;

  /*
   * The timestamp at which this event was last modified.
   */
  optional google.protobuf.Timestamp modified = 16;

  /*
   * The unique identifier of the user or system that created this event.
   */
  optional string creator = 17;

  /*
   * The unique identifier of the user or system that last modified this event.
   */
  optional string modifier = 18;
}
/*
 * Defines the required parameters for a template request.
 */
message TemplateRequest{
  /*
   * The unique identifier for the template.
   */
  string template_id = 1;
}

/*
 * Defines the request to list SMS templates.
 */
message SMSTemplateListRequest{
  /*
   * Pagination specifics like the page number and page size for the list request.
   */
  Pagination pagination = 1;
}
/*
 * Defines the request to list Email templates.
 */
message EmailTemplateListRequest{
  /*
   * Pagination specifics like the page number and page size for the list request.
   */
  Pagination pagination = 1;
}
/*
 * Defines the request to list Notification events.
 */
message NotificationEventListRequest{
  /*
   * Pagination specifics like the page number and page size for the list request.
   */
  Pagination pagination = 1;
}
/*
 * Contains the response data for a list of SMS templates.
 */
message SMSTemplateListResponse {
  /*
   * Pagination details of the whole list.
   */
  Pagination pagination = 1;
  /*
   * The actual list of SMS templates.
   */
  repeated SMSTemplate templates = 2;
}
/*
 * Contains the response data for a list of Email templates.
 */
message EmailTemplateListResponse {
  /*
   * Pagination details of the whole list.
   */
  Pagination pagination = 1;
  /*
   * The actual list of Email templates.
   */
  repeated EmailTemplate templates = 2;
}
/*
 * Contains the response data for a list of Notification events.
 */
message NotificationEventListResponse {
  /*
   * Pagination details of the whole list.
   */
  Pagination pagination = 1;
  /*
   * The actual list of Notification events.
   */
  repeated NotificationEvent templates = 2;
}
/*
 * Defines the audit record for a communication message.
 */
message CommunicationAuditRecord{
  /*
   * The notification that triggered the communication.
   */
  Notification notification = 1;
  /*
   * The actual content of the email communication.
   */
  string emailContent = 2;
  /*
   * The actual content of the SMS communication.
   */
  string smsContent = 3;
  /*
   * The actual content of the Message communication.
   */
  string messageContent = 4;
}

/**
 * The request to get Messages.
 */
message GetMessagesRequest {
  /**
   * The unique identifier for the patient.
   */
  string patient_id = 1;
  /**
   * The pagination information.
   */
  Pagination pagination = 2;
}
/**
 * The response to get Messages.
 */
message GetMessagesResponse {
  /**
   * The Messages.
   */
  repeated Message messages = 1;
  /**
   * The pagination information.
   */
  Pagination pagination = 2;
}
/**
 * The request to mark a Message as read.
 */
message MarkMessagesAsReadRequest {
  /**
   * The unique identifier for the Message.
   */
  repeated string id = 1;
}
/**
 * The response to mark a Message as read.
 */
message MarkMessagesAsReadResponse {
  /**
   * The Message.
   */
  repeated Message messages = 1;
}

/**
 * The request to mark a Message as unread.
 */
message MarkMessagesAsUnreadRequest {
  /**
   * The unique identifier for the Message.
   */
  repeated string id = 1;
}
/**
 * The response to mark a Message as unread.
 */
message MarkMessagesAsUnreadResponse {
  /**
   * The Message.
   */
  repeated Message messages = 1;
}

/**
 * The response to list MessageTemplates.
 */
message MessageTemplateListResponse {
  /**
   * The list of MessageTemplates.
   */
  repeated MessageTemplate templates = 1;
  /**
   * The pagination information.
   */
  Pagination pagination = 2;
}


/**
 * A LabFinding are the results of classification of a connected test submission being returned to the lab.
 */
message LabFindings {

  /**
   * The ID of the LabFinding.
   */
  optional string id = 1;
  /**
   * The basic information of the connected test submission.
   */
  BasicInfo basicInfo = 2;
  /**
   * The provider information of the connected test submission.
   */
  ProviderInfo providerInfo = 3;
  /**
   * The metadata of the connected test submission.
   */
  Metadata metadata = 4;
  /**
   * The classification results of the connected test submission.
   */
  ClassificationResponse classification = 5;
  /*
 * The timestamp when this event was created.
 */
  optional google.protobuf.Timestamp created = 7;
  /*
   * The timestamp when this event was modified.
   */
  optional google.protobuf.Timestamp modified = 8;
  /*
   * The user ID of the creator of this event.
   */
  optional string creator = 9;
  /*
   * The user ID of the modifier of this event.
   */
  optional string modifier = 10;
}

/**
 * The response of a LabFinding.
 */
message LabFindingsResponse {
  /**
   * The ID of the LabFinding.
   */
  string lab_findings_id = 1;
  /**
   * The status of the LabFinding.
   */
  LabFindingStatus status = 2;
}

/**
 * MetaData for the processor in processing for this specific lab.
 */
message LabMetaDataProcessor {
  /**
   * The identifier of the lab.
   */
  string lab_identifier = 1;
  /**
   * The authorization code for the lab.
   */
  string lab_authorization = 2;
  /**
   * The processing code for the lab.
   */
  string lab_processing_code  = 3;
  /**
   * The data for the lab processor.
   */
  repeated string lab_data = 4;
}

/**
 * The request to create a connected lab.
 */
message ConnectedLab {
  /**
   * The basic information of the connected lab.
   */
  optional string id = 1;
  /**
   * The basic information of the connected lab.
   */
  string name = 2;
  /**
   * Identifier of processing system for submitting to the lab.
   */
  string identifier = 3;
  /*
   * ID of the organization involved in the test.
   */
  string organization_id = 4;
  /*
   * ID denoting the workspace in which the test was administered.
   */
  string workspace_id = 5;

  /**
   * The contact information of the connected lab.
   */
  ContactInfo contact_info = 6;

  /*
   * The physical address/office location of the lab.
   */
  Address lab_address = 7;

  /*
   * The email address used for formal communications with the lab.
   */
  EmailAddress lab_email = 8;

  /*
   * The phone number used to get in touch with the lab.
   */
  PhoneNumber lab_phone = 9;

  /*
   * The official website of the lab.
   */
  string lab_website = 10;

  /*
   * A brief description about the lab.
   */
  string lab_description = 11;

  /*
   * A list of all the certifications that the lab holds.
   * This is repeated as there can be multiple certifications.
   */
  repeated string lab_certifications = 12;

  /**
   * The metadata of the lab processor.
   */
  optional LabMetaDataProcessor lab_processor = 13;

  /*
   * The timestamp capturing when this particular Lab instance was created.
   * This is optional, and might not be present at all.
   */
  optional google.protobuf.Timestamp created = 14;

  /*
   * The timestamp capturing any modifications to the Lab instance.
   * Similar to 'created', this too is optional.
   */
  optional google.protobuf.Timestamp modified = 15;

  /*
   * The ID of the user who initially created this Lab instance.
   * Another optional field.
   */
  optional string creator = 16;

  /*
   * The ID of the user who made the most recent modifications to this Lab instance.
   * This field is also optional.
   */
  optional string modifier = 17;
}

/**
 * The request to create a connected lab.
 */
message CreateConnectedLabRequest {
  /**
   * The connected lab to be created.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The response of a connected lab creation.
 */
message CreateConnectedLabResponse {
  /**
   * The connected lab to be created.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The request to get a connected lab.
 */
message GetConnectedLabRequest {
  /**
   * The ID of the connected lab to be retrieved.
   */
  string connected_lab_id = 1;
}

/**
 * The response of a connected lab retrieval.
 */
message GetConnectedLabResponse {
  /**
   * The connected lab to be retrieved.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The request to update a connected lab.
 */
message UpdateConnectedLabRequest {
  /**
   * The connected lab to be updated.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The response of a connected lab update.
 */
message UpdateConnectedLabResponse {
  /**
   * The connected lab to be updated.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The request to delete a connected lab.
 */
message DeleteConnectedLabRequest {
  /**
   * The ID of the connected lab to be deleted.
   */
  string connected_lab_id = 1;
}

/**
 * The response of a connected lab deletion.
 */
message DeleteConnectedLabResponse {
  /**
     * The connected lab to be updated.
     */
  ConnectedLab connected_lab = 1;
}

/**
 * The request to list connected labs.
 */
message ListConnectedLabsRequest {
  /*
   * Pagination information and sorting.
   */
  Pagination pagination = 1;

  /**
   * The ID of the organization to list connected tests.
   */
  string organization_id = 2;

  /**
   * The ID of the workspace to list connected tests.
   */
  string workspace_id = 3;
}

/**
 * The response of a connected lab listing.
 */
message ListConnectedLabsResponse {
  /**
   * The list of connected labs.
   */
  repeated ConnectedLab connected_labs = 1;
  /*
 * Pagination information and sorting.
 */
  Pagination pagination = 2;
}


/*
 * Represents basic information regarding the test.
 */
message BasicInfo {
  /*
   * Unique identifier for the test.
   */
  optional string id = 1;
  /*
   * Timestamp marking the creation of the test record.
   */
  google.protobuf.Timestamp created = 2;
  /*
   * User or entity that initiated the creation of the test.
   */
  string creator = 3;
  /*
   * Timestamp of the last modification on the test record.
   */
  google.protobuf.Timestamp modified = 4;
  /*
   * User or entity that last modified the test.
   */
  string modifier = 5;
  /*
   * ID referencing the test within the vendor's system.
   */
  string vendor_lab_test_id = 6;
  /*
   * String denoting the classification or type of the test.
   */
  string type = 7;
  /*
   * ID of the patient associated with the test.
   */
  string patient_id = 8;
  /*
   * National health ID of the patient associated with the test.
   */
  string national_health_id = 9;
  /*
   * ID of the health service provider related to the test.
   */
  string health_service_id = 10;
  /*
   * ID of the organization involved in the test.
   */
  string organization_id = 11;
  /*
   * ID denoting the workspace in which the test was administered.
   */
  string workspace_id = 12;
  /*
   * String denoting the source or origin detail of the tested data.
   */
  string source = 13;
}
/*
 * Contains information related to the test order.
 */
message OrderInfo {
  /*
   * Unique identifier for the test order.
   */
  string order_id = 1;
  /*
   * Current status of the test order.
   */
  string status = 2;
  /*
   * Descriptive message conveying the order status.
   */
  string status_message = 3;
  /*
   * Any actions associated with the test order's status.
   */
  repeated StatusMessageAction status_message_actions = 4;
  /*
   * ID of the clinical encounter pertaining to the test.
   */
  string encounter_id = 5;
  /*
   * Boolean field indicating if the test has been synced with any Electronic Health Record (EHR) system.
   */
  bool is_synced_with_ehr = 6;
  /*
   * String detailing the result data from the test.
   */
  string result = 7;
  /*
   * ID of any associated questionnaire linked to the test.
   */
  string questionnaire_id = 8;
}
/*
 * Contains notes related to the test.
 */
message TestNotes {
  /*
   * General notes regarding the test.
   */
  string notes = 1;
  /*
   * Notes regarding any medication related to the test.
   */
  string medication_notes = 2;
  /*
   * Notes regarding any referrals related to the test.
   */
  string referral_notes = 3;
  /*
   * Notes or observations made during diagnosis.
   */
  string diagnostic_notes = 4;
}
/*
 * Contains details related to payments for the test.
 */

/*
 * Contains information about the providers associated with the=test.
 */
message ProviderInfo {
  /*
   * ID of the provider who ordered the test.
   */
  string ordering_provider_id = 1;
  /*
   * ID of the provider assigned to oversee the test.
   */
  int32 assigned_provider_id = 2;
  /*
   * National Provider Identifier of the ordering provider.
   */
  int32 ordering_provider_npi = 3;
}
/*
 * Contains detailed information about the test and its results.
 */
message TestDetails {
  /*
   * Metadata associated with the test.
   */
  Metadata metadata = 1;
  /*
   * Base64 encoded data of the test requisition.
   */
  string requisition_base64 = 2;
  /*
   * Internal reference ID for the test administered.
   */
  string internal_test_id = 3;
  /*
   * Information regarding any medications linked to the test.
   */
  string medications = 4;
  /*
   * Details of any referrals related to the test.
   */
  string referrals = 5;
  /*
   * Observations or details regarding diagnosis.
   */
  string diagnostics = 6;
  /*
   * List of IDs for other mentionable tests supplementing the main test.
   */
  repeated string orderable_test_ids = 7;
  /*
   * Details of other mentionable tests that were possibly ordered.
   */
  repeated OrderableTest orderable_tests = 8;
  /*
   * Results for all mentioned or mentioned orderable tests.
   */
  repeated OrderableTestResult orderable_test_results = 9;
  /*
   * Classification or the type of the test.
   */
  TestClassification test_classification = 10;
  /*
   * Boolean denoting if the test was conducted on-site.
   */
  bool is_onsite_test = 11;
  /*
   * ID of the specimen collected for the test.
   */
  string specimen_id = 12;
  /*
   * Confirmation ID from the lab that conducted the test.
   */
  string lab_vendor_confirmation_id = 13;
  /*
   * Identifier for the device used for the test.
   */
  string device_identifier = 14;
  /*
   * Serial number for the device used for the test.
   */
  string device_serial_number = 15;
  /*
   * Boolean denoting if the test record was auto-generated.
   */
  bool is_auto_generated = 16;
  /*
   * Flag relating to the reporting status of the test.
   */
  string reporting_flag = 17;
  /*
   * Flag influencing the notification status of the test.
   */
  string notification_flag = 18;
  /*
   * Status indicator for the test order.
   */
  string order_status_flag = 19;
  /*
   * Path to the location of the order receipt.
   */
  string order_receipt_path = 20;
  /*
   * Detailing the type of lab test conducted.
   */
  string lab_test_type = 21;
  /*
   * Specifies the type of specimen used for the test.
   */
  string specimen_type = 22;
  /*
   * Medical code associated with the implemented test.
   */
  string medical_code = 23;
  /*
   * Human friendly name for the test.
   */
  string test_name = 24;
  /*
   * Descriptive string to illustrate the format of the test.
   */
  TestFormat test_format = 25;
  /*
   * LOINC code associated with the test.
   */
  Coding loinc_code = 26;
  /*
  * Media ID
   */
  optional string media_id = 27;
  /*
 * Unique identifier for the LIDR (Laboratory Interoperability Data Repository id) of the device
 */
  optional string lidr_id = 29;
}

/*
 * Contains metadata related to a specific test.
 */
message Metadata {

  /*
   * QR Code data associated with the test kit.
   */
  string qr_data = 1;

  /*
   * ID associated with the upload event for the kit's data.
   */
  string kit_upload_id = 2;

  /*
   * Detailed response message related to the test.
   */
  string response_message = 3;

  /*
   * Header or title of the response.
   */
  string response_title = 4;

  /*
   * Numeric code representing the type of response.
   */
  int32 response_code = 5;

  /*
   * Type of any image data associated with the test (for example, "jpg" or "png").
   */
  string image_type = 6;

  /*
   * A string depicting the type of the test.
   */
  string type = 7;

  /*
   * Manufacturer or creator of the test kit.
   */
  string manufacturer = 8;

  /*
   * Lot number attributed to the test kit's cassette.
   */
  string cassette_lot_number = 9;

  /*
   * Boolean outcome of the IgM antibody test.
   */
  bool outcome_igm = 10;

  /*
   * Boolean outcome of the IgG antibody test.
   */
  bool outcome_igg = 11;

  /*
   * Overall outcome or result of the test.
   */
  string outcome = 12;

  /*
   * Self-assessed outcome for the IgM antibody test.
   */
  bool self_assessment_outcome_igm = 13;

  /*
   * Self-assessed outcome for the IgG antibody test.
   */
  bool self_assessment_outcome_igg = 14;

  /*
   * Self-assessed overall outcome or result.
   */
  string self_assessment_outcome = 15;

  /*
   * Expiry date of the test kit's cassette.
   */
  string cassette_expiration_date = 16;

  /*
   * Orderable ID associated with the lab test.
   */
  string lab_test_orderable_id = 17;

  /*
   * The SKU ID associated with the test kit.
   */
  string sku_id = 18;

  /*
   * Verification status or detail of the cassette.
   */
  string cassette_verification = 19;
}

/*
 * Specifies actions or recommendations based on a specific status message.
 */
message StatusMessageAction {
  /*
  * Unique identifier for the action exemplified.
  */
  string id = 1;

  /*
  * The value or directive to be followed based on the status message.
  */
  string value = 2;

  /*
  * Detailed description regarding the action or recommendation.
  */
  string description = 3;
}

/*
 * Represents a specific test that can be ordered in a healthcare context.
 * This could be any diagnostic, imaging, pathology, or genetic test.
 */
message OrderableTest {
  /*
   * Unique identifier for the orderable test. This is vital for test tracking.
   */
  string orderable_test_id = 1;
}

/*
 * Provides detailed result information for an orderable test. This includes when the
 * test was conducted, the results, and the interpretation or outcome.
 */
message OrderableTestResult {
  /*
  * Refers to the specific test that was conducted.
  */
  string orderable_test_id = 1;

  /*
  * Indicates the date when the sample or specimen was collected for conducting the test.
  */
  string collection_date = 2;

  /*
  * The actual result or value obtained from the test. It might contain numeric or descriptive results depending on the test type.
  */
  string test_result = 3;

  /*
  * Provides an interpretation or high-level outcome of the test which can be understand by non-medical personnel.
  */
  string outcome = 4;

  /*
  * Offers a detailed message related to the test's response or result.
  */
  string response_message = 5;

  /*
  * Refers to the title or header of the response. It provides a summary of the type of response produced by the test.
  */
  string response_title = 6;

  /*
  * A numeric code representing the type of response. These are standard codes that translate to specific responses.
  */
  int32 response_code = 7;
}

/*
 * The TestKitMetadata message encapsulates all the metadata related to the physical test kit used.
 * This includes unique identifiers for the test kit and its manufacturing data.
 */
message TestKitMetadata {
  /*
  * This is the ID that associates the test kit with the orderable test.
  */
  string orderable_test_id = 1;

  /*
  * The unique device identifier or code for the test kit provided by the manufacturer.
  */
  int32 device_identifier = 2;

  /*
  * The lot or batch number of the test kit. It allows tracing back to the batch of production for quality control.
  */
  string batch_lot_number = 3;

  /*
  * The physical test kit's serial number usually provided for tracking individual kits.
  */
  string serial_number = 4;

  /*
  * Specifies the date when the test kit was manufactured.
  */
  string manufacturing_date = 5;

  /*
  * Shows the expiration date for the test kit. After this date, the test may not function accurately.
  */
  string expiration_date = 6;

  /*
  * Indicates the data format of the kit's barcode. It could vary based on the barcode technology used.
  */
  string barcode_data_format = 7;

  /*
  * Tracks the timestamp when the kit's barcode was scanned, typically representing when the test kit was issued for use.
  */
  string scan_date = 8;
}

/*
 * Request for a Connected Test. Connected test is a term used to describe a test
 * that is connected to the system and can send and receive data to/from it. The
 * requested test's detail is fetched using the Test's ID.
 */
message TestIdRequest {
  /*
  * The ID of a connected Test. This ID enables us to fetch details for a specific test from the system.
  */
  string test_id = 1;
}

/*
 * The response one gets when they submit a ConnectedTest. This includes an ID for
 * the submission. The client applications can use this ID for tracking the test submission.
 */
message TestSubmissionResponse {
  /*
  * The ID of the Connected Test submission. This unique ID is used to reference the submission in subsequent operations.
  */
  string submission_id = 1;
}

/*
 * The ConnectedTest message represents a full connected test order,
 * including all necessary sub-messages for different sections of information.
 */
message ConnectedTest {
  /*
   * This field captures basic information relating to the test.
   */
  BasicInfo basic_info = 1;
  /*
   * This block captures all order related information.
   */
  OrderInfo order_info = 2;
  /*
   * Holds any notes or annotations related to the test.
   */
  TestNotes test_notes = 3;
  /*
   * This block captures all payment related details.
   */
  PaymentDetails payment_details = 4;
  /*
   * Information about the provider is found in this block.
   */
  ProviderInfo provider_info = 5;
  /*
   * This block captures all the details related to the test and its results.
   */
  TestDetails test_details = 6;
  /*
   * The timestamp when this event was created.
   */
  optional google.protobuf.Timestamp created = 7;
  /*
   * The timestamp when this event was modified.
   */
  optional google.protobuf.Timestamp modified = 8;
  /*
   * The user ID of the creator of this event.
   */
  optional string creator = 9;
  /*
   * The user ID of the modifier of this event.
   */
  optional string modifier = 10;
}

/*
 * Request Message to list NotificationConnectedTests. This helps
 * fetching multiple test data for a user, leveraging pagination.
 */
message ConnectedTestListRequest{
  /*
   * Pagination information and sorting. Used to fetch a batch of tests for a user rather than all.
   */
  Pagination pagination = 1;
  /*
   * Unique identifier for the patient, used to fetch the tests related to this patient.
   */
  string patient_id = 2;
}

/*
 * Request to fetch a list of NotificationConnectedTests by National health id.
 * This helps to get the tests done for a person based on the National health id.
 */
message ConnectedTestListByNHIDRequest{
  /*
   * Pagination information and sorting.
   */
  Pagination pagination = 1;
  /*
   * National Health ID of the user. This ID is unique for each individual in a country, used for fetching health related information.
   */
  string national_health_id = 2;
}

/*
 * Response containing the requested list of connected tests for a specific national health id.
 * The response includes details of all connected tests for an individual mapped with his/her national health id.
 */
message ConnectedTestListByNHIDResponse {
  /*
   * Pagination information and sorting.
   */
  Pagination pagination = 1;
  repeated ConnectedTest connected_tests = 2;
}

/*
 * Response containing the requested list of connected tests for a specific user.
 * The response includes details of all connected tests for a user.
 */
message ConnectedTestListResponse {
  /*
   * Pagination information and sorting.
   */
  Pagination pagination = 1;
  repeated ConnectedTest connected_tests = 2;
}

/*
 * Represents information about a medication including its name,
 * dosage, instructions, route of administration, frequency, start and end dates,
 * prescribing doctor, pharmacy, and a boolean flag for prescription.
 */
message Medication {
  /*
   * The unique identifier for the medication
   */
  optional string id = 1;

  /*
   * The unique identifier for the patient
   */
  string patient_id = 2;

  /*
   * The unique identifier for the patient's national health id
   */
  string national_health_id = 3;
  /*
   * The name of the medication
   */
  string medication_name = 4;
  /*
   * Details about the medication dosage strength
   */
  string dosage_strength = 5;
  /*
   * The unit of measurement for the medication dosage
   */
  string dosage_unit = 6;

  /*
   * The dosage form of the medication
   */
  DosageForm dosage_form = 7;

  /*
 * The quantity of medication prescribed or administered.
 */
  double quantity = 8;

  /*
   * Instructions for how to take the medication
   */
  string instructions = 9;
  /*
   * The way the medication is to be administered (e.g., orally, intravenously, etc.)
   */
  MedicationAdministrationRoute route_of_administration = 10;

  /*
   * A string to represent other route of administration not listed in the MedicationAdministrationRoute enum
   */
  optional string other_route_of_administration = 11;
  /*
   * How often the medication is to be taken
   */
  MedicationFrequency frequency = 12;
  /*
   * A string to represent other frequency not listed in the MedicationFrequency enum
   */
  string other_frequency = 13;
  /*
   * The date when the medication was first taken
   */
  google.protobuf.Timestamp start_date = 14;
  /*
   * The date when the medication stopped being taken
   */
  optional google.protobuf.Timestamp end_date = 15;
  /*
   * The provider id of the doctor who prescribed the medication
   */
  string provider_number = 16;
  /*
   * The pharmacy id where the medication was obtained
   */
  optional string pharmacy_id = 17;
  /*
   * A flag indicating whether the medication requires a prescription
   */
  bool is_prescription = 18;

  /*
   * A flag indicating whether the medication is generic
   */
  bool is_generic = 19;

  /*
 * The timestamp indicating when the user's profile was created.
 */
  optional google.protobuf.Timestamp created = 20;

  /*
   * The timestamp indicating the last modification of the user's profile.
   */
  optional google.protobuf.Timestamp modified = 21;

  /*
   * The identifier of the entity that created the user's profile.
   */
  optional string creator = 22;

  /*
   * The identifier of the entity that last modified the user's profile.
   */
  optional string modifier = 23;
  /*
   * A string to represent other dosage form not listed in the DosageForm enum
   */
  optional string other_dosage_form = 24;

  /*
   * The National Drug Code (NDC) for the medication
   */
  optional string product_ndc= 25;
}


message SearchMedicationsRequest {
  /*
   * The brand name of the medication to search for.
   */
  string brand_name = 1;
  /*
   * Pagination information.
   */
  Pagination pagination = 2;
}

/*
 * Request message for ending a medication.
 */
message EndMedicationRequest {
  /*
   * The unique identifier for the medication to be ended.
   */
  string medication_id = 1;

  /*
   * The date when the medication stopped being taken
   */
  google.protobuf.Timestamp end_date = 2;
}

/*
 * Request message for listing medications by patient ID.
 */
message ListMedicationsRequest {

  oneof search {
    /*
   * The unique identifier for the patient.
   */
    string patient_id = 1;
    /*
   * The unique identifier for the patient's national health ID.
   */
    string national_health_id = 2;
  }
  /*
 * Pagination information.
 */
  Pagination pagination = 3;
}

/*
 * Response message for listing medications.
 */
message ListMedicationsResponse {
  /*
   * List of medications.
   */
  repeated Medication medications = 1;

  /*
   * Pagination information.
   */
  Pagination pagination = 2;
}


/*
 * Request message for tracking medication administration to a patient.
 */
message MedicationAdministration {
  /*
   * The unique identifier for the medication administration.
   */
  optional string id = 1;
  /*
   * The unique identifier for the medication being administered.
   */
  string medication_id = 2;
  /*
   * The unique identifier for the patient.
   */
  string patient_id = 3;
  /*
   * The unique identifier for the patient's national health ID.
   */
  string national_health_id = 4;
  /*
   * The date and time when the medication was administered.
   */
  google.protobuf.Timestamp administration_time = 5;

  /*
   * The unique identifier for the user who administered the medication.
   */
  string administrated_by = 6;
  /*
   * Additional notes or details about the medication administration.
   */
  string administration_notes = 7;
  /*
 * The timestamp indicating when the user's profile was created.
 */
  optional google.protobuf.Timestamp created = 8;

  /*
   * The timestamp indicating the last modification of the user's profile.
   */
  optional google.protobuf.Timestamp modified = 9;

  /*
   * The identifier of the entity that created the user's profile.
   */
  optional string creator = 10;

  /*
   * The identifier of the entity that last modified the user's profile.
   */
  optional string modifier = 11;
}

/*
 * Request message for retrieving medication information by ID.
 */
message GetMedicationByIdRequest {
  /*
   * The unique identifier for the medication to retrieve.
   */
  string medication_id = 1;
  /*
 * Pagination information.
 */
  Pagination pagination = 2;
}

/*
 * Request message for retrieving medication information by patient ID within a date range.
 */
message GetMedicationsByPatientIdRequest {
  /*
   * The unique identifier for the patient.
   */
  string patient_id = 1;
  /*
   * Start date of the date range.
   */
  google.protobuf.Timestamp start_date = 2;
  /*
   * End date of the date range.
   */
  google.protobuf.Timestamp end_date = 3;
  /*
 * Pagination information.
 */
  Pagination pagination = 4;
}

/*
 * Request message for retrieving medication information by national health ID within a date range.
 */
message GetMedicationsByNationalHealthIdRequest {
  /*
   * The unique identifier for the patient's national health ID.
   */
  string national_health_id = 1;
  /*
   * Start date of the date range.
   */
  google.protobuf.Timestamp start_date = 2;
  /*
   * End date of the date range.
   */
  google.protobuf.Timestamp end_date = 3;
  /*
 * Pagination information.
 */
  Pagination pagination = 4;
}


/*
 * A message representation of a user profile in the system.
 * It contains comprehensive information relating to a user such as personal, contact, and health-related information.
 * Note: Repeated fields represent multiple, optional occurrences of data type; Optional fields can appear zero or one times; Required fields must appear one or more times.
 */
message UserProfile {
  /*
   * The unique identifier for the user profile.
   */
  optional string id = 1;
  /*
   * The unique identifier for the user.
   */
  optional string user_id = 2;

  /*
   * The national health identifier of the user.
   */
  string national_health_id = 3;

  /*
   * The full name details of the user.
   */
  FullName full_name = 4;

  /*
   * A list of contact information for the user.
   */
  repeated ContactInfo contacts = 5;

  /*
   * The gender of the user.
   */
  Gender gender = 6;

  /*
   * The date of birth of the user.
   */
  google.protobuf.Timestamp date_of_birth = 7;

  /*
   * The place of birth of the user.
   */
  PlaceOfBirth place_of_birth = 8;

  /*
   * The profile photo of the user, represented in bytes (binary data).
   */
  bytes photo = 9;

  /*
   * The user's communication preferences.
   */
  Preferences communication = 10;

  /*
   * The demographic information about the user.
   */
  Demographics demographics = 11;

  /*
   * The education qualification details about the user.
   */
  Education education = 12;

  /*
   * The user's employment identification details.
   */
  EmployeeIdentity employee_identity = 13;

  /*
   * The primary contact information for the user.
   */
  ContactInfo primary_contact_info = 14;

  /*
   * The user's emergency contact information.
   */
  EmergencyContact emergency_contact = 15;

  /*
   * Details about the user's pharmacy of choice.
   */
  Pharmacy pharmacy_details = 16;

  /*
   * A list of identifiers for user's dependents.
   */
  repeated string dependent_id = 17;

  /*
   * A list of known allergies of the user.
   */
  repeated KnownAllergy known_allergies = 18;

  /*
   * Indicates the active/inactive status of the user.
   */
  bool is_active = 19;

  /*
   * A list of user's email addresses.
   */
  repeated EmailAddress email = 20;

  /*
   * A list of user's phone numbers.
   */
  repeated PhoneNumber phone = 21;

  /*
   * A list of user's addresses.
   */
  repeated Address address = 22;

  /*
   * The timestamp indicating when the user's profile was created.
   */
  optional google.protobuf.Timestamp created = 23;

  /*
   * The timestamp indicating the last modification of the user's profile.
   */
  optional google.protobuf.Timestamp modified = 24;

  /*
   * The identifier of the entity that created the user's profile.
   */
  optional string creator = 25;

  /*
   * The identifier of the entity that last modified the user's profile.
   */
  optional string modifier = 26;
}
/*
 * Contains the emergency contact's relationship to the user and contact information.
 */
message EmergencyContact {
  /*
   * Describes the emergency contact's relationship to the user
   */
  string relationship = 1;
  /*
   * Details of the emergency contact including phone number, email address, etc.
   */
  ContactInfo contact_info = 2;
}
/*
 * Contains data related to a pharmacy including the name, address and contact information.
 */
message Pharmacy {
  /*
   * The name of the pharmacy
   */
  string pharmacy_name = 1;
  /*
   * Physical location of the pharmacy
   */
  Address pharmacy_address = 2;
  /*
   * Pharmacy's contact details such as phone number or email address
   */
  ContactInfo pharmacy_contact = 3;
}
/*
 * Describes the user's communication preferences including preferred language and time zone,
 * and a boolean flag for preferred mode of communication.
 */
message Preferences {
  /*
   * Preferred language for communication (e.g., English, Spanish, etc.)
   */
  string language = 1;
  /*
   * Flag indicating whether the user prefers this mode of communication
   */
  bool preferred = 2;
  /*
   * The user's preferred time zone (e.g., EST, PST, etc.)
   */
  string time_zone = 3;
}
/*
 * Contains demographic information of the user such as ethnicity, race, nationality and gender.
 */
message Demographics {
  /*
   * The user's ethnicity
   */
  string ethnicity = 1;
  /*
   * The user's race
   */
  string race = 2;
  /*
   * The user's country of citizenship
   */
  string nationality = 3;
  /*
   * The user's gender
   */
  Gender gender = 4;
}
/*
 * Contains information about the user's place of birth.
 */
message PlaceOfBirth {
  /*
   * The country where the user was born
   */
  string country = 1;
  /*
   * The state or region where the user was born
   */
  string state = 2;
  /*
   * The city where the user was born
   */
  string city = 3;
}

/*
 * Contains the user's education history.
 */
message Education {
  /*
   * A list of education entries each containing data about a degree, the educational institution and duration of study
   */
  repeated EducationEntry entries = 1;
}

/*
 * Represents a single educational institution where the user studied, the degree obtained there and the duration of study.
 */
message EducationEntry {
  /*
   * The degree obtained (e.g., Bachelor's, Master's, etc.)
   */
  string degree = 1;
  /*
   * The name of the educational institution
   */
  string institution = 2;
  /*
   * The date when the user started studying at this institution
   */
  string start_date = 3;
  /*
   * The date when the user completed their studies at this institution
   */
  string completion_date = 4;
}

/*
 * Contains identity related information about an employee.
 */
message EmployeeIdentity {
  /*
   * Identifier for the employee's organization
   */
  string organization_id = 1;
  /*
   * Identifier for the employee's workspace
   */
  string workspace_id = 2;
  /*
   * Identifier for the employee
   */
  string employee_id = 3;
  /*
   * Flag indicating whether the employee's identity has been verified
   */
  bool identity_verified = 4;
  /*
   * Current employment status of the employee (e.g., Economically Active, Retired, etc.)
   */
  string status = 5;
}

/*
 * Represents system settings for a user including identity verification,
 * email verification, notifications settings, biometrics setting,
 * registration date, multi-factor authentication settings,
 * and last login information.
 */
message SystemSettings {
  /*
   * Flag indicating whether the user's identity has been verified
   */
  bool identity_verified = 1;
  /*
   * Flag indicating whether the user's email address has been verified
   */
  bool email_verified = 2;
  /*
   * Flag indicating whether SMS notifications are enabled for the user
   */
  bool sms_notifications = 3;
  /*
   * Flag indicating whether email notifications are enabled for the user
   */
  bool email_notifications = 4;
  /*
   * Flag indicating whether biometric authentication is enabled for the user
   */
  bool biometrics = 5;
  /*
   * The user's registration date
   */
  bool user_since = 6;
  /*
   * Flag indicating whether multi-factor authentication (MFA) is enabled for the user
   */
  bool mfa = 7;
  /*
   * Date and time of the user's last successful login
   */
  string last_successful_login = 8;
  /*
   * Date and time of the user's last failed login attempt
   */
  string last_failed_login = 9;
}



/*
 * Represents information about a known allergy including the allergen,
 * description of the reaction, a boolean flag for severity, date of onset,
 * date of last occurrence, and additional notes.
 */
message KnownAllergy {
  /*
   * The substance that causes the allergic reaction
   */
  string allergen = 1;
  /*
   * Description of what happens when the user is exposed to the allergen
   */
  string reaction = 2;
  /*
   * A flag indicating the severity of the allergic reaction
   */
  bool is_severe = 3;
  /*
   * The date when the allergic reaction first occurred
   */
  string onset_date = 4;
  /*
   * The date of the most recent occurrence of the allergic reaction
   */
  string last_occurrence = 5;
  /*
   * Additional information about the allergy
   */
  string notes = 6;
}


/*
 * UserProfileRequest is the message format for the request to retrieve a user profile.
 * It contains a unique user_id to identify the user whose profile needs to be retrieved.
 */
message UserProfileRequest {
  /*
   * Unique identifier for the user
   */
  string user_id = 1;
}

/*
 * UserProfileResponse is the message format for the response following a request to retrieve a user profile.
 * It contains the user_profile, which contains the profile details of the requested user.
 */
message UserProfileResponse {
  /*
   * User's profile information
   */
  UserProfile user_profile = 1;
}

/*
 * UpdateUserProfileRequest is the message format for the request to update a user profile.
 * It contains a user_id to identify the user whose profile needs to be updated,
 * and updated_profile with the new profile details.
 */
message UpdateUserProfileRequest {
  /*
   * Unique identifier for the user
   */
  string user_id = 1;

  /*
   * Updated user profile information
   */
  UserProfile updated_profile = 2;
}

/*
 * UpdateUserProfileResponse is the message format for the response following a request to update a user profile.
 * It contains a boolean success which will be true if the update operation was successful.
 */
message UpdateUserProfileResponse {
  /*
   * Indicates whether the update was successful
   */
  bool success = 1;
}

/*
 * This message contains the details required for creating a User Profile.
 */
message CreateUserProfileRequest {
  /*
   * The UserProfile object with the details for the user profile that will be created.
   */
  optional UserProfile userProfile = 1;
}

/*
 * This message contains the details of the User Profile that has been created.
 */
message CreateUserProfileResponse {
  /*
   * The created User Profile object.
   */
  optional UserProfile userProfile = 1;
}

/*
 * DeleteUserProfileRequest is the message format for the request to delete a user profile.
 * It contains a user_id to identify the user whose profile needs to be deleted.
 */
message DeleteUserProfileRequest {
  /*
   * Unique identifier for the user
   */
  string user_id = 1;
}

/*
 * DeleteUserProfileResponse is the message format for the response following a request to delete a user profile.
 * It contains a boolean success which will be true if the delete operation was successful.
 */
message DeleteUserProfileResponse {
  /*
   * Indicates whether the delete was successful
   */
  bool success = 1;
}

/*
 * Defines entities for the Routine System.
 * The main categories specified here are routines and their statuses.
 *
 */
message Routine {
  

  /*
   * Holds the unique identifier assigned to each routine process
   */
  optional string routine_id = 1;

  /*
   * Stores the name or title assigned to the routine process
   */
  optional string name = 2;

  /*
   * Holds a brief description providing further details about the routine
   */
  optional string description = 3;

  /*
   * Represents the status, indicating the current state of the routine
   */
  RoutineStatus  status = 4;

  /*
   * Stores the timestamp for when the routine was created
   */
  google.protobuf.Timestamp creation_datetime = 5;

  /*
   * Stores the timestamp for the most recent update made to the routine
   */
  google.protobuf.Timestamp last_updated_datetime = 6;

  /*
   * Holds the information about the user or team responsible for execution of the routine
   */
  optional string assigned_user = 7;

  /*
   * Defines an array to store references to any clinical protocols that are linked with the routine
   */
  repeated string associated_protocols = 8;
}

/*
 * This Protocol Buffers (protobuf) message represents entities related to the execution of a Clinical Protocol.
 * A Clinical Protocol Execution details the process of undergoing a specific protocol in a clinical setup.
 */
message ClinicalProtocolExecution {

  /*
   * A unique identifier associated with this particular execution of a clinical protocol.
   */
  optional string execution_id = 1;
  /*
   * An ID that points to the routine that this clinical protocol execution is tied to.
   */
  optional string routine_id = 2;
  /*
   * The ID that links to the clinical protocol that is being executed.
   */
  optional string protocol_id = 3;
  /*
   * An enum value that represents the current status of this protocol execution.
   */
  optional ClinicalProtocolStatus status = 4;
  /*
   *  The date and time at which the protocol execution commenced.
   */
  google.protobuf.Timestamp start_datetime = 5;
  /*
   * The date and time at which the protocol execution ended.
   */
  google.protobuf.Timestamp end_datetime = 6;
  /*
   * Detailed information about the outcomes or results of the protocol execution.
   */
  optional string results = 7;
  /*
   * Any relevant information about the medical personnel overseeing this clinical protocol execution.
   */
  optional string assigned_medical_staff = 8;
  /*
   * A list of steps or procedures that encompass the clinical protocol.
   */
  repeated string steps = 9;
}

/*
 * This message represents a Laboratory Order entity used in creating conditions.
 * It includes both required and optional fields.
 */
message LabOrder {
  /*
   * This is a unique identifier assigned to each lab orders
   */
  optional string lab_order_id = 1;

  /*
   * This refers to the name of the lab test ordered
   */
  optional string test_name = 2;

  /*
   * This indicates when the lab order was made
   */
  google.protobuf.Timestamp order_datetime = 3;

  /*
   * This refers to the value set that triggered the creation of the eICR
   */
  optional string matched_value_set = 4;

  /*
   * Entities that are related to this lab order (e.g., Patients, Practitioners)
   */
  repeated string related_entities = 5;
}

/*
 * This message represents a Diagnosis entity.
 * It includes both required and optional fields.
 */
message Diagnosis {
  /*
   * This is a unique identifier for diagnosis
   */
  optional string diagnosis_id = 1;

  /*
   * This represents the diagnosis code assigned to the diagnosis
   */
  optional string diagnosis_code = 2;

  /*
   * This indicates when the diagnosis was made
   */
  google.protobuf.Timestamp diagnosis_datetime = 3;

  /*
   * This refers to the value set that triggered the creation of the eICR
   */
  optional string matched_value_set = 4;

  /*
   * Entities that are related to this diagnosis (e.g., Patients, Practitioners)
   */
  repeated string related_entities = 5;
}

/*
 * This message represents a Suspected Diagnosis entity.
 * It includes both required and optional fields.
 */
message SuspectedDiagnosis {
  /*
   * This is a unique identifier for suspected diagnosis
   */
  optional string suspected_diagnosis_id = 1;

  /*
   * This represents the diagnosis code assigned to the suspected diagnosis
   */
  optional string diagnosis_code = 2;

  /*
   * This indicates the time when the suspected diagnosis was made
   */
  google.protobuf.Timestamp diagnosis_datetime = 3;

  /*
   * This refers to the value set that triggered the creation of the eICR
   */
  optional string matched_value_set = 4;

  /*
   * Entities that are related to this suspected diagnosis (e.g., Patients, Practitioners)
   */
  repeated string related_entities = 5;
}

/*
 * This message represents a Laboratory Result entity.
 * It includes both required and optional fields.
 */
message LabResult {
  /*
   * This is a unique identifier for lab result
   */
  optional string result_id = 1;

  /*
   * This represents the value of the lab result
   */
  optional string result_value = 2;

  /*
   * This indicates when the lab result was generated
   */
  google.protobuf.Timestamp result_datetime = 3;

  /*
   * This is the value set that triggered the creation of the eICR
   */
  optional string matched_value_set = 4;

  /*
   * Entities that are related to this lab result (e.g., Patients, Lab Facilities)
   */
  repeated string related_entities = 5;
}



/*
 * The RoutineRequest message describing the request format for a Routine operation.
 * The field 'routine' holds the new routine information that needs to be created.
 */
message RoutineRequest {
  /*
   * Data structure for the routine details
   */
  Routine routine = 1;
}

/*
 * The RoutineResponse message represents the response format from the Routine operation.
 * The field 'routine' holds the created routine information.
 */
message RoutineResponse {
  /*
   * Newly created routine data
   */
  Routine routine = 1;
}

/*
 * Message for Requesting a Clinical Protocol Execution.
 */
message ClinicalProtocolExecutionRequest {
  /*
   * Details for the Clinical Protocol Execution.
   */
  ClinicalProtocolExecution clinical_protocol_execution = 1;
}

/*
 * Response message for the Clinical Protocol Execution Operation.
 */
message ClinicalProtocolExecutionResponse {
  /*
   * Resulting data from the Clinical Protocol Execution.
   */
  ClinicalProtocolExecution clinical_protocol_execution = 1;
}

/*
 * Lab Order Request message. Contains all the necessary information to create a Lab Order.
 */
message LabOrderRequest {
  /*
   * Lab order details
   */
  LabOrder lab_order = 1;
}

/*
 * Response message for the Lab Order creation operation.
 */
message LabOrderResponse {
  /*
   * Newly created lab order data
   */
  LabOrder lab_order = 1;
}

/*
 * Diagnosis Request message. Contains all the necessary information to create a Diagnosis record.
 */
message DiagnosisRequest {
  /*
   * Diagnosis details
   */
  Diagnosis diagnosis = 1;
}

/*
 * Response message for the Diagnosis creation operation.
 */
message DiagnosisResponse {
  /*
   * Created diagnosis data
   */
  Diagnosis diagnosis = 1;
}

/*
 * Message for Requesting a new Suspected Diagnosis record.
 */
message SuspectedDiagnosisRequest {
  /*
   * Data structure for suspected diagnosis
   */
  SuspectedDiagnosis suspected_diagnosis = 1;
}

/*
 * Response message after Suspected Diagnosis operation.
 */
message SuspectedDiagnosisResponse {
  /*
   * The suspected diagnosis data that was created
   */
  SuspectedDiagnosis suspected_diagnosis = 1;
}

/*
 * Request message for Lab Result operation which requires all necessary information to create Lab Result data.
 */
message LabResultRequest {
  /*
   * Lab result details
   */
  LabResult lab_result = 1;
}

/*
 * Response message to contain the created Lab Result from the CreateLabResult operation.
 */
message LabResultResponse {
  /*
   * Created lab result data
   */
  LabResult lab_result = 1;
}


/*
 * Contains information about a vaccine including administration date, FIPS code and location,
 * health district, facility type, dose number, and vaccine.
 */
message Vaccine {
  /*
   * ID
   */
  optional string id = 1;
  /*
   * Patient ID
   */
  string patient_id = 2;
  /*
   * National Health Identifier
   */
  string national_health_id = 3;
  /*
   * The date when the user was vaccinated
   */
  optional google.protobuf.Timestamp administration_date = 4;
  /*
   * The 5-digit Federal Information Processing Standards (FIPS) code for the vaccination locality
   */
  string fips = 5;
  /*
   * The city or county where the user lives
   */
  Address location = 6;
  /*
   * The health district assigned by the Virginia Department of Health
   */
  string health_district = 7;
  /*
   * The type of facility where the vaccine was administered (e.g., Hospital, Clinic, etc.)
   */
  string facility_type = 8;
  /*
   * The type of vaccine
  */
  Medication vaccine = 9;
  /*
   * The dose number of the vaccine
   */
  int32 dose_number = 10;
  /*
   * Creation timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp created = 11;
  /*
   * Modification timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp modified = 12;
  /*
   * Identifier of the creator of this record.
   */
  optional string creator = 13;
  /**
   * The user who last modified the Message.
   */
  optional string modifier = 14;
}

message GetVaccineByIdRequest {
  /*
   * The id of the vaccine to search for.
   */
  string id = 1;
  /*
   * Pagination information.
   */
  Pagination pagination = 2;
}

/*
 * Request message for listing vaccine by patient ID.
 */
message ListVaccinesRequest {

  oneof search {
    /*
   * The unique identifier for the patient.
   */
    string patient_id = 1;
    /*
   * The unique identifier for the patient's national health ID.
   */
    string national_health_id = 2;
  }
  /*
 * Pagination information.
 */
  Pagination pagination = 3;
}

/*
 * Response message for listing vaccines.
 */
message ListVaccinesResponse {
  /*
   * List of vaccines.
   */
  repeated Vaccine vaccine = 1;

  /*
   * Pagination information.
   */
  Pagination pagination = 2;
}


/*
 * Represents Height Measurement information.
 */
message HeightMeasurement {
  /*
   * ID
   */
  optional string id = 1;
  /*
   * Patient ID
   */
  string patient_id = 2;
  /*
   * National Health Identifier
   */
  string national_health_id = 3;
  /*
   * Height of the patient
   */
  double height = 4;
  /*
   * The unit of measurement for height. The value is an enum defined by the `HeightUnits` message.
   */
  HeightUnits units_of_measure = 5;
  /*
   * Timestamp when the vitals were taken.
   */
  optional google.protobuf.Timestamp time_of_measurement = 6;
  /*
   * Creation timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp created = 7;
  /*
   * Modification timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp modified = 8;
  /*
   * Identifier of the creator of this record.
   */
  optional string creator = 9;
  /**
   * The user who last modified the Message.
   */
  optional string modifier = 10;

}


/*
 * Represents Weight Measurement information.
 */
message WeightMeasurement {
  /*
   * ID
   */
  optional string id = 1;
  /*
   * Patient ID
   */
  string patient_id = 2;
  /*
   * National Health Identifier
   */
  string national_health_id = 3;
  /*
   * Weight of the patient
   */
  double weight = 4;
  /*
   * The unit of measurement for weight. The value is an enum defined by the `WeightUnits` message.
   */
  WeightUnits units_of_measure = 5;
  /*
   * Timestamp when the vitals were taken.
   */
  optional google.protobuf.Timestamp time_of_measurement = 6;
  /*
   * Creation timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp created = 7;
  /*
   * Modification timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp modified = 8;
  /*
   * Identifier of the creator of this record.
   */
  optional string creator = 9;
  /**
   * The user who last modified the Message.
   */
  optional string modifier = 10;

}

/*
 * Defines the BPM measure.
 */
message BPM {
  /*
   * ID
   */
  optional string id = 1;
  /*
   * Patient ID
   */
  string patient_id = 2;
  /*
   * National Health Identifier
   */
  string national_health_id = 3;
  /*
   * Cuff Size
   */
  CuffSize cuff_size = 4;
  /*
   * Arm Used
   */
  ArmUsed arm_used = 5;
  /*
   * Systolic BP
   */
  int32 systolic = 6;
  /*
   * Diastolic BP
   */
  int32 diastolic = 7;
  /*
   * BPM Units
   */
  BPMUnits unit = 8;
  /*
   * Sitting position 5 minutes
   */
  bool sitting_position_5_minutes = 9;
  /*
   * Urinated 30 minutes prior
   */
  bool urinated_30_minutes_prior = 10;
  /*
   * Timestamp when the vitals were taken.
   */
  optional google.protobuf.Timestamp time_of_measurement = 11;
  /*
   * Creation timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp created = 12;
  /*
   * Modification timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp modified = 13;
  /*
   * Identifier of the creator of this record.
   */
  optional string creator = 14;
  /**
   * The user who last modified the Message.
   */
  optional string modifier = 15;
}

/*
 * Defines the HeartRPM measure.
 */
message HeartRPM {
  /*
   * ID
   */
  optional string id = 1;
  /*
   * Patient ID
   */
  string patient_id = 2;
  /*
   * National Health Identifier
   */
  string national_health_id = 3;
  /*
   * Measurement taken over in seconds
   */
  int32 measurement_taken_over_in_seconds = 4;
  /*
   * Sitting position 5 minutes
   */
  bool sitting_position_5_minutes = 5;
  /*
   * Timestamp when the vitals were taken.
   */
  optional google.protobuf.Timestamp time_of_measurement = 6;
  /*
   * Creation timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp created = 7;
  /*
   * Modification timestamp of the measurement data.
   */
  optional google.protobuf.Timestamp modified = 8;
  /*
   * Identifier of the creator of this record.
   */
  optional string creator = 9;
  /**
   * The user who last modified the Message.
   */
  optional string modifier = 10;
}

/*
 * This message contains the details required for creating a health vitals info.
 */
message CreateHeightMeasurementRequest {
  /*
   * The Height Measurement
   */
  optional HeightMeasurement height_Measurement = 1;
}

/*
 * This message contains the response after creating a health vitals info.
 */
message CreateHeightMeasurementResponse {
  /*
   * The Height Measurement
   */
  optional HeightMeasurement height_Measurement = 1;
}

/*
 * This message contains the details required for creating a health vitals info.
 */
message GetHeightMeasurementRequest {
  /*
   * The Height Measurement id
   */
  string id = 1;
}

/*
 * This message contains the details required for fetching the Height Measurements info.
 */
message GetHeightMeasurementResponse {
  /*
   * The Height Measurement
   */
  optional HeightMeasurement height_Measurement = 1;
}

/*
 * This message contains the details required for updating a health vitals info.
 */
message UpdateHeightMeasurementRequest {
  /*
   * The Height Measurement
   */
  optional HeightMeasurement height_Measurement = 1;
}

/*
 * This message contains the details required for creating a health vitals info.
 */
message UpdateHeightMeasurementResponse {
  /*
   * The Height Measurement
   */
  optional HeightMeasurement height_Measurement = 1;
}

/*
 * This request to delete health vitals info.
 */
message DeleteHeightMeasurementRequest {
  /*
   * The Height Measurement id
   */
  string id = 1;
}

/*
 * Indicates whether the operation was successful.
 */
message SuccessResponse{
  /*
   * Indication of success. If true, the operation was successful. If false, the operation failed.
   */
  bool success = 1;
}

/*
 * This message contains the details required for listing health vitals info.
 */
message ListHeightMeasurementsRequest {
  oneof height_identifiers{
    /**
     * The ID of the patient.
     */
    string patient_id = 1;

    /**
     * The national health identifier
     */
    string national_health_id = 2;
  }

  /*
   * Start date.
   */
  optional google.protobuf.Timestamp start_date = 3;

  /*
   * End Date.
   */
  optional google.protobuf.Timestamp end_date = 4;

  /*
  * Pagination information and sorting.
  */
  Pagination pagination = 5;
}

/*
 * This is the response of the Height Measurement
 */
message ListHeightMeasurementsResponse {
  /*
  * Pagination information and sorting.
  */
  Pagination pagination = 1;
  /**
  * The list of Height Measurement.
  */
  repeated HeightMeasurement height_Measurement = 2;
}

/*
 * This message contains the details required for creating a health vitals info for weight.
 */
message CreateWeightMeasurementRequest {
  /*
   * The Weight Measurement
   */
  optional WeightMeasurement weight_Measurement = 1;
}

/*
 * This message contains the response after creating a health vitals info for weight.
 */
message CreateWeightMeasurementResponse {
  /*
   * The Weight Measurement
   */
  optional WeightMeasurement weight_Measurement = 1;
}

/*
 * This message contains the details required for creating a health vitals info for weight.
 */
message GetWeightMeasurementRequest {
  /*
   * The Weight Measurement id
   */
  string id = 1;
}

/*
 * This message contains the details required for fetching the Weight Measurements info.
 */
message GetWeightMeasurementResponse {
  /*
   * The Weight Measurement
   */
  optional WeightMeasurement weight_Measurement = 1;
}

/*
 * This message contains the details required for updating a health vitals info for weight
 */
message UpdateWeightMeasurementRequest {
  /*
   * The Weight Measurement
   */
  optional WeightMeasurement weight_Measurement = 1;
}

/*
 * This message contains the details required for creating a health vitals info for weight.
 */
message UpdateWeightMeasurementResponse {
  /*
   * The Weight Measurement
   */
  optional WeightMeasurement weight_Measurement = 1;
}

/*
 * This request to delete health vitals info for weight.
 */
message DeleteWeightMeasurementRequest {
  /*
   * The Weight Measurement id
   */
  string id = 1;
}

/*
 * This message contains the details required for listing health vitals info for weight.
 */
message ListWeightMeasurementsRequest {
  oneof weight_identifiers{
    /**
     * The ID of the patient.
     */
    string patient_id = 1;

    /**
     * The national health identifier
     */
    string national_health_id = 2;
  }

  /*
   * Start date.
   */
  optional google.protobuf.Timestamp start_date = 3;

  /*
   * End Date.
   */
  optional google.protobuf.Timestamp end_date = 4;

  /*
  * Pagination information and sorting.
  */
  Pagination pagination = 5;
}

/*
 * This is the response of the Weight Measurement
 */
message ListWeightMeasurementsResponse {
  /*
  * Pagination information and sorting.
  */
  Pagination pagination = 1;
  /**
  * The list of Height Measurement.
  */
  repeated WeightMeasurement weight_Measurement = 2;
}


/*
 * This message contains the details required for creating a health vitals info.
 */
message CreateBPMRequest {
  /*
   * The Blood Pressure Measurement
   */
  optional BPM bpm_Measurement = 1;
}

/*
 * This message contains the response after creating a health vitals info.
 */
message CreateBPMResponse {
  /*
   * The Blood Pressure Measurement
   */
  optional BPM bpm_Measurement = 1;
}

/*
 * This message contains the details required for creating a health vitals info.
 */
message GetBPMRequest {
  /*
   * The BPM id
   */
  string id = 1;
}

/*
 * This message contains the details required for fetching the BPM info.
 */
message GetBPMResponse {
  /*
   * The BPM
   */
  optional BPM bpm_Measurement = 1;
}

/*
 * This message contains the details required for updating a health vitals info.
 */
message UpdateBPMRequest {
  /*
   * The BPM
   */
  optional BPM bpm_Measurement = 1;
}

/*
 * This message contains the details required for creating a health vitals info.
 */
message UpdateBPMResponse {
  /*
   * The BPM
   */
  optional BPM bpm_Measurement = 1;
}

/*
 * This request to delete health vitals info.
 */
message DeleteBPMRequest {
  /*
   * The BPM id
   */
  string id = 1;
}

/*
 * This message contains the details required for listing health vitals info.
 */
message ListBPMRequest {
  oneof bpm_identifiers{
    /**
     * The ID of the patient.
     */
    string patient_id = 1;

    /**
     * The national health identifier
     */
    string national_health_id = 2;
  }

  /*
   * Start date.
   */
  optional google.protobuf.Timestamp start_date = 3;

  /*
   * End Date.
   */
  optional google.protobuf.Timestamp end_date = 4;

  /*
  * Pagination information and sorting.
  */
  Pagination pagination = 5;
}

/*
 * This is the response of the BPM
 */
message ListBPMResponse {
  /*
  * Pagination information and sorting.
  */
  Pagination pagination = 1;
  /**
  * The list of BPM.
  */
  repeated BPM bpm_Measurement = 2;
}

/*
 * This message contains the details required for creating a health vitals info.
 */
message CreateHeartRPMRequest {
  /*
   * The Blood Pressure Measurement
   */
  optional HeartRPM heart_rpm_Measurement = 1;
}

/*
 * This message contains the response after creating a health vitals info.
 */
message CreateHeartRPMResponse {
  /*
   * The Blood Pressure Measurement
   */
  optional HeartRPM heart_rpm_Measurement = 1;
}

/*
 * This message contains the details required for creating a health vitals info.
 */
message GetHeartRPMRequest {
  /*
   * The HeartRPM id
   */
  string id = 1;
}

/*
 * This message contains the details required for fetching the HeartRPM info.
 */
message GetHeartRPMResponse {
  /*
   * The HeartRPM
   */
  optional HeartRPM heart_rpm_Measurement = 1;
}

/*
 * This message contains the details required for updating a health vitals info.
 */
message UpdateHeartRPMRequest {
  /*
   * The HeartRPM
   */
  optional HeartRPM heart_rpm_Measurement = 1;
}

/*
 * This message contains the details required for creating a health vitals info.
 */
message UpdateHeartRPMResponse {
  /*
   * The HeartRPM
   */
  optional HeartRPM heart_rpm_Measurement = 1;
}

/*
 * This request to delete health vitals info.
 */
message DeleteHeartRPMRequest {
  /*
   * The HeartRPM id
   */
  string id = 1;
}

/*
 * This message contains the details required for listing health vitals info.
 */
message ListHeartRPMRequest {
  oneof heart_rpm_identifiers{
    /**
     * The ID of the patient.
     */
    string patient_id = 1;

    /**
     * The national health identifier
     */
    string national_health_id = 2;
  }

  /*
   * Start date.
   */
  optional google.protobuf.Timestamp start_date = 3;

  /*
   * End Date.
   */
  optional google.protobuf.Timestamp end_date = 4;

  /*
  * Pagination information and sorting.
  */
  Pagination pagination = 5;
}

/*
 * This is the response of the HeartRPM
 */
message ListHeartRPMResponse {
  /*
  * Pagination information and sorting.
  */
  Pagination pagination = 1;
  /**
  * The list of HeartRPM.
  */
  repeated HeartRPM heart_rpm_Measurement = 2;
}

/*
 * The `Organization` message defines the data fields and structure for an organization entity.
 */
message Organization {
  /*
   * A unique string identifier for the organization
   */
  optional string id = 1;
  /*
   * Contains the official name of the organization
   */
  optional string name = 2;
  /*
   * Briefly describes the organization
   */
  optional string description = 3;
  /*
   * Represents the date when the organization was founded
   */
  optional google.protobuf.Timestamp founding_date = 4;
  /*
   * Captures the physical address of the organization
   */
  optional Address address = 5;
  /*
   * Contains the official website URL of the organization
   */
  optional string website = 6;
  /*
   * Represents the industry or sector that the organization belongs to
   */
  optional string industry = 7;
  /*
   * Specifies the annual revenue generated by the organization
   */
  optional double revenue = 8;
  /*
   * Contains the URL to the organization's logo
   */
  optional string logo_url = 9;
  /*
   * Maintains the list of all social media profile links of the organization
   */
  repeated string social_media_links = 10;
  /*
   * Contains the mission statement of the organization
   */
  optional string mission_statement = 11;
  /*
   * Contains the vision statement of the organization
   */
  optional string vision_statement = 12;
  /*
   * Stores the contact information for the organization
   */
  repeated ContactInfo contacts = 13;
  /*
   * Record of the timestamp when this instance of the organization was created
   */
  optional google.protobuf.Timestamp created = 14;
  /*
   * Record of the timestamp when this instance of the organization was last modified
   */
  optional google.protobuf.Timestamp modified = 15;
  /*
   * Denotes the ID of the user who created this organization instance
   */
  optional string creator = 16;
  /*
   * Denotes the ID of the user who last modified this organization instance
   */
  optional string modifier = 17;
}
/*
 * The `Workspace` message outlines the properties associated with workspace entity owned by an organization.
 */
message Workspace {
  /*
   * A unique string identifier for the workspace
   */
  optional string id = 1;

  /*
   * Contains the official name of the workspace
   */
  optional string name = 2;

  /*
   * Briefly describes the workspace
   */
  optional string description = 3;

  /*
   * Refers to the ID of the organization that owns this workspace
   */
  string organization_id = 4;

  /*
   * Represents the date when the workspace was created
   */
  optional google.protobuf.Timestamp created_date = 5;

  /*
   * Captures the physical location of the workspace
   */
  optional string location = 6;

  /*
   * Denotes the name of the workspace manager
   */
  optional string manager = 7;

  /*
   * Specifies the maximum capacity of the workspace
   */
  optional int32 capacity = 8;

  /*
   * List of facilities available within the workspace
   */
  repeated string facilities = 9;

  /*
   * Specifies the type of workspace (e.g., office, co-working space)
   */
  optional string workspace_type = 10;

  /*
   * Stores URLs to images of the workspace
   */
  repeated string workspace_image_urls = 11;

  /*
   * Contains the policies and rules for using the workspace
   */
  optional string usage_policy = 12;

  /*
   * Schedule of when the workspace is available for use
   */
  optional string availability_schedule = 13;

  /*
   * List of departments within the workspace
   */
  repeated Department departments = 14;

  /*
   * Record of the timestamp when this workspace instance was created
   */
  optional google.protobuf.Timestamp created = 15;

  /*
   * Record of the timestamp when this workspace instance was modified
   */
  optional google.protobuf.Timestamp modified = 16;

  /*
   * Denotes the ID of the user who created this workspace instance
   */
  optional string creator = 17;

  /*
   * Denotes the ID of the user who last modified this workspace instance
   */
  optional string modifier = 18;
}

/*
 * The `Department` message encapsulates the information about a department within an organization or workspace.
 */
message Department {
  /*
   * A unique string identifier for the department
   */
  optional string id = 1;

  /*
   * Contains the official name of the department
   */
  optional string name = 2;

  /*
   * Briefly describes the department
   */
  optional string description = 3;

  /*
   * List of employees working within the department
   */
  repeated Employee employees = 4;
}

/*
 * The `Employee` message captures identification and contact details for an employee.
 */
message Employee {
  /*
   * A unique string identifier for the employee
   */
  optional string employee_id = 1;

  /*
   * Contains the full name of the employee
   */
  optional FullName name = 2;

  /*
   * Describes the title or position of the employee within the organization
   */
  optional string title = 3;

  /*
   * List of the employee's phone numbers
   */
  repeated PhoneNumber phone_numbers = 4;

  /*
   * Contains the email address of the employee
   */
  repeated EmailAddress email = 5;
}

/*
 * This message serves as a placeholder for methods that do not require any input parameters.
 * It's an empty message often used in RPC methods where no request data is to be sent.
 */
message Empty {}

/*
 * This message contains the details required for creating an organization. It encapsulates the organization to be created.
 */
message CreateOrganizationRequest {
  /*
   * The organization object with the details for the organization that will be created.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the details of the organization that has been created. It encapsulates the organization created.
 */
message CreateOrganizationResponse {
  /*
   * The created organization object with the details of the new organization.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the unique identifier of an organization. It is used to request the details of a specific organization.
 */
message GetOrganizationDetailsByIdRequest {
  /*
   * The unique identifier for the organization whose details are being requested.
   */
  optional string organization_id = 1;
}

/*
 * This message contains the details of the organization retrieved. It encapsulates the organization details.
 */
message GetOrganizationDetailsByIdResponse {
  /*
   * The organization object with the retrieved details of the organization.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the updated details of an organization for a request to update an organization.
 */
message UpdateOrganizationRequest {
  /*
   * The organization object with the updated details for the organization that will be updated.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the updated details of the organization that has been updated.
 */
message UpdateOrganizationResponse {
  /*
   * The updated organization object with the revised details of the organization.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the list of organizations. It is the response message for a request to list all organizations.
 */
message ListOrganizationsResponse {
  /*
   * An array of organization objects which include the details of all organizations.
   */
  repeated Organization organizations = 1;
}

/*
 * This message contains the details required for creating a workspace within an organization.
 */
message CreateWorkspaceRequest {
  /*
   * The workspace object with the details for the workspace that will be created.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the details of the workspace that has been created within an organization.
 */
message CreateWorkspaceResponse {
  /*
   * The created workspace object including the details of the new workspace.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the unique identifier for a workspace. It is used to request the details of a specific workspace.
 */
message GetWorkspaceDetailsByIdRequest {
  /*
   * The unique identifier for the workspace whose details are being requested.
   */
  optional string workspace_id = 1;
}

/*
 * This message contains the details of the requested workspace.
 */
message GetWorkspaceDetailsByIdResponse {
  /*
   * The workspace object with the retrieved details of the workspace.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the updated details of a workspace. It's used for a request to update a workspace.
 */
message UpdateWorkspaceRequest {
  /*
   * The workspace object with the updated details for the workspace that will be updated.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the updated details of the workspace that has been updated.
 */
message UpdateWorkspaceResponse {
  /*
   * The updated workspace object with the revised details of the workspace.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the list of all workspaces within an organization. It is the response message for a request to list all workspaces.
 */
message ListWorkspacesResponse {
  /*
   * An array of workspace objects which includes the details of all workspaces within an organization.
   */
  repeated Workspace workspaces = 1;
}


/*
 * Defines a request to log in with a username and password.
 */
message LoginRequest {
  /*
   * The username of the user.
   */
  string user_name = 1;
  /*
   * The password of the user.
   */
  string password = 2;
}

/*
 * Defines a response that holds a JWT token for authorizing future requests.
 */
message LoginResponse {
  /*
   * The JWT token.
   */
  string token = 1;
}

/*
 * Represents a request to get the current user. This message doesn't contain any fields.
 */
message CurrentUserRequest {
}

/*
 * Defines a response that returns the current user's data.
 */
message CurrentUserResponse {
  /*
   * Information about the current user.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a request to create a new IAM user.
 */
message SignUpRequest {
  /*
   * The type of the user.
   */
  IamUserType type = 1;
  /*
   * The user's first name.
   */
  string first_name = 2;
  /*
   * The user's last name.
   */
  string last_name = 3;
  /*
   * The system's name.
   */
  string system_name = 4;
  /*
   * The username of the new user.
   */
  string username = 5;
  /*
   * The password for the new user.
   */
  string password = 6;
}

/*
 * Defines a response that contains the data of the created IAM user.
 */
message SignUpResponse {
  /*
   * Information about the new user.
   */
  IamUser iam_user = 1;
}

/*
 * Represents a request to list IAM users with pagination and sorting.
 */
message ListIamUsersRequest {
  /*
   * Details for pagination and sorting.
   */
  Pagination pagination = 1;
}

/*
 * Defines a response that contains a list of IAM users.
 */
message ListIamUsersResponse {
  /*
   * Pagination results.
   */
  Pagination pagination = 1;
  /*
   * List of fetched IAM users.
   */
  repeated IamUser iam_users = 2;
}

/*
 * Defines a request to fetch an IAM user by their user ID.
 */
message GetIamUserRequest {
  /*
   * ID of the user to fetch.
   */
  string id = 1;
}

/*
 * Defines a response that contains the fetched IAM user's data.
 */
message GetIamUserResponse {
  /*
   * Information about the fetched user.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a request to update an IAM user's data.
 */
message UpdateIamUserRequest {
  /*
   * The user's updated data.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a response that contains the data of the updated IAM user.
 */
message UpdateIamUserResponse {
  /*
   * Information about the updated user.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a request to change an IAM user's password.
 */
message ChangePasswordRequest {
  /*
   * The ID of the user to update.
   */
  string id = 1;
  /*
   * The user's current password.
   */
  string old_password = 2;
  /*
   * The user's new password.
   */
  string new_password = 3;
  /*
   * Confirmation of the new password.
   */
  string new_password_confirmation = 4;
}

/*
 * Defines a response that contains the updated IAM user's data.
 */
message ChangePasswordResponse {
  /*
   * Information about the updated user.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a request to delete an IAM user by their ID.
 */
message DeleteIamUserRequest {
  /*
   * ID of the user to delete.
   */
  string id = 1;
}

/*
 * Defines a response that contains the data of the deleted IAM user.
 */
message DeleteIamUserResponse {
  /*
   * Information about the deleted user.
   */
  IamUser iam_user = 1;
}

/*
 * Represents a request to check if an IAM user exists by their ID.
 */
message UserExistsRequest {
  /*
   * The ID of the user to check.
   */
  string id = 1;
}

/*
 * Defines a response that indicates whether the user exists.
 */
message UserExistsResponse {
  /*
   * The user's data if they exist.
   */
  IamUser iam_user = 1;
}

/*
 * Represents an IAM user.
 */
message IamUser {
  /*
   * The unique ID of the user.
   */
  optional string id = 1;
  /*
   * The name of the system for System Users.
   */
  string system_name = 2;
  /*
   * The username of the user.
   */
  string username = 3;
  /*
   * Indicates whether the user's email has been verified.
   */
  bool email_verified = 4;
  /*
   * The current status of the user.
   */
  IamUserStatus status = 5;
  /*
   * The type of the user.
   */
  IamUserType type = 6;
  /*
   * The timestamp when the user was created.
   */
  optional google.protobuf.Timestamp created = 7;
  /*
   * The timestamp when the user was last modified.
   */
  optional google.protobuf.Timestamp modified = 8;
  /*
   * The ID of the user who created this user.
   */
  optional string creator = 9;
  /*
   * The ID of the user who last modified this user.
   */
  optional string modifier = 10;
}

/*
 * Manufacturer is a data structure that captures all the relevant information about a certain manufacturer.
 */
message Manufacturer {
  /*
   * An optional field representing the unique identifier of the manufacturer.
   */
  optional string id = 1;

  /*
   * The name of the manufacturer.
   */
  string name = 2;

  /*
   * The physical address/office location of the manufacturer.
   */
  Address manufacturer_address = 3;

  /*
   * Detailed contact information of the manufacturer including name of contact, position, etc.
   */
  ContactInfo manufacturer_contact = 4;

  /*
   * The email address used for formal communications with the manufacturer.
   */
  EmailAddress manufacturer_email = 5;

  /*
   * The phone number used to get in touch with the manufacturer.
   */
  PhoneNumber manufacturer_phone = 6;

  /*
   * The official website of the manufacturer.
   */
  string manufacturer_website = 7;

  /*
   * A brief description about the manufacturer.
   */
  string manufacturer_description = 8;

  /*
   * A list of all the certifications that the manufacturer holds.
   * This is repeated as there can be multiple certifications.
   */
  repeated string manufacturer_certifications = 9;

  /*
   * The timestamp capturing when this particular Manufacturer instance was created.
   * This is optional, and might not be present at all.
   */
  optional google.protobuf.Timestamp created = 10;

  /*
   * The timestamp capturing any modifications to the Manufacturer instance.
   * Similar to 'created', this too is optional.
   */
  optional google.protobuf.Timestamp modified = 11;

  /*
   * The ID of the user who initially created this Manufacturer instance.
   * Another optional field.
   */
  optional string creator = 12;

  /*
   * The ID of the user who made the most recent modifications to this Manufacturer instance.
   * This field is also optional.
   */
  optional string modifier = 13;

  /*
   * A list of category types that this manufacturer falls under.
   * Can be one or more, hence marked as repeated.
   */
  repeated CategoryType category_type = 14;
}
/*
 * Vendor is a protobuf message type used to represent a vendor.
 */
message Vendor {

  /*
   * ID of the vendor. This field is optional.
   */
  optional string id = 1;

  /*
   * The name of the vendor.
   */
  string vendor_name = 2;

  /*
   * This describes the physical location of the vendor.
   * It uses `Address` message type from `cdx.opencdx.grpc.common`.
   */
  Address vendor_address = 3;

  /*
   * Contains contact information of the vendor (like name, title etc.)
   * in `ContactInfo` message type from `cdx.opencdx.grpc.common`.
   */
  ContactInfo vendor_contact = 4;

  /*
   * An EmailAddress message type from `cdx.opencdx.grpc.common`
   * which represents vendor's email address.
   */
  EmailAddress vendor_email = 5;

  /*
   * A PhoneNumber message type from `cdx.opencdx.grpc.common` representing vendor's phone number.
   */
  PhoneNumber vendor_phone = 6;

  /*
   * The URL of the vendor's website.
   */
  string vendor_website = 7;

  /*
   * A description of the vendor.
   */
  string vendor_description = 8;

  /*
   * Contains list of certifications this vendor possesses.
   * Multiple elements are allowed.
   */
  repeated string vendor_certifications = 9;

  /*
   * This is a timestamp from `google.protobuf`
   * which indicates the creation time of this record.
   */
  optional google.protobuf.Timestamp created = 10;

  /*
   * This is a timestamp from `google.protobuf`
   * which indicates the last modification time of this record.
   */
  optional google.protobuf.Timestamp modified = 11;

  /*
   * ID of the user who created this record. This field is optional.
   */
  optional string creator = 12;

  /*
   * ID of the user who last modified this record. This field is optional.
   */
  optional string modifier = 13;

  /*
   * Contains list of categories the vendor can be bucketed into.
   * Multiple elements are allowed.
   * It uses `CategoryType` type from `types`.
   */
  repeated CategoryType category_type = 14;
}

/*
 * This message "Device" represents an individual device. Each device has
 * unique characteristics such as model, manufacturer, vendor, batch number,
 * type, etc. Some of the fields in this message are related to the tests
 * performed on this device (if any), and others provide information about
 * its production, distribution, documentation, and digital files (if any).
 */
message Device {
  /*
   * Unique identifier for the device
   */
  optional string id = 1;

  /*
   * Specifies the type of the device
   */
  string type = 2;

  /*
   * Model name of the device manufactured
   */
  string model = 3;

  /*
   * Unique identifier for the manufacturer of the device
   */
  string manufacturer_id = 4;

  /*
   * Unique identifier for the country of the manufacturer
   */
  string manufacturer_country_id = 5;

  /*
   * Unique identifier for the vendor of the device
   */
  string vendor_id = 6;

  /*
   * Unique identifier for the country of the vendor
   */
  string vendor_country_id = 7;

  /*
   * Timestamp representing the manufacturing date of the device
   */
  google.protobuf.Timestamp manufacture_date = 8;

  /*
   * Timestamp representing the expiry date of the device
   */
  google.protobuf.Timestamp expiry_date = 9;

  /*
   * Unique batch number assigned during device production
   */
  string batch_number = 10;

  /*
   * The unique serial number of each individual device
   */
  string serial_number = 11;

  /*
   * Unique identifier for the type of test performed on the device
   */
  string test_type_id = 12;

  /*
   * Sensitivity metric from the test results
   */
  double test_sensitivity = 13;

  /*
   * Specificity metric from the test results
   */
  double test_specificity = 14;

  /*
   * Unique identifier for the LIDR (Laboratory Interoperability Data Repository id) of the device
   */
  optional string lidr_id = 15;

  /*
   * Details about storage conditions required for the device
   */
  string storage_requirements = 16;

  /*
   * Timestamp representing the validation date of the test performed on the device
   */
  google.protobuf.Timestamp test_validation_date = 17;

  /*
   * Current status of device approval
   */
  string approval_status = 18;

  /*
   * URL providing more information about the device
   */
  string url = 19;

  /*
   * Additional notes or comments about the device
   */
  string notes = 20;

  /*
   * Safety measures or precautions related to the device
   */
  string safety = 21;

  /*
   * Guidelines or instructions for users to handle or operate the device
   */
  string user_instructions = 22;

  /*
   * Constraints or limitations of the device
   */
  string limitations = 23;

  /*
   * Information about the warranty provided for the device
   */
  string warranty_info = 24;

  /*
   * Recommended minimum age for the device usage
   */
  int32 intended_use_age = 25;

  /*
   * Boolean flag indicating if the device is FDA authorized or not
   */
  bool is_fda_authorized = 26;

  /*
   * Current status or condition of the device
   */
  string device_status = 27;

  /*
   * Software version associated with the device, if any
   */
  string associated_software_version = 28;

  /*
   * List of identifiers for the test cases this device is involved in, if any
   */
  repeated string test_case_ids = 29;

  /*
   * Name used to identify the device
   */
  string name = 30;

  /*
   * A brief description about the device
   */
  string short_description = 31;

  /*
   * Detailed description of the device
   */
  string description = 32;

  /*
   * Timestamp when this event was created.
   */
  optional google.protobuf.Timestamp created = 33;

  /*
   * Timestamp when this event was modified.
   */
  optional google.protobuf.Timestamp modified = 34;

  /*
   * ID of the creator of this event.
   */
  optional string creator = 35;

  /*
   * ID of the person who last modified this event.
   */
  optional string modifier = 36;

  /*
   * List of categories that this device belongs to, using a custom type 'CategoryType'
   */
  repeated CategoryType category_type = 37;

  /*
   * QR code that links to the device's digital documentation or files
   */
  optional string qr_scan_code = 38;

  /*
   * SKU (Stock Keeping Unit) identifier, for inventory tracking purposes
   */
  optional string sku = 39;
}

/*
 * The TestCase message encapsulates the information related to a specific test case or a package of tests.
 */
message TestCase {
  /*
   * The unique identifier of the test case.
   */
  optional string id = 1;

  /*
   * The unique identifier of the manufacturer of the test case.
   */
  optional string manufacturer_id = 2;

  /*
   * The unique identifier of the vendor who supplies the test case.
   */
  optional string vendor_id = 3;

  /*
   * The list of unique identifiers of devices that are tested by the test case.
   */
  repeated string device_ids = 4;

  /*
   * The total count of tests encapsulated in this test case.
   */
  int32 number_of_tests = 5;

  /*
   * The date on which the test case was packaged.
   */
  google.protobuf.Timestamp packaging_date = 6;

  /*
   * The date on which the test case expires and is no longer fit for use.
   */
  google.protobuf.Timestamp expiry_date = 7;

  /*
   * The unique identifier of the batch which includes this test case.
   */
  string batch_number = 8;

  /*
   * The unique serial number of the test case.
   */
  string serial_number = 9;

  /*
   * Guidelines on how to properly store the test case.
   */
  string storage_requirements = 10;

  /*
   * The instructions about how to use the test case.
   */
  string user_instructions = 11;

  /*
   * All limitations or restrictions associated with the usage of test case.
   */
  string limitations = 12;

  /*
   * Safety guidelines to prevent improper or harmful usage of the test case.
   */
  string safety = 13;

  /*
   * Unique identifier for the LIDR (Laboratory Interoperability Data Repository id) of the device
   */
  optional string lidr_id = 14;

  /*
   * The date and time when this test case was created.
   */
  optional google.protobuf.Timestamp created = 15;

  /*
   * The date and time when the test case was last modified.
   */
  optional google.protobuf.Timestamp modified = 16;

  /*
   * The unique identifier of the user who created this test case.
   */
  optional string creator = 17;

  /*
   * The unique identifier of the user who last modified this test case.
   */
  optional string modifier = 18;

  /*
   * A list of categories applicable to this test case. Uses a custom data type.
   */
  repeated CategoryType category_type = 19;

  /*
   * The Quick Response (QR) code that can be scanned to access more information about this test case.
   */
  optional string qr_scan_code = 20;

  /*
   * The Stock Keeping Unit (SKU) that is used to track the inventory of this test case.
   */
  optional string sku = 21;
}



/*
 * Request Message to list TestCaseListRequest. This helps
 * fetching multiple test data for a user, leveraging pagination.
 */
message TestCaseListRequest {
  /*
   * Pagination information and sorting. Used to fetch a batch of tests for a user rather than all.
   */
  Pagination pagination = 1;
  /*
   * Unique identifier
   */
  optional string manufacturer_id = 2;
  optional string vendor_id = 3;
}

/*
 * Response containing the requested list of connected tests for a specific user.
 * The response includes details of all connected tests for a user.
 */
message TestCaseListResponse {
  /*
   * Pagination information and sorting.
   */
  Pagination pagination = 1;
  repeated TestCase test_cases = 2;
}

/*
 * Request Message to list Devices. This helps
 * fetching multiple test data for a user, leveraging pagination.
 */
message DeviceListRequest {
  /*
   * Pagination information and sorting. Used to fetch a batch of devices.
   */
  Pagination pagination = 1;
  /*
   * Unique identifier
   */
  optional string manufacturer_id = 2;
  optional string vendor_id = 3;
}

/*
 * Response containing the requested list of devices for a specific user.
 * The response includes details of all devices.
 */
message DeviceListResponse {
  /*
   * Pagination information and sorting.
   */
  Pagination pagination = 1;
  repeated Device device = 2;
}

/*
 * The CountryIdRequest is a request message used to retrieve a country by its specific ID.
 */
message CountryIdRequest {
  /*
   * The ID of the country to be fetched.
   */
  string country_id = 1;
}

/*
 * The ManufacturerIdRequest is a request message used to retrieve a manufacturer by its specific ID.
 */
message ManufacturerIdRequest {
  /*
   * The ID of the manufacturer to be fetched.
   */
  string manufacturer_id = 1;
}

/*
 * The VendorIdRequest is a request message used to retrieve a vendor by its specific ID.
 */
message VendorIdRequest {
  /*
   * The ID of the vendor to be fetched.
   */
  string vendor_id = 1;
}

/*
 * The DeviceIdRequest is a request message used to retrieve a device by its specific ID.
 */
message DeviceIdRequest {
  /*
   * The ID of the device to be fetched.
   */
  string device_id = 1;
}

/*
 * The TestCaseIdRequest is a request message used to retrieve a test case by its specific ID.
 */
message TestCaseIdRequest {
  /*
   * The ID of the test case to be fetched.
   */
  string test_case_id = 1;
}

/*
 * The DeleteResponse message returns the status and descriptive message of the delete operation.
 */
message DeleteResponse {
  /*
   * A boolean flag to show the status of the delete operation.
   */
  bool success = 1;

  /*
   * A detailed message about the result of the delete operation.
   */
  string message = 2;
}

/*
 * The CountryListRequest message to retrieve a paginated, sorted list of countries.
 */
message CountryListRequest{
  /*
   * Pagination and sorting information for the countries list.
   */
  Pagination pagination = 1;
}

/*
 * The ManufacturerListRequest message to retrieve a paginated, sorted list of manufacturers.
 */
message ManufacturerListRequest{
  /*
   * Pagination and sorting information for the manufacturers list.
   */
  Pagination pagination = 1;
}

/*
 * The VendorsListRequest message to retrieve a paginated, sorted list of vendors.
 */
message VendorsListRequest{
  /*
   * Pagination and sorting information for the vendors list.
   */
  Pagination pagination = 1;
}

/*
 * The CountryListResponse message contains the requested list of countries.
 */
message CountryListResponse {
  /*
   * Pagination and sorting information about the returned list of countries.
   */
  Pagination pagination = 1;

  /*
   * The array list of country entities in the response.
   */
  repeated Country countries = 5;
}

/*
 * The ManufacturersListResponse message contains the requested list of manufacturers.
 */
message ManufacturersListResponse {
  /*
   * Pagination and sorting information about the returned list of manufacturers.
   */
  Pagination pagination = 1;

  /*
   * The array list of manufacturer entities in the response.
   */
  repeated Manufacturer manufacturers = 5;
}

/*
 * The VendorsListResponse message contains the requested list of vendors.
 */
message VendorsListResponse {
  /*
   * Pagination and sorting information about the returned list of vendors.
   */
  Pagination pagination = 1;

  /*
   * The array list of vendor entities in the response.
   */
  repeated Vendor vendors = 5;
}

/*
 * Contains required parameters for invoking the CreateMedia method.
 */
message CreateMediaRequest {
  /*
   * Media type such as video, image etc.
   */
  MediaType type = 1;

  /*
   * The name of the media to be created.
   */
  string name = 2;

  /*
   * Brief description about the media.
   */
  string short_description = 3;

  /*
   * Detailed information about the media.
   */
  string description = 4;

  /*
   * Additional labels related to the media.
   */
  repeated string labels = 5;
}
/*
 * Contains information received from CreateMedia method once the media is created.
 */
message CreateMediaResponse {
  /*
   * The media data that was created.
   */
  Media media = 1;
  /*
   * The URL to which the created media should be uploaded.
   */
  string upload_url = 2;
}

/*
 * Contains required parameter (media's ID) for invoking the GetMedia method.
 */
message GetMediaRequest {
  /*
   * The ID of the media that client wants to retrieve.
   */
  string id = 1;
}

/*
 * Contains information received from GetMedia method.
 */
message GetMediaResponse {
  /*
   * The media object that was requested by client.
   */
  Media media = 1;
}

/*
 * Contains required parameters for invoking the ListMedia method.
 */
message ListMediaRequest {
  /*
   * Information for pagination and sorting of the media list.
   */
  Pagination pagination = 1;
}

/*
 * Contains the list of media objects retrieved from the ListMedia method.
 */
message ListMediaResponse {
  /*
   * Pagination details for the listed media.
   */
  Pagination pagination = 1;
  /*
   * The list of media objects.
   */
  repeated Media templates = 2;
}

/*
 * Contains required parameters for invoking the UpdateMedia method.
 */
message UpdateMediaRequest {
  /*
   * The ID of the media to be updated.
   */
  string id = 1;
  /*
   * The new name for the media.
   */
  string name = 2;
  /*
   * The new brief description of the media.
   */
  string short_description = 3;
  /*
   * The new detailed description of the media.
   */
  string description = 4;
  /*
   * The new labels for the media.
   */
  repeated string labels = 5;
  /*
   * The new type for the media.
   */
  MediaType type = 6;
}

/*
 * Contains information received from UpdateMedia method after the media data is updated.
 */
message UpdateMediaResponse {
  /*
   * The media data after update.
   */
  Media media = 1;
}

/*
 * Contains required parameter (media's ID) for invoking the DeleteMedia method.
 */
message DeleteMediaRequest {
  /*
   * The ID of the media to be deleted.
   */
  string id = 1;
}

/*
 * Contains information received from DeleteMedia method after the media data is deleted.
 */
message DeleteMediaResponse {
  /*
   * The details of the media that was deleted.
   */
  Media media = 1;
}

/*
 * Message containing media related metadata
 * This message type is used for capturing all details pertaining to a media entity such as documents, images, audio files, etc.
 */
message Media {
  /*
   * Unique identifier of the media entity.
   */
  optional string id = 1;

  /*
   * The time at which the media entity was created. The time is in the Timestamp format, as provided by the google protobuf library.
   */
  optional google.protobuf.Timestamp created_at = 2;

  /*
   * The time at which this media entity was last updated.
   */
  optional google.protobuf.Timestamp updated_at = 3;

  /*
   * Identifier of the organization this media entity belongs to.
   */
  string organization_id = 4;

  /*
   * Identifier of the workspace this media entity is part of.
   */
  string workspace_id = 5;

  /*
   * Name of the file representing the media entity.
   */
  string name = 6;

  /*
   * A concise description or summary of the media entity.
   */
  string short_description = 7;

  /*
   * A detailed description of the media entity.
   */
  string description = 8;

  /*
   * The type of media entity. The value is an enum defined by the `MediaType` message.
   */
  MediaType type = 9;

  /*
   * List of labels associated with the media entity. Each media entity can have zero or more labels.
   */
  repeated string labels = 10;

  /*
   * The MIME type of the media entity. For example, 'text/plain' for a text file.
   */
  string mime_type = 11;

  /*
   * Size of the media entity file in bytes.
   */
  uint64 size = 12;

  /*
   * URL indicating the location where the media entity is stored, such as on AWS S3 or Google Cloud Platform (GCP). This URL isn't used for retrieval purposes.
   */
  string location = 13;

  /*
   * URL endpoint used for rendering or downloading the media entity.
   */
  string endpoint = 14;

  /*
   * The current state of the media entity. The value is an enum defined by the `MediaStatus` message.
   */
  MediaStatus status = 16;

  /*
   * Timestamp at which this media entity was created. This is a legacy field and is being replaced by `created_at`.
   */
  optional google.protobuf.Timestamp created = 17;

  /*
   * Timestamp at which this media entity was last modified. This is a legacy field and is being replaced by `updated_at`.
   */
  optional google.protobuf.Timestamp modified = 18;

  /*
   * ID of the user who created this media entity.
   */
  optional string creator = 19;

  /*
   * ID of the user who last modified this media entity.
   */
  optional string modifier = 20;
}


/*
 * PreprocessMediaRequest is a message that encapsulates the parameters for a request to preprocess media.
 */
message PreprocessMediaRequest {
  /*
   * Indication as to whether the media should be checked.
   */
  bool check = 3;
}

/*
 * PreprocessMediaResponse is a message that encapsulates the response returned from the PreprocessMedia method.
 */
message PreprocessMediaResponse {
  /*
   * The data related to the media preprocessor.
   */
  MediaPreprocessor media_preprocessor = 1;
}

/*
 * MediaPreprocessor is a message that encapsulates information about the preprocessor.
 */
message MediaPreprocessor {
  /*
   * The unique identifier of the media preprocessor.
   */
  string id = 1;
  /*
   * Timestamp indicating when this preprocessor was created.
   */
  google.protobuf.Timestamp created_at = 2;
  /*
   * Identifier of who created this preprocessor.
   */
  string creator = 3;
  /*
   * Timestamp indicating the last time this preprocessor was updated.
   */
  google.protobuf.Timestamp updated_at = 4;
  /*
   * Identifier of who last updated this preprocessor.
   */
  string modifier = 5;
}


/**
  * The Order message captures the details of a single order placed by a patient.
 */
message Order {
  /**
   * The unique identifier for the order.
   */
  optional string id = 1;

  /**
   * The unique identifier for the patient who placed the order or for whom the order was placed.
   */
  optional string patient_id = 2;

  /**
   * The shipping name for the order.
   */
  FullName shipping_name = 3;

  /**
   * The shipping address for the order.
   */
  Address shipping_address = 4;

  /**
   * The id of TestCase that are part of the order.
   */
  string test_case_id = 5;

  /*
   * The timestamp capturing when this particular Manufacturer instance was created.
   * This is optional, and might not be present at all.
   */
  optional google.protobuf.Timestamp created = 6;

  /*
   * The timestamp capturing any modifications to the Manufacturer instance.
   * Similar to 'created', this too is optional.
   */
  optional google.protobuf.Timestamp modified = 7;

  /*
   * The ID of the user who initially created this Manufacturer instance.
   * Another optional field.
   */
  optional string creator = 8;

  /*
   * The ID of the user who made the most recent modifications to this Manufacturer instance.
   * This field is also optional.
   */
  optional string modifier = 9;

  /**
   * The status of the order.
   */
  optional ShippingStatus status = 10;
}

/**
 * The CreateOrderRequest message captures the details of a request to create a new order.
 */
message CreateOrderRequest {
  /**
   * The order to be created.
   */
  Order order = 1;
}

/**
 * The CreateOrderResponse message captures the details of the response to a request to create a new order.
 */
message CreateOrderResponse {
  /**
   * The order that was created.
   */
  Order order = 1;
}

/**
 * The GetOrderRequest message captures the details of a request to retrieve an existing order.
 */
message GetOrderRequest {
  /**
   * The unique identifier for the order to be retrieved.
   */
  string id = 1;
}
/**
 * The GetOrderResponse message captures the details of the response to a request to retrieve an existing order.
 */
message GetOrderResponse {
  /**
   * The order that was retrieved.
   */
  Order order = 1;
}
/**
 * The UpdateOrderRequest message captures the details of a request to update an existing order.
 */
message UpdateOrderRequest {
  /**
   * The order to be updated.
   */
  Order order = 1;
}
/**
 * The UpdateOrderResponse message captures the details of the response to a request to update an existing order.
 */
message UpdateOrderResponse {
  /**
   * The order that was updated.
   */
  Order order = 1;
}

/**
 * The CancelOrderRequest message captures the details of a request to cancel an existing order.
 */
message CancelOrderRequest {
  /**
   * The unique identifier for the order to be cancelled.
   */
  string id = 1;
}

/**
 * The CancelOrderResponse message captures the details of the response to a request to cancel an existing order.
 */
message CancelOrderResponse {
  /**
   * The order that was cancelled.
   */
  Order order = 1;
}
/**
 * The ListOrdersRequest message captures the details of a request to retrieve a list of orders.
 */
message ListOrdersRequest {
  /**
   * The pagination details for the list of orders.
   */
  Pagination pagination = 1;
  /**
   * The unique identifier for the patient whose orders are to be retrieved.
   */
  optional string patient_id = 2;
}
/**
 * The ListOrdersResponse message captures the details of the response to a request to retrieve a list of orders.
 */
message ListOrdersResponse {

  /**
   * The list of orders that were retrieved.
   */
  repeated Order orders = 1;

  /**
   * The pagination details for the list of orders.
   */
  Pagination pagination = 2;
}


/**
 * The ShippingRequest message is used to request shipping options for a package.
 */
message ShippingRequest {
  /**
   * The address of the sender.
   */
  Address sender_address = 1;
  /**
   * The name to ship the package to.
   */
  FullName shipping_name = 2;
  /**
   * The address of the recipient.
   */
  Address recipient_address = 3;
  /**
   * The package details.
   */
  Order package_details = 4;
  /**
   * The service level requested.
   */
  bool require_signature = 5;
  /**
   * The declared value of the package.
   */
  double declared_value = 6;
}

/**
 * The Shipping message is used to ship a package.
 */
message Shipping {

  /**
   * The shipping id.
   */
  optional string id = 1;
  /**
   * The name to ship the package to.
   */
  FullName shipping_name = 2;
  /**
   * The address of the sender.
   */
  Address sender_address = 3;
  /**
   * The address of the recipient.
   */
  Address recipient_address = 4;
  /**
   * The package details.
   */
  Order package_details = 5;
  /**
   * The service level requested.
   */
  ServiceLevel service_level = 6;
  /**
   * The additional services requested.
   */
  repeated AdditionalService additional_services = 7;
  /**
   * The payment details.
   */
  bool require_signature = 8;
  /**
   * The declared value of the package.
   */
  double declared_value = 9;
  /**
   * The shipping vendor id.
   */
  string shipping_vendor_id = 10;

  /**
   * The shipping cost.
   */
  double shipping_cost = 11;
  /**
   * The payment details.
   */
  PaymentDetails payment_details = 12;
}

/**
 * The ShippingResponse message is used to return the shipping details.
 */
message ShippingResponse {
  /**
   * The tracking number.
   */
  string tracking_number = 1;
  /**
   * The shipping status.
   */
  ShippingStatus status = 2;
  /**
   * The estimated delivery date.
   */
  google.protobuf.Timestamp estimated_delivery_date = 3;
  /**
   * The shipping cost.
   */
  double total_cost = 4;

}

/**
 * The AdditionalService message is used to define additional services.
 */
message AdditionalService {
  /**
   * The additional service code.
   */
  string code = 1;
  /**
   * The additional service short description.
   */
  string short_description = 2;
  /**
   * The additional service long description.
   */
  string long_description = 3;
}

/**
 * The ServiceLevel message is used to define the service level.
 */
message ServiceLevel {
  /**
   * The service level code.
   */
  string code = 1;
  /**
   * The service level short description.
   */
  string short_description = 2;
  /**
   * The service level long description.
   */
  string long_description = 3;
}

/**
 * The ShippingVendorResponse message is used to return the shipping vendors.
 */
message ShippingVendorResponse {
  /**
   * The shipping vendors.
   */
  repeated Shipping options = 1;
}

/*
 * This protobuf message represents the entities involved in a Delivery Tracking System. It includes various fields that
 * provide information about an ongoing or completed delivery.
 *
 * The 'DeliveryTracking' is a message which represents a specific delivery and stores the details related to it.
 */
message DeliveryTracking {
  /*
   * Uniquely identifies a delivery instance.
   */
  optional string tracking_id = 1;

  /*
   * This field is used to link the delivery to a particular order.
   */
  optional string order_id = 2;

  /*
   * Stores the current status of the delivery.
   */
  optional ShippingStatus status = 3;

  /*
   * The timestamp representing when the delivery process was commenced.
   */
  google.protobuf.Timestamp start_datetime = 4;

  /*
   * The timestamp indicating when the delivery reached its destination.
   */
  google.protobuf.Timestamp end_datetime = 5;

  /*
   * Information about the current whereabouts of the delivery.
   */
  optional string current_location = 6;

  /*
   * Contains information about the person who is supposed to receive the delivery.
   */
  optional string recipient = 7;

  /*
   * Here all the details related to the items included in the delivery are stored.
   */
  repeated string delivery_items = 8;

  /*
   * The courier person who has been responsible for the delivery is identified by this field.
   */
  optional string assigned_courier = 9;
}

/*
 * The DeliveryTrackingRequest message defining the request format for a Delivery Tracking entity.
 */
message DeliveryTrackingRequest {
  /*
   * Delivery tracking details
   */
  DeliveryTracking delivery_tracking = 1;
}

/*
 * The DeliveryTrackingResponse message states the response format from the Delivery Tracking operation.
 * 'delivery_tracking' holds the created delivery tracking details.
 */
message DeliveryTrackingResponse {
  /*
   * Created delivery tracking data
   */
  DeliveryTracking delivery_tracking = 1;
}

/*
 * This is a Protobuf message that serves as a container for the input data
 * that will be used for making predictions. This could be used in any service
 * that requires data prediction.
 */
message PredictorInput {
  /*
   * This is the ID of the encounter that is associated with the data.
   */
  optional string encounter_id = 1;

  /*
   * This is the ID of the test that the data is connected to.
   */
  optional string test_id = 2;

  /*
   * These are the various features extracted from the test data.
   */
  repeated string test_features = 3;
}

/*
 * This is a Protobuf message that is used to encapsulate the output from a prediction model.
 * The output is associated with a given encounter.
 */
message PredictorOutput {
  /*
   * The ID of the encounter that the data is associated with.
   */
  optional string encounter_id = 1;

  /*
   * The predicted outcome or value that the model has produced.
   */
  optional string predicted_value = 2;
}

/*
 * A Protobuf message that is used as a request for the Neural Predictor Service.
 * It encapsulates the necessary input data for a prediction.
 */
message PredictorRequest {
  /*
   * The input data that will be used for prediction.
   */
  PredictorInput predictor_input = 1;
}

/*
 * A Protobuf message that serves as a response from the Neural Predictor Service.
 * It encapsulates the output of the prediction model.
 */
message PredictorResponse {
  /*
   * The output of the prediction model.
   */
  PredictorOutput predictor_output = 1;
}


/*
 * This `AnomalyDetectionData` message contains details regarding detected anomalies in a system.
 * An anomaly could be an unusual access pattern, a fraud attempt, or a system hack.
 * It includes associated encounter information, user information, the data access pattern,
 * a timestamp of data access, and involved IP and geographical location.
 * Additionally, a list of detected anomalies, affected systems, and the severity level of the anomaly.
 */
message AnomalyDetectionData {
  /*
   * `encounter_id` is the unique identifier for the encounter associated with the anomaly detection data.
   * For instance, it may signify a specific event or instance when data was accessed anomalously.
   */
  optional string encounter_id = 1;

  /*
   * `user_id` represents the unique identifier of the user associated with the anomaly detection data.
   * This could be an internal system user or an external user accessing the system.
   */
  optional string user_id = 2;

  /*
   * `data_access_pattern` is an attribute that represents the pattern of data access.
   * It could signify whether the access was Read, Write, Update, or Delete operation, or a specific sequence of operations.
   */
  optional string data_access_pattern = 3;

  /*
   * `time_stamp` represents the timestamp when the anomalous data access occurred.
   */
  optional google.protobuf.Timestamp time_stamp = 4;

  /*
   * `anomalies_detected` is a list of the anomalies that were detected during the encounter.
   * Each anomaly might pertain to a different aspect of the system or data access.
   */
  repeated string anomalies_detected = 5;

  /*
   * `source_ip` is the IP address from which the user's abnormal access originated.
   * It could be used for tracking the source of the anomaly.
   */
  optional string source_ip = 6;

  /*
   * `location` represents the geographic location from which the anomalous data access was made.
   * This could help in identifying patterns or specific regions where anomalies originate.
   */
  optional string location = 7;

  /*
   * `affected_systems` is a list of all the systems that were adversely impacted by the detected anomalies.
   * Multiple systems could be affected by a single anomaly.
   */
  repeated string affected_systems = 8;

  /*
   * `severity_level` indicates the severity of the detected anomaly, typically presented as a level.
   * Levels can include classifications such as low, medium, or high.
   */
  optional string severity_level = 9;
}

/*
 * The `AuthorizationControlData` message represents the data necessary to control the authorization process.
 * It carries all the necessary identifiers, properties, and flags needed for managing data access.
 */
message AuthorizationControlData {

  /*
   * The `encounter_id` field is the unique identifier for a particular encounter/session associated with the data access.
   * It helps to trace back the exact instance when a particular data access was granted or denied.
   */
  optional string encounter_id = 1;

  /*
   * The `user_id` field represents the unique identifier of the user associated with the given data access.
   * This helps clearly identify which user is being granted or denied access.
   */
  optional string user_id = 2;

  /*
   * The `data_access_level` field represents the level or clearance of data access granted to the user.
   * Different values of this field determine how much of the data the user can access.
   */
  optional string data_access_level = 3;

  /*
   * The `access_granted_by` field represents the entity or authority that has granted the access.
   */
  optional string access_granted_by = 4;

  /*
   * The `access_scopes` field is a comprehensive list of all the scopes or areas under which
   * the user is authorized to access the data. Each string in this list represents a different scope.
   */
  repeated string access_scopes = 5;

  /*
   * The `access_validity_period` field holds the time frame or period during which the access
   * granted to the user is considered valid. After this period, the access becomes void and must be renewed.
   */
  optional string access_validity_period = 6;

  /*
   * The `is_temporary_access` is a flag indicating whether the access granted is temporary or permanent.
   * When this flag is set to true, the user has been granted temporary access.
   */
  optional bool is_temporary_access = 7;

  /*
   * The `conditional_access_params` field contains a list of conditions or parameters that must be met
   * for the user to be granted access. Each string in this list stands for a different condition or parameter.
   */
  repeated string conditional_access_params = 8;
}

/*
 * The PrivacyProtectionData message is a Protocol Buffers (protobuf) message
 * that contains information pertinent to privacy protection of user data.
 * It includes specifics such as the type of data, anonymized form of data,
 * encryption details, retention policy, data sharing agreement status,
 * and the purpose of data collection.
 */
message PrivacyProtectionData {
  /*
   * Contains the unique identifier of the encounter linked to this privacy protection data.
   * An 'encounter' refers to the specific interaction or event where the data was obtained.
   */
  optional string encounter_id = 1;

  /*
   * Represents the category or nature of the data involved.
   * This could be Personal Identifiable Information (PII), health-related data,
   * financial information, etc.
   */
  optional string data_type = 2;

  /*
   * Stores the data that has been anonymized or de-identified, through a
   * process that ensures the original data does not reveal the identity of the users.
   */
  optional string anonymized_data = 3;

  /*
   * This flag is used to check whether the data is stored securely by applying
   * a specific encryption method.
   */
  optional bool is_data_encrypted = 4;

  /*
   * If data encryption is enabled (is_data_encrypted = true),
   * this field specifies the particular encryption method used.
   */
  optional string encryption_method = 5;

  /*
   * Defines the policy for data retention, including the length of data storage,
   * time of review, and conditions for data deletion or archival, in line with privacy regulations.
   */
  optional string data_retention_policy = 6;

  /*
   * Verifies whether there is a mutually agreed upon data sharing contract that
   * defines the process, rules, and recipients of data sharing, if any.
   */
  optional bool has_data_sharing_agreement = 7;

  /*
   * Articulates why this specific data was collected and what the anticipated uses
   * of this data are. This explanation is often a part of privacy guidelines for user transparency.
   */
  optional string data_purpose = 8;
}


/*
 * Defines a protocol for the real-time monitoring data.
 */
message RealTimeMonitoringData {

  /*
   * A unique identifier related to the data being monitored - typically related to a particular encounter.
   */
  optional string encounter_id = 1;

  /*
   * Specifies the name or the unique identifier of the entity (such as user, device, process) that is being monitored in real-time.
   */
  optional string monitored_entity = 2;

  /*
   * Details about what is being monitored or what kind of data is being collected during the real-time monitoring process.
   */
  optional string monitoring_details = 3;

  /*
   * Specifies the precise time when the monitoring process was initiated.
   */
  optional google.protobuf.Timestamp monitoring_start_time = 4;

  /*
   * Indicates the exact time when the monitoring process was concluded. Needless if the monitoring process is continuous.
   */
  optional google.protobuf.Timestamp monitoring_end_time = 5;

  /*
   * Contains a list of alerts initiated during the monitoring process. These alerts can include threshold triggers, system failures, errors, etc.
   */
  repeated string triggered_alerts = 6;

  /*
   * Provides information about the frequency of the monitoring activity, such as 'every 5 minutes or 'hourly'.
   */
  optional string monitoring_frequency = 7;

  /*
   * A boolean value that determines if the monitoring process is continuous. If set to true, the 'monitoring_end_time' field becomes unnecessary.
   */
  optional bool is_continuous_monitoring = 8;

  /*
   * The name or the identifier of the team responsible for executing the monitoring process.
   */
  optional string responsible_monitoring_team = 9;
}

/*
 * This Protobuf message structure represents a detailed user behavior analysis data.
 * It includes information such as encounter ID, user ID, user behavior pattern,
 * associated activities, behavior analysis time frame, historical behavior data,
 * risk assessment based on behavior, an indicator if the behavior is an outlier,
 * and potential consequences of the behavior.
 */
message UserBehaviorAnalysisData {
  /*
   * Encounter ID associated with the data. An encounter ID is an unique identifier
   * for a particular encounter or event.
   */
  optional string encounter_id = 1;
  /*
   * ID of the user associated with the data. user_id represents the unique identifier
   * of a user.
   */
  optional string user_id = 2;
  /*
   * Pattern of user behavior. It represents a particular way a user interacts with the system.
   */
  optional string behavior_pattern = 3;
  /*
   * Activities associated with the behavior. They are a list of actions or tasks
   * performed by the user that are related to the observed behavior.
   */
  repeated string associated_activities = 4;
  /*
   * Time frame for behavior analysis. It represents the period during which the behavior analysis was conducted.
   */
  optional string analysis_time_frame = 5;
  /*
   * Historical data of user behavior. This includes past behaviors of the user for historical comparison.
   */
  repeated string historical_behavior_data = 6;
  /*
   * Risk assessment based on behavior. It is a judgement or estimation of the risk posed by the
   * current behavior of the user.
   */
  optional string risk_assessment = 7;
  /*
   * Indicates if behavior is an outlier, i.e., if the current behavior significantly deviates from
   * the user's usual behavior.
   */
  optional bool is_behavior_outlier = 8;
  /*
   * Potential consequences of the behavior. These are predictions or estimations of the potential
   * outcomes if the current behavior is not addressed.
   */
  optional string behavior_consequence = 9;
}


/*
 * This message format represents a request for AnomalyDetectionData.
 * It encapsulates the anomaly detection data details within AnomalyDetectionDataRequest.
 */
message AnomalyDetectionDataRequest {
  /*
   * A detailed request which encapsulates anomaly detection data
   */
  AnomalyDetectionData anomaly_detection_data = 1;
}

/*
 * This message format represents a request for AuthorizationControlData.
 * It encapsulates the authorization control data details within AuthorizationControlDataRequest.
 */
message AuthorizationControlDataRequest {
  /*
   * A comprehensive request encapsulating authorization control data
   */
  AuthorizationControlData authorization_control_data = 1;
}

/*
 * This message format represents a request for PrivacyProtectionData.
 * It encapsulates the privacy protection data details within PrivacyProtectionDataRequest.
 */
message PrivacyProtectionDataRequest {
  /*
   * A request encapsulating privacy protection data with in-depth fields
   */
  PrivacyProtectionData privacy_protection_data = 1;
}

/*
 * This message format represents a request for RealTimeMonitoringData.
 * It encapsulates the real-time monitoring data details within RealTimeMonitoringDataRequest.
 */
message RealTimeMonitoringDataRequest {
  /*
   * An elaborate request encapsulating real-time monitoring data
   */
  RealTimeMonitoringData real_time_monitoring_data = 1;
}

/*
 * This message format represents a request for UserBehaviorAnalysisData.
 * It encapsulates the user behavior analysis data details within UserBehaviorAnalysisDataRequest.
 */
message UserBehaviorAnalysisDataRequest {
  /*
   * An expanded request containing user behavior analysis data
   */
  UserBehaviorAnalysisData user_behavior_analysis_data = 1;
}

/*
 * This message format represents the response from the NeuralProtectorService.
 * It includes an optional encounter_id and response message.
 */
message SecurityResponse {
  /*
   * Encounter ID associated with the data
   */
  optional string encounter_id = 1;

  /*
   * Response message from the NeuralProtectorService
   */
  optional string response = 2;
}




/*
 * `BasicInfo` message holds essential details about a healthcare provider.
 */
message ProviderBasicInfo {
  /*
   * The first name of the provider.
   */
  string first_name = 1;
  /*
   * The last name of the provider.
   */
  string last_name = 2;
  /*
   * The credentials of the provider, for example, "M.D.".
   */
  string credential = 3;
  /*
   * Designation indicating whether the provider is operating as a sole proprietor. Typical values are "YES" / "NO".
   */
  string sole_proprietor = 4;
  /*
   * Provider's gender.
   */
  string gender = 5;
  /*
   * The date the provider was added/enumerated in the system.
   */
  string enumeration_date = 6;
  /*
   * The current status of the provider.
   */
  ProviderStatus status = 7;
  /*
   * Any prefix for the provider's name, typically designations like "Dr.".
   */
  string name_prefix = 8;
  /*
   * Any suffix for the provider's name, if applicable.
   */
  string name_suffix = 9;
}

/*
 * The `Taxonomy` message represents the categorization of the healthcare provider based on their specialty/s.
 */
message Taxonomy {
  /*
   * Taxonomy code representing a specific medical specialty.
   */
  string code = 1;
  /*
   * Group or category to which the taxonomy belongs.
   */
  string taxonomy_group = 2;
  /*
   * Description of the taxonomy.
   */
  string desc = 3;
  /*
   * State where the provider holds this taxonomy designation.
   */
  string state = 4;
  /*
   * License number associated with this taxonomy code for the provider.
   */
  string license = 5;
  /*
   * Indicator to denote whether this taxonomy code is the provider's primary specialty.
   */
  bool primary = 6;
}

/*
 * `Identifier` message represents the unique identifiers associated with a healthcare provider.
 */
message Identifier {
  /*
   * Unique identifier code.
   */
  string code = 1;
  /*
   * Description of the identifier, for example, could denote the type of identifier like "MEDICAID".
   */
  string desc = 2;
  /*
   * Information on the entity that issued the identifier.
   */
  string issuer = 3;
  /*
   * The identifier value itself.
   */
  string identifier = 4;
  /*
   * State associated with this identifier.
   */
  string state = 5;
}

/*
 * `ListProvidersResponse` message is used to represent the response when retrieving a list of providers.
 */
message ListProvidersResponse {
  /*
   * The total number of providers information returned in the response.
   */
  int32 result_count = 1;
  /*
   * The list of provider's details.
   */
  repeated Provider results = 2;
}

/*
 * "Provider" message captures all relevant details of a healthcare provider including "id",
 * "user_id" among other fields. Several fields (e.g., addresses, taxonomies, identifiers) can
 * comprise multiple values hence "repeated" is used.
 */
message Provider {
  /*
   * Unique identifier for the provider.
   */
  string id = 1;

  /*
   * Associated User ID of the healthcare provider.
   */
  optional string user_id = 2;

  /*
   * Timestamp (in epoch time) of the provider's creation.
   */
  string created_epoch = 3;

  /*
   * Enumeration type to categorize providers.
   */
  string enumeration_type = 4;

  /*
   * Latest timestamp (in epoch time) when the provider was updated.
   */
  string last_updated_epoch = 5;

  /*
   * Official registration number of the provider.
   */
  string number = 6;

  /*
   * Collection of the healthcare provider's addresses.
   */
  repeated Address addresses = 7;

  /*
   * Correction of various practice locations associated with the provider.
   */
  repeated string practiceLocations = 8;

  /*
   * General information about the provider (name, speciality, etc.).
   */
  ProviderBasicInfo basic = 9;

  /*
   * Different taxonomy codes associated with the healthcare provider.
   */
  repeated Taxonomy taxonomies = 10;

  /*
   * Collection of unique identifiers linked to the provider.
   */
  repeated Identifier identifiers = 11;

  /*
   * Various touchpoints (email, phone number) related to the provider.
   */
  repeated string endpoints = 12;

  /*
   * Any aliases or other names registered under the healthcare provider.
   */
  repeated string other_names = 13;

  /*
   * Protobuf timestamp representing the initial creation of this record.
   */
  google.protobuf.Timestamp created = 14;

  /*
   * Protobuf timestamp when the provider record was last updated.
   */
  google.protobuf.Timestamp modified = 15;

  /*
   * Creator's ID who created provider event.
   */
  string creator = 16;

  /*
   * Modifier's ID who last updated provider event.
   */
  string modifier = 17;
}

/*
 * GetProviderRequest and GetProviderResponse message pair is used for fetching a provider's information.
 */
message GetProviderRequest {
  /*
   * Provider Number as the unique lookup key.
   */
  string provider_number = 1;
}

/*
 * GetProviderResponse returns the information fetched for a healthcare provider.
 */
message GetProviderResponse {
  /*
   * Object containing all information of the healthcare provider requested for.
   */
  Provider provider = 1;
}

/*
 * EditProviderRequest and EditProviderResponse message pair is used for modifying a provider's details.
 */
message EditProviderRequest {
  /*
   * Current state of the provider object that needs to be updated.
   */
  Provider provider = 1;
}

/*
 * EditProviderResponse is empty as it is only used to acknowledge successful receipt of editing request.
 */
message EditProviderResponse {}

/*
 * DeleteProviderRequest enables deletion of a provider using the provider_id as the unique key.
 */
message DeleteProviderRequest {
  /*
   * Uniquely identifies the healthcare provider to be deleted.
   */
  string provider_id = 1;
}

/*
 * LoadProviderRequest and LoadProviderResponse pair is used to load a specific provider's information based on user_id and provider_number.
 */
message LoadProviderRequest{
  /*
   * User ID of the healthcare provider.
   */
  optional string user_id = 1;

  /*
   * Provider number used to fetch the details of a healthcare provider.
   */
  string provider_number = 2;
}

/*
 * LoadProviderResponse returns the details of a healthcare provider based on the LoadProviderRequest message.
 */
message LoadProviderResponse{
  /*
   * Object containing all details of the loaded healthcare provider.
   */
  Provider provider = 1;
}

/*
 * DeleteProviderResponse is empty and is used to acknowledge the successful deletion of a provider.
 */
message DeleteProviderResponse {}

/*
 * ListProvidersRequest is used to fetch a list of all healthcare providers.
 */
message ListProvidersRequest {}



/*
 * A message that encapsulates a collection of Questionnaires. It also
 * includes pagination features for navigating between large volumes
 * of questionnaire data.
 */
message Questionnaires {
  /*
   * A list of Questionnaire resources.
   */
  repeated Questionnaire questionnaires = 1;

  /*
   * Metadata about the pagination state of the Questionnaires list.
   */
  Pagination pagination = 2;
}

/*
 * A single questionnaire resource. It contains various properties that
 * provide information about the questionnaire.
 */
message Questionnaire {
  /*
   * The unique identifier for the questionnaire.
   */
  optional string id = 1;

  /*
   * The type of the resource, in this case, "Questionnaire".
   */
  optional string resource_type = 2;

  /*
   * The title of the questionnaire.
   */
  optional string title = 3;

  /*
   * The status of the questionnaire. See the QuestionnaireStatus enum
   * for possible values.
   */
  optional QuestionnaireStatus status = 4;

  /*
   * A short description of what the questionnaire is for.
   */
  optional string description = 5;

  /*
   * The purpose or objective that this questionnaire is meant to fulfill.
   */
  optional string purpose = 6;

  /*
   * The list of questionnaire items/questions.
   */
  repeated QuestionnaireItem item = 7;

  /*
   * The identifier of the rule that was executed for the questionnaire submission.
   */
  optional string rule_id = 8;

  /*
   * The identifier of the question which the response will be used for the rule  was executed for the questionnaire submission.
   */
  repeated string rule_question_id = 9;

  /*
   * The timestamp representing when this questionnaire was created.
   */
  optional google.protobuf.Timestamp created = 10;

  /*
   * The timestamp representing when this questionnaire was last modified.
   */
  optional google.protobuf.Timestamp modified = 11;

  /*
   * The identifier of the individual or system who created the questionnaire.
   */
  optional string creator = 12;

  /*
   * The identifier of the individual or system who last modified the questionnaire.
   */
  optional string modifier = 13;
}

/*
 * Represents a question or a group of questions within a questionnaire. Each item has a type, a unique identifier,
 * conditional display logic, repetitions, read-only status, nested items, answer options and initial values.
 */
message QuestionnaireItem {
  /*
   * The type of the questionnaire item (ex. integer, boolean, choice).
   */
  optional string type = 1;
  /*
   * The unique identifier for the item.
   */
  optional string link_id = 2;
  /*
   * The text content of the item.
   */
  optional string text = 3;
  /*
   * Conditional display logic for questions.
   */
  repeated QuestionnaireEnableWhen enable_when = 4;
  /*
   * How the questions are shown when all or any conditions are true.
   */
  optional string enable_behavior = 5;
  /*
   * Denotes if the item is required.
   */
  optional bool required = 6;
  /*
   * Denotes if the item can be repeated.
   */
  optional bool repeats = 7;
  /*
   * Denotes if the item is read-only.
   */
  optional bool read_only = 8;
  /*
   * A terminology code that corresponds to this group or question.
   */
  repeated Code code = 9;
  /*
   * Nested questionnaire items.
   */
  repeated QuestionnaireItem item = 10;
  /*
   * Extensions for the item.
   */
  repeated QuestionnaireItemExtension extension = 11;
  /*
   * Answer options for choice-type items.
   */
  repeated QuestionnaireItemAnswerOption answer_option = 12;
  /*
   * Initial values for the item.
   */
  repeated QuestionnaireItemInitial initial = 13;
  /*
   * The ANF statement connector associated with this item.
   */
  repeated AnfStatementConnector anf_statement_connector = 14;
  /*
   * The response provided by the user to the item.
   */
  repeated AnswerValue answer = 15;
}

/*
 * Represents answer response
 */
message AnswerValue {
  /*
   * Integer answer
   */
  optional int32 value_integer = 1;
  /*
   * Double answer
   */
  optional double value_double = 2;
  /*
   * String answer
   */
  optional string value_string = 3;
  /*
   * Boolean answer
   */
  optional bool value_boolean = 4;
  /*
   * Coding answer
   */
  optional Coding value_coding = 5;
}

/*
 * Represents a condition to control the display of the questions.
 */
message QuestionnaireEnableWhen {
  /*
   * The question identifier.
   */
  optional string question = 1;
  /*
   * The operator for the conditional display.
   */
  optional string operator = 2;
  /*
   * The answer options for choice-type questions.
   */
  optional Coding answer_coding = 3;
  /*
   * The answer option for integer-type questions.
   */
  optional int32 answer_integer = 4;
  /*
   * The answer option for double-type questions.
   */
  optional double answer_double = 5;
  /*
   * The answer option for boolean-type questions.
   */
  optional bool answer_boolean = 6;
}

/*
 * Represents a coding system to correspond to a given group or question.
 */
message Code {
  /*
   * The system of the code.
   */
  optional string system = 1;
  /*
   * The code value itself.
   */
  optional string code = 2;
}
/*
 * Represents an extension of a questionnaire item, giving it additional features.
 */
message QuestionnaireItemExtension {
  /*
   * The URL of the extension.
   */
  optional string url = 1;
  /*
   * The code-able concept extension's value.
   */
  optional ValueCodeableConcept value_codeable_concept = 2;
  /*
   * The coding value for the extension.
   */
  optional Coding value_coding = 3;
  /*
   * The integer value for the extension.
   */
  optional int32 value_integer = 4;
  /*
   * The decimal value for the extension.
   */
  optional double value_decimal = 5;
}

/*
 * Represents a code-able concept value used in the value_codeable_concept field of a QuestionnaireItemExtension.
 */
message ValueCodeableConcept {
  /*
   * The human-readable text for the concept value.
   */
  optional string text = 1;
  /*
   * The list of coding values for the concept.
   */
  repeated Coding coding = 2;
}

/*
 * Represents an answer option for a particular questionnaire item.
 */
message QuestionnaireItemAnswerOption {
  /*
   * The coded value for this answer option.
   */
  optional Coding value_coding = 1;
  /*
   * Indicates whether this answer option is pre-selected.
   */
  optional bool initial_selected = 2;
  /*
   * The extensions associated with the answer option.
   */
  repeated Extension extension = 3;
}

/*
 * Represents an extension element used in a QuestionnaireItemAnswerOption message.
 */
message Extension {
  /*
   * The URL that defines the extension.
   */
  optional string url = 1;
  /*
   * The decimal value associated with the extension.
   */
  optional double value_decimal = 2;
  /*
   * The code-able concept associated with the extension.
   */
  optional Coding value_codeable_concept = 3;
}

/*
 * `QuestionnaireItemInitial` message which represents initial values for a questionnaire item.
 * This aids in setting up default responses for different types of questions.
 */
message QuestionnaireItemInitial {
  /*
   * Represents initial boolean value for the item.
   */
  optional bool value_boolean = 1;
  /*
   * Represents initial value for questions of integer type.
   */
  optional int32 value_integer = 2;
  /*
   * Represents initial value for questions of decimal type.
   */
  optional double value_decimal = 3;
}

/*
 * `QuestionnaireData` message represents a questionnaire with key attributes defined as data fields.
 * This message captures all necessary details to fully describe a questionnaire at a general level.
 */
message QuestionnaireData {
  /*
   * Represents the unique identifier for the questionnaire.
   */
  optional string id = 1;
  /*
   * Represents the name of the questionnaire.
   */
  optional string name = 2;
  /*
   * Represents the current status of the questionnaire.
   */
  optional string status = 3;
  /*
   * Represents the state of the questionnaire (active or inactive).
   */
  optional string state = 4;
  /*
   * Represents a JSON structure to be used for displaying the questionnaire to the end user.
   */
  optional string question_json_id = 5;
  /*
   * Represents a JSON field for ANF or any special statements.
   */
  optional string question_anf_json = 6;
  /*
   * Stands for the associated rules engine configuration.
   */
  optional string rules_engine_config = 7;
  /*
   * Timestamp indicating when the questionnaire was created.
   */
  optional google.protobuf.Timestamp created = 8;
  /*
   * Timestamp indicating when the questionnaire was last modified.
   */
  optional google.protobuf.Timestamp modified = 9;
  /*
   * Identifier of the creator of this questionnaire.
   */
  optional string creator = 10;
  /*
   * Identifier of the last modifier of this questionnaire.
   */
  optional string modifier = 11;
}

/*
 * `SystemQuestionnaireData` message represents a list of questionnaire data at the system level.
 * This message typically contains questionnaires that are shared across the entire system.
 */
message SystemQuestionnaireData {
  /*
   * Contains a list of `QuestionnaireData`.
   */
  repeated QuestionnaireData questionnaire_data = 1;
}

/*
 * `ClientQuestionnaireData` message represents a list of questionnaires along with associated Organization and Workspace.
 * This message is used to define questionnaires specific to a certain workspace within an organization.
 */
message ClientQuestionnaireData {
  /*
   * Contains a list of `QuestionnaireData`.
   */
  repeated QuestionnaireData questionnaire_data = 1;
  /*
   * Represents the Id of the Organization associated with these questionnaires.
   */
  optional string organization_id = 2;
  /*
   * Represents the Id of the Workspace within the organization where these questionnaires are used.
   */
  optional string workspace_id = 3;
  /*
   * Id of the rule to be executed on Rules Engine upon questionnaire's submission.
   */
  optional string rule_id = 4;
}

/*
 * `UserQuestionnaireData` message represents a list of questionnaires associated with a specific user.
 * This message is used to define questionnaires that are tied to specific users for user-centric tasks.
 */
message UserQuestionnaireData {
  /*
 * Represents the unique identifier for the questionnaire.
 */
  optional string id = 1;
  /*
   * Represents the user identifier associated with these questionnaires.
   */
  string patient_id = 2;
  /*
    * Contains a list of `Questionnaire` associated with a specific user.
    */
  repeated Questionnaire questionnaire_data = 3;
}


/*
 * Represents the request to delete data
 */
message DeleteQuestionnaireRequest {
  /*
   * The unique identifier of the Questionnaire resource
   */
  optional string id = 1;
  /*
   * The identifier of the associated organization
   */
  optional string organization_id = 2;
  /*
   * The identifier of the associated workspace
   */
  optional string workspace_id = 3;
  /*
   * The identifier of the associated user
   */
  optional string user_id = 4;
}

/*
 * Represents the request to retrieve a specific questionnaire
 */
message GetQuestionnaireRequest {
  /*
   * The unique identifier of the Questionnaire resource
   */
  optional string id = 1;
  /*
   * The respective pagination information and sorting details.
   */
  Pagination pagination = 2;
}

/*
 * Represents the request to retrieve a list of questionnaires
 */
message GetQuestionnaireListRequest {
  /*
   * The unique identifier of the Questionnaire resource
   */
  optional string id = 1;
  /*
   * The respective pagination information and sorting details.
   */
  Pagination pagination = 2;
}

/*
 * Represents the response status of a questionnaire operation.
 */
message SubmissionResponse {
  /*
   * Denotes whether the operation was successful or not.
   */
  bool success = 1;
  /*
   * Supplementary message providing more details about the operation status.
   */
  string message = 2;

  /*
   * Relevant ID associated with this submission.
   */
  string id = 3;
}
/*
 * Represents a request to submit a FHIR questionnaire.
 */
message QuestionnaireRequest {
  /*
   * The requested questionnaire to be submitted.
   */
  Questionnaire questionnaire = 1;
}

/* The `QuestionnaireDataRequest` message type is used to wrap the questionnaire data for a specific request.
 * It contains a single field `questionnaire_data` which encapsulates the details specific to the requested questionnaire.
 */
message QuestionnaireDataRequest {
  /*
   * Field that holds the respective questionnaire data.
   */
  QuestionnaireData questionnaire_data = 1;
}

/* The `ClientQuestionnaireDataRequest` message type is used for client-level requests for the FHIR questionnaire data.
 * It contains a single field `client_questionnaire_data` which encapsulates the client-level specific questionnaire.
 */
message ClientQuestionnaireDataRequest {
  /*
   * Field that holds the client-level FHIR questionnaire data.
   */
  ClientQuestionnaireData client_questionnaire_data = 1;
}

/* The `UserQuestionnaireDataRequest` message type is used for user-level requests for the FHIR questionnaire data.
 * It contains a single field `user_questionnaire_data` which encapsulates the user-level specific questionnaire.
 */
message UserQuestionnaireDataRequest {
  /*
   * Field that holds user-level FHIR questionnaire data.
   */
  UserQuestionnaireData user_questionnaire_data = 1;
}


/*
 * UserQuestionnaireDataResponse is a message type defined in Protocol Buffers,
 * a language-neutral, platform-neutral extensible mechanism for serializing structured data.
 * This message type is used to pass response data of a user questionnaire request.
 *
 * list: An array of 'UserQuestionnaireData' items. Each item in the list represents
 * individual user's response to the questionnaire.
 *
 * pagination: This field contains pagination information and sorting details to handle large
 * data sets. The Pagination object is defined in 'cdx.opencdx.grpc.common' and it enables
 * navigating through large data sets by loading only a subset of the data at a time, thus
 * optimizing response time and system resources.
 */
message UserQuestionnaireDataResponse {
  /*
   * An array of UserQuestionnaireData items
   */
  repeated UserQuestionnaireData list = 1;

  /*
   * Contains pagination information for large data sets
   */
  Pagination pagination = 2;
}



/*
 * TinkarQueryRequest Message: Represents the user's request to search the tinkar db.
 */
message TinkarSearchQueryRequest {
  /*
   * The search string required for the request.
   */
  string query = 1;
  /*
   * The maximum number of results to be returned.
   */
  int32 max_results = 2;
}

/*
 * TinkarQueryResult Message: Represents the result structure returned by `Tinkar` service.
 */
message TinkarSearchQueryResult {
  int32 nid = 1;
  int32 rc_nid = 2;
  int32 pattern_nid = 3;
  int32 field_index = 4;
  float score = 5;
  string highlighted_string = 6;
}
/*
 * TinkarResponse Message: Represents the response that `Tinkar` service returns.
 */
message TinkarSearchQueryResponse {
  repeated TinkarSearchQueryResult results = 1;
}

/*
 * TinkarGetRequest Message: Represents the user's request to search the tinkar db.
 */
message TinkarGetRequest {
  /*
   * The concept ID required for the request.
   */
  string concept_id = 1;
}

/*
 * TinkarGetResult Message: Represents the result
 */
message TinkarGetResult {
  /*
   * The concept ID of the result.
   */
  string concept_id = 1;
  /*
   * The description of the concept ID of the result.
   */
  string description = 2;
}

/*
 * TinkarGetResponse Message: Represents the response that `Tinkar` service returns.
 */
message TinkarGetResponse {
  repeated TinkarGetResult results = 1;
}

/*
 * The 'CategoryType' message is designed to handle different types of categories that
 * might be needed in the application. This might include categories related to vendor,
 * manufacturer, test type etc.
 */
message CategoryType {
  /*
   * 'id' field carries a unique identifier for each category. It's a string and a primary way
   * to identify and differentiate categories from each other.
   */
  string id = 1;
  /*
   * 'type' field describes the category. This is a descriptive field giving information about
   * the type of category.
   */
  string type = 2;
}