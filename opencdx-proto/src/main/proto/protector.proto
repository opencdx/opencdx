syntax = "proto3";

package cdx.opencdx.grpc.neural.protector;

option java_multiple_files = true;


import "google/protobuf/timestamp.proto";

/**
 * Detailed anomaly detection data.
 */
message AnomalyDetectionData {
  optional string encounter_id = 1; // Encounter ID associated with the data
  optional string user_id = 2; // ID of the user associated with the data
  optional string data_access_pattern = 3; // Pattern of data access
  optional google.protobuf.Timestamp time_stamp = 4; // Timestamp of the data
  repeated string anomalies_detected = 5; // List of detected anomalies
  optional string source_ip = 6; // IP address of the user's device
  optional string location = 7; // Geographic location of access
  repeated string affected_systems = 8; // Systems affected by the anomalies
  optional string severity_level = 9; // Severity level of the anomaly
}

/**
 * Comprehensive authorization control data.
 */
message AuthorizationControlData {
  optional string encounter_id = 1; // Encounter ID associated with the data
  optional string user_id = 2; // ID of the user associated with the data
  optional string data_access_level = 3; // Level of data access
  optional string access_granted_by = 4; // Entity granting access
  repeated string access_scopes = 5; // Scopes of access
  optional string access_validity_period = 6; // Time period for which access is valid
  optional bool is_temporary_access = 7; // Indicates if access is temporary
  repeated string conditional_access_params = 8; // Conditions under which access is granted
}

/**
 * Privacy protection data with in-depth fields.
 */
message PrivacyProtectionData {
  optional string encounter_id = 1; // Encounter ID associated with the data
  optional string data_type = 2; // Type of data
  optional string anonymized_data = 3; // Anonymized data
  optional bool is_data_encrypted = 4; // Indicates if data is encrypted
  optional string encryption_method = 5; // Method of data encryption
  optional string data_retention_policy = 6; // Policy for data retention
  optional bool has_data_sharing_agreement = 7; // Indicates if there's a data sharing agreement
  optional string data_purpose = 8; // Purpose for which the data is collected
}

/**
 * Elaborate real-time monitoring data.
 */
message RealTimeMonitoringData {
  optional string encounter_id = 1; // Encounter ID associated with the data
  optional string monitored_entity = 2; // Entity being monitored
  optional string monitoring_details = 3; // Details of monitoring
  optional google.protobuf.Timestamp monitoring_start_time = 4; // Start time of monitoring
  optional google.protobuf.Timestamp monitoring_end_time = 5; // End time of monitoring
  repeated string triggered_alerts = 6; // Alerts triggered during monitoring
  optional string monitoring_frequency = 7; // Frequency of monitoring activity
  optional bool is_continuous_monitoring = 8; // Indicates if monitoring is continuous
  optional string responsible_monitoring_team = 9; // Team responsible for monitoring
}

/**
 * Expanded user behavior analysis data.
 */
message UserBehaviorAnalysisData {
  optional string encounter_id = 1; // Encounter ID associated with the data
  optional string user_id = 2; // ID of the user associated with the data
  optional string behavior_pattern = 3; // Pattern of user behavior
  repeated string associated_activities = 4; // Activities associated with the behavior
  optional string analysis_time_frame = 5; // Time frame for behavior analysis
  repeated string historical_behavior_data = 6; // Historical data of user behavior
  optional string risk_assessment = 7; // Risk assessment based on behavior
  optional bool is_behavior_outlier = 8; // Indicates if behavior is an outlier
  optional string behavior_consequence = 9; // Potential consequences of the behavior
}

/**
 * NeuralProtectorService with operations.
 */
service NeuralProtectorService {
  rpc DetectAnomalies(AnomalyDetectionDataRequest) returns (SecurityResponse);
  rpc EnforceAuthorizationControl(AuthorizationControlDataRequest) returns (SecurityResponse);
  rpc ProtectPrivacy(PrivacyProtectionDataRequest) returns (SecurityResponse);
  rpc MonitorRealTimeActivity(RealTimeMonitoringDataRequest) returns (SecurityResponse);
  rpc AnalyzeUserBehavior(UserBehaviorAnalysisDataRequest) returns (SecurityResponse);
}

/**
 * New request message formats for AnomalyDetectionData.
 */
message AnomalyDetectionDataRequest {
  AnomalyDetectionData anomaly_detection_data = 1; // Request containing detailed anomaly detection data
}

/**
 * New request message formats for AuthorizationControlData.
 */
message AuthorizationControlDataRequest {
  AuthorizationControlData authorization_control_data = 1; // Request containing comprehensive authorization control data
}

/**
 * New request message formats for PrivacyProtectionData.
 */
message PrivacyProtectionDataRequest {
  PrivacyProtectionData privacy_protection_data = 1; // Request containing privacy protection data with in-depth fields
}

/**
 * New request message formats for RealTimeMonitoringData.
 */
message RealTimeMonitoringDataRequest {
  RealTimeMonitoringData real_time_monitoring_data = 1; // Request containing elaborate real-time monitoring data
}

/**
 * New request message formats for UserBehaviorAnalysisData.
 */
message UserBehaviorAnalysisDataRequest {
  UserBehaviorAnalysisData user_behavior_analysis_data = 1; // Request containing expanded user behavior analysis data
}

/**
 * SecurityResponse message returned by the NeuralProtectorService.
 */
message SecurityResponse {
  optional string encounter_id = 1; // Encounter ID associated with the data
  optional string response = 2; // Response message from the NeuralProtectorService
}
